
test_no_default.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004938  08004938  00014938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004950  08004950  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004950  08004950  00014950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004958  08004958  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004958  08004958  00014958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800495c  0800495c  0001495c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000000c  0800496c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  0800496c  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec2a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c5c  00000000  00000000  0002ec66  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fe8  00000000  00000000  000308c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  000318b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021f3a  00000000  00000000  000327d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b71f  00000000  00000000  0005470a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d21bf  00000000  00000000  0005fe29  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00131fe8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004488  00000000  00000000  00132064  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004920 	.word	0x08004920

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004920 	.word	0x08004920

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b0a2      	sub	sp, #136	; 0x88
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f001 fa59 	bl	8001984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f853 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 fb3b 	bl	8000b50 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004da:	f000 f8c5 	bl	8000668 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80004de:	f000 fae3 	bl	8000aa8 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80004e2:	f000 f913 	bl	800070c <MX_ADC2_Init>
  MX_I2C1_Init();
 80004e6:	f000 f997 	bl	8000818 <MX_I2C1_Init>
  MX_DAC_Init();
 80004ea:	f000 f961 	bl	80007b0 <MX_DAC_Init>
  MX_I2C3_Init();
 80004ee:	f000 f9c1 	bl	8000874 <MX_I2C3_Init>
  MX_TIM3_Init();
 80004f2:	f000 f9ed 	bl	80008d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004f6:	f000 fa61 	bl	80009bc <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80004fa:	f000 faff 	bl	8000afc <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004fe:	f000 f8a7 	bl	8000650 <MX_NVIC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Start PWMs
  HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 8000502:	2100      	movs	r1, #0
 8000504:	4815      	ldr	r0, [pc, #84]	; (800055c <main+0x94>)
 8000506:	f002 ffdd 	bl	80034c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start (&htim4, TIM_CHANNEL_2);
 800050a:	2104      	movs	r1, #4
 800050c:	4814      	ldr	r0, [pc, #80]	; (8000560 <main+0x98>)
 800050e:	f002 ffd9 	bl	80034c4 <HAL_TIM_PWM_Start>
    //  voice = !voice;
    //}
    // I2C slave receive
    //HAL_I2C_Slave_Receive (&hi2c3, msg_4, 1, HAL_MAX_DELAY);

    if (!voice)
 8000512:	4b14      	ldr	r3, [pc, #80]	; (8000564 <main+0x9c>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	f083 0301 	eor.w	r3, r3, #1
 800051a:	b2db      	uxtb	r3, r3
 800051c:	2b00      	cmp	r3, #0
 800051e:	d013      	beq.n	8000548 <main+0x80>
    {
      // Read ADC value
      ADC_1 = ADC_Read(&hadc1);
 8000520:	4811      	ldr	r0, [pc, #68]	; (8000568 <main+0xa0>)
 8000522:	f000 fc61 	bl	8000de8 <ADC_Read>
 8000526:	4603      	mov	r3, r0
 8000528:	461a      	mov	r2, r3
 800052a:	4b10      	ldr	r3, [pc, #64]	; (800056c <main+0xa4>)
 800052c:	801a      	strh	r2, [r3, #0]
      ADC_2 = ADC_Read(&hadc2);
 800052e:	4810      	ldr	r0, [pc, #64]	; (8000570 <main+0xa8>)
 8000530:	f000 fc5a 	bl	8000de8 <ADC_Read>
 8000534:	4603      	mov	r3, r0
 8000536:	461a      	mov	r2, r3
 8000538:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <main+0xac>)
 800053a:	801a      	strh	r2, [r3, #0]

      // Motor controlling logics
      driving();
 800053c:	f000 fc6a 	bl	8000e14 <driving>
      HAL_Delay(100);
 8000540:	2064      	movs	r0, #100	; 0x64
 8000542:	f001 fa91 	bl	8001a68 <HAL_Delay>
 8000546:	e7e4      	b.n	8000512 <main+0x4a>
    }
    else
    {
      stop();
 8000548:	f000 fe2a 	bl	80011a0 <stop>
      HAL_UART_Receive (&huart3, (uint8_t*)msg_5, 1, 200); // receiving message from pi
 800054c:	1d39      	adds	r1, r7, #4
 800054e:	23c8      	movs	r3, #200	; 0xc8
 8000550:	2201      	movs	r2, #1
 8000552:	4809      	ldr	r0, [pc, #36]	; (8000578 <main+0xb0>)
 8000554:	f003 fd4b 	bl	8003fee <HAL_UART_Receive>
    if (!voice)
 8000558:	e7db      	b.n	8000512 <main+0x4a>
 800055a:	bf00      	nop
 800055c:	200001a8 	.word	0x200001a8
 8000560:	2000008c 	.word	0x2000008c
 8000564:	20000034 	.word	0x20000034
 8000568:	200001e8 	.word	0x200001e8
 800056c:	20000028 	.word	0x20000028
 8000570:	2000010c 	.word	0x2000010c
 8000574:	2000002a 	.word	0x2000002a
 8000578:	200000cc 	.word	0x200000cc

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f004 f9c0 	bl	8004910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b28      	ldr	r3, [pc, #160]	; (8000648 <SystemClock_Config+0xcc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a27      	ldr	r2, [pc, #156]	; (8000648 <SystemClock_Config+0xcc>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b25      	ldr	r3, [pc, #148]	; (8000648 <SystemClock_Config+0xcc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b22      	ldr	r3, [pc, #136]	; (800064c <SystemClock_Config+0xd0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a21      	ldr	r2, [pc, #132]	; (800064c <SystemClock_Config+0xd0>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <SystemClock_Config+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2310      	movs	r3, #16
 80005e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ec:	2308      	movs	r3, #8
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005f0:	2332      	movs	r3, #50	; 0x32
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005f4:	2304      	movs	r3, #4
 80005f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f8:	2307      	movs	r3, #7
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f002 fa9d 	bl	8002b40 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800060c:	f000 fe70 	bl	80012f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800061c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000626:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fcf6 	bl	8003020 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800063a:	f000 fe59 	bl	80012f0 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	; 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	2017      	movs	r0, #23
 800065a:	f001 febc 	bl	80023d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800065e:	2017      	movs	r0, #23
 8000660:	f001 fed5 	bl	800240e <HAL_NVIC_EnableIRQ>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}

08000668 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800066e:	463b      	mov	r3, r7
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800067a:	4b21      	ldr	r3, [pc, #132]	; (8000700 <MX_ADC1_Init+0x98>)
 800067c:	4a21      	ldr	r2, [pc, #132]	; (8000704 <MX_ADC1_Init+0x9c>)
 800067e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <MX_ADC1_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000686:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <MX_ADC1_Init+0x98>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800068c:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000692:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_ADC1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <MX_ADC1_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_ADC1_Init+0x98>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <MX_ADC1_Init+0x98>)
 80006a8:	4a17      	ldr	r2, [pc, #92]	; (8000708 <MX_ADC1_Init+0xa0>)
 80006aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_ADC1_Init+0x98>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <MX_ADC1_Init+0x98>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_ADC1_Init+0x98>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_ADC1_Init+0x98>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c6:	480e      	ldr	r0, [pc, #56]	; (8000700 <MX_ADC1_Init+0x98>)
 80006c8:	f001 f9f0 	bl	8001aac <HAL_ADC_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006d2:	f000 fe0d 	bl	80012f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80006d6:	230e      	movs	r3, #14
 80006d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006da:	2301      	movs	r3, #1
 80006dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e2:	463b      	mov	r3, r7
 80006e4:	4619      	mov	r1, r3
 80006e6:	4806      	ldr	r0, [pc, #24]	; (8000700 <MX_ADC1_Init+0x98>)
 80006e8:	f001 fb7c 	bl	8001de4 <HAL_ADC_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006f2:	f000 fdfd 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200001e8 	.word	0x200001e8
 8000704:	40012000 	.word	0x40012000
 8000708:	0f000001 	.word	0x0f000001

0800070c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000712:	463b      	mov	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MX_ADC2_Init+0x98>)
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <MX_ADC2_Init+0x9c>)
 8000722:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_ADC2_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_ADC2_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_ADC2_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000736:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_ADC2_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_ADC2_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_ADC2_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_ADC2_Init+0x98>)
 800074c:	4a17      	ldr	r2, [pc, #92]	; (80007ac <MX_ADC2_Init+0xa0>)
 800074e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_ADC2_Init+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_ADC2_Init+0x98>)
 8000758:	2201      	movs	r2, #1
 800075a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_ADC2_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_ADC2_Init+0x98>)
 8000766:	2201      	movs	r2, #1
 8000768:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800076a:	480e      	ldr	r0, [pc, #56]	; (80007a4 <MX_ADC2_Init+0x98>)
 800076c:	f001 f99e 	bl	8001aac <HAL_ADC_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000776:	f000 fdbb 	bl	80012f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800077a:	230f      	movs	r3, #15
 800077c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800077e:	2301      	movs	r3, #1
 8000780:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	4619      	mov	r1, r3
 800078a:	4806      	ldr	r0, [pc, #24]	; (80007a4 <MX_ADC2_Init+0x98>)
 800078c:	f001 fb2a 	bl	8001de4 <HAL_ADC_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000796:	f000 fdab 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	2000010c 	.word	0x2000010c
 80007a8:	40012100 	.word	0x40012100
 80007ac:	0f000001 	.word	0x0f000001

080007b0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_DAC_Init+0x60>)
 80007c0:	4a14      	ldr	r2, [pc, #80]	; (8000814 <MX_DAC_Init+0x64>)
 80007c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007c4:	4812      	ldr	r0, [pc, #72]	; (8000810 <MX_DAC_Init+0x60>)
 80007c6:	f001 fe3c 	bl	8002442 <HAL_DAC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007d0:	f000 fd8e 	bl	80012f0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	4619      	mov	r1, r3
 80007e2:	480b      	ldr	r0, [pc, #44]	; (8000810 <MX_DAC_Init+0x60>)
 80007e4:	f001 fe4f 	bl	8002486 <HAL_DAC_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007ee:	f000 fd7f 	bl	80012f0 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	2210      	movs	r2, #16
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_DAC_Init+0x60>)
 80007fa:	f001 fe44 	bl	8002486 <HAL_DAC_ConfigChannel>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000804:	f000 fd74 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000230 	.word	0x20000230
 8000814:	40007400 	.word	0x40007400

08000818 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_I2C1_Init+0x50>)
 800081e:	4a13      	ldr	r2, [pc, #76]	; (800086c <MX_I2C1_Init+0x54>)
 8000820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_I2C1_Init+0x50>)
 8000824:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MX_I2C1_Init+0x58>)
 8000826:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_I2C1_Init+0x50>)
 8000836:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800083a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_I2C1_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_I2C1_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_I2C1_Init+0x50>)
 8000856:	f002 f83b 	bl	80028d0 <HAL_I2C_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000860:	f000 fd46 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000154 	.word	0x20000154
 800086c:	40005400 	.word	0x40005400
 8000870:	000186a0 	.word	0x000186a0

08000874 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_I2C3_Init+0x50>)
 800087a:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <MX_I2C3_Init+0x54>)
 800087c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_I2C3_Init+0x50>)
 8000880:	4a12      	ldr	r2, [pc, #72]	; (80008cc <MX_I2C3_Init+0x58>)
 8000882:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_I2C3_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 32;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_I2C3_Init+0x50>)
 800088c:	2220      	movs	r2, #32
 800088e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_I2C3_Init+0x50>)
 8000892:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000896:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <MX_I2C3_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_I2C3_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <MX_I2C3_Init+0x50>)
 80008a6:	2240      	movs	r2, #64	; 0x40
 80008a8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_I2C3_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <MX_I2C3_Init+0x50>)
 80008b2:	f002 f80d 	bl	80028d0 <HAL_I2C_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80008bc:	f000 fd18 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000038 	.word	0x20000038
 80008c8:	40005c00 	.word	0x40005c00
 80008cc:	00061a80 	.word	0x00061a80

080008d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08e      	sub	sp, #56	; 0x38
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e4:	f107 0320 	add.w	r3, r7, #32
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
 80008fc:	615a      	str	r2, [r3, #20]
 80008fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000900:	4b2c      	ldr	r3, [pc, #176]	; (80009b4 <MX_TIM3_Init+0xe4>)
 8000902:	4a2d      	ldr	r2, [pc, #180]	; (80009b8 <MX_TIM3_Init+0xe8>)
 8000904:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12;
 8000906:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <MX_TIM3_Init+0xe4>)
 8000908:	220c      	movs	r2, #12
 800090a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <MX_TIM3_Init+0xe4>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000912:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <MX_TIM3_Init+0xe4>)
 8000914:	2264      	movs	r2, #100	; 0x64
 8000916:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000918:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <MX_TIM3_Init+0xe4>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <MX_TIM3_Init+0xe4>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000924:	4823      	ldr	r0, [pc, #140]	; (80009b4 <MX_TIM3_Init+0xe4>)
 8000926:	f002 fd6d 	bl	8003404 <HAL_TIM_Base_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000930:	f000 fcde 	bl	80012f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800093a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800093e:	4619      	mov	r1, r3
 8000940:	481c      	ldr	r0, [pc, #112]	; (80009b4 <MX_TIM3_Init+0xe4>)
 8000942:	f002 fec3 	bl	80036cc <HAL_TIM_ConfigClockSource>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800094c:	f000 fcd0 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000950:	4818      	ldr	r0, [pc, #96]	; (80009b4 <MX_TIM3_Init+0xe4>)
 8000952:	f002 fd82 	bl	800345a <HAL_TIM_PWM_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800095c:	f000 fcc8 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000968:	f107 0320 	add.w	r3, r7, #32
 800096c:	4619      	mov	r1, r3
 800096e:	4811      	ldr	r0, [pc, #68]	; (80009b4 <MX_TIM3_Init+0xe4>)
 8000970:	f003 fa74 	bl	8003e5c <HAL_TIMEx_MasterConfigSynchronization>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800097a:	f000 fcb9 	bl	80012f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800097e:	2360      	movs	r3, #96	; 0x60
 8000980:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2200      	movs	r2, #0
 8000992:	4619      	mov	r1, r3
 8000994:	4807      	ldr	r0, [pc, #28]	; (80009b4 <MX_TIM3_Init+0xe4>)
 8000996:	f002 fdd3 	bl	8003540 <HAL_TIM_PWM_ConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80009a0:	f000 fca6 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009a4:	4803      	ldr	r0, [pc, #12]	; (80009b4 <MX_TIM3_Init+0xe4>)
 80009a6:	f000 fe63 	bl	8001670 <HAL_TIM_MspPostInit>

}
 80009aa:	bf00      	nop
 80009ac:	3738      	adds	r7, #56	; 0x38
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200001a8 	.word	0x200001a8
 80009b8:	40000400 	.word	0x40000400

080009bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08e      	sub	sp, #56	; 0x38
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d0:	f107 0320 	add.w	r3, r7, #32
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
 80009e8:	615a      	str	r2, [r3, #20]
 80009ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009ec:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <MX_TIM4_Init+0xe4>)
 80009ee:	4a2d      	ldr	r2, [pc, #180]	; (8000aa4 <MX_TIM4_Init+0xe8>)
 80009f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12;
 80009f2:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <MX_TIM4_Init+0xe4>)
 80009f4:	220c      	movs	r2, #12
 80009f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f8:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <MX_TIM4_Init+0xe4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80009fe:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <MX_TIM4_Init+0xe4>)
 8000a00:	2264      	movs	r2, #100	; 0x64
 8000a02:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a04:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <MX_TIM4_Init+0xe4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0a:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <MX_TIM4_Init+0xe4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a10:	4823      	ldr	r0, [pc, #140]	; (8000aa0 <MX_TIM4_Init+0xe4>)
 8000a12:	f002 fcf7 	bl	8003404 <HAL_TIM_Base_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000a1c:	f000 fc68 	bl	80012f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	481c      	ldr	r0, [pc, #112]	; (8000aa0 <MX_TIM4_Init+0xe4>)
 8000a2e:	f002 fe4d 	bl	80036cc <HAL_TIM_ConfigClockSource>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000a38:	f000 fc5a 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a3c:	4818      	ldr	r0, [pc, #96]	; (8000aa0 <MX_TIM4_Init+0xe4>)
 8000a3e:	f002 fd0c 	bl	800345a <HAL_TIM_PWM_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000a48:	f000 fc52 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a54:	f107 0320 	add.w	r3, r7, #32
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <MX_TIM4_Init+0xe4>)
 8000a5c:	f003 f9fe 	bl	8003e5c <HAL_TIMEx_MasterConfigSynchronization>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000a66:	f000 fc43 	bl	80012f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6a:	2360      	movs	r3, #96	; 0x60
 8000a6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <MX_TIM4_Init+0xe4>)
 8000a82:	f002 fd5d 	bl	8003540 <HAL_TIM_PWM_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000a8c:	f000 fc30 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a90:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <MX_TIM4_Init+0xe4>)
 8000a92:	f000 fded 	bl	8001670 <HAL_TIM_MspPostInit>

}
 8000a96:	bf00      	nop
 8000a98:	3738      	adds	r7, #56	; 0x38
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000008c 	.word	0x2000008c
 8000aa4:	40000800 	.word	0x40000800

08000aa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <MX_USART2_UART_Init+0x50>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ab4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ab8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_USART2_UART_Init+0x4c>)
 8000ae0:	f003 fa38 	bl	8003f54 <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aea:	f000 fc01 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2000024c 	.word	0x2000024c
 8000af8:	40004400 	.word	0x40004400

08000afc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <MX_USART3_UART_Init+0x50>)
 8000b04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b22:	220c      	movs	r2, #12
 8000b24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b34:	f003 fa0e 	bl	8003f54 <HAL_UART_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b3e:	f000 fbd7 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000cc 	.word	0x200000cc
 8000b4c:	40004800 	.word	0x40004800

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	; 0x30
 8000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	61bb      	str	r3, [r7, #24]
 8000b6a:	4b97      	ldr	r3, [pc, #604]	; (8000dc8 <MX_GPIO_Init+0x278>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a96      	ldr	r2, [pc, #600]	; (8000dc8 <MX_GPIO_Init+0x278>)
 8000b70:	f043 0310 	orr.w	r3, r3, #16
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b94      	ldr	r3, [pc, #592]	; (8000dc8 <MX_GPIO_Init+0x278>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0310 	and.w	r3, r3, #16
 8000b7e:	61bb      	str	r3, [r7, #24]
 8000b80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	4b90      	ldr	r3, [pc, #576]	; (8000dc8 <MX_GPIO_Init+0x278>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a8f      	ldr	r2, [pc, #572]	; (8000dc8 <MX_GPIO_Init+0x278>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b8d      	ldr	r3, [pc, #564]	; (8000dc8 <MX_GPIO_Init+0x278>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b89      	ldr	r3, [pc, #548]	; (8000dc8 <MX_GPIO_Init+0x278>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a88      	ldr	r2, [pc, #544]	; (8000dc8 <MX_GPIO_Init+0x278>)
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b86      	ldr	r3, [pc, #536]	; (8000dc8 <MX_GPIO_Init+0x278>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b82      	ldr	r3, [pc, #520]	; (8000dc8 <MX_GPIO_Init+0x278>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a81      	ldr	r2, [pc, #516]	; (8000dc8 <MX_GPIO_Init+0x278>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b7f      	ldr	r3, [pc, #508]	; (8000dc8 <MX_GPIO_Init+0x278>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	4b7b      	ldr	r3, [pc, #492]	; (8000dc8 <MX_GPIO_Init+0x278>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a7a      	ldr	r2, [pc, #488]	; (8000dc8 <MX_GPIO_Init+0x278>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b78      	ldr	r3, [pc, #480]	; (8000dc8 <MX_GPIO_Init+0x278>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b74      	ldr	r3, [pc, #464]	; (8000dc8 <MX_GPIO_Init+0x278>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a73      	ldr	r2, [pc, #460]	; (8000dc8 <MX_GPIO_Init+0x278>)
 8000bfc:	f043 0308 	orr.w	r3, r3, #8
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b71      	ldr	r3, [pc, #452]	; (8000dc8 <MX_GPIO_Init+0x278>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0308 	and.w	r3, r3, #8
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2108      	movs	r1, #8
 8000c12:	486e      	ldr	r0, [pc, #440]	; (8000dcc <MX_GPIO_Init+0x27c>)
 8000c14:	f001 fe1e 	bl	8002854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	486c      	ldr	r0, [pc, #432]	; (8000dd0 <MX_GPIO_Init+0x280>)
 8000c1e:	f001 fe19 	bl	8002854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000c22:	2200      	movs	r2, #0
 8000c24:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c28:	486a      	ldr	r0, [pc, #424]	; (8000dd4 <MX_GPIO_Init+0x284>)
 8000c2a:	f001 fe13 	bl	8002854 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c2e:	2308      	movs	r3, #8
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4861      	ldr	r0, [pc, #388]	; (8000dcc <MX_GPIO_Init+0x27c>)
 8000c46:	f001 fc6b 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	485b      	ldr	r0, [pc, #364]	; (8000dd0 <MX_GPIO_Init+0x280>)
 8000c62:	f001 fc5d 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c66:	2308      	movs	r3, #8
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c76:	2305      	movs	r3, #5
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4853      	ldr	r0, [pc, #332]	; (8000dd0 <MX_GPIO_Init+0x280>)
 8000c82:	f001 fc4d 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8a:	4b53      	ldr	r3, [pc, #332]	; (8000dd8 <MX_GPIO_Init+0x288>)
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4850      	ldr	r0, [pc, #320]	; (8000ddc <MX_GPIO_Init+0x28c>)
 8000c9a:	f001 fc41 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c9e:	23c0      	movs	r3, #192	; 0xc0
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cae:	2305      	movs	r3, #5
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4848      	ldr	r0, [pc, #288]	; (8000ddc <MX_GPIO_Init+0x28c>)
 8000cba:	f001 fc31 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4843      	ldr	r0, [pc, #268]	; (8000de0 <MX_GPIO_Init+0x290>)
 8000cd2:	f001 fc25 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cdc:	4b3e      	ldr	r3, [pc, #248]	; (8000dd8 <MX_GPIO_Init+0x288>)
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4838      	ldr	r0, [pc, #224]	; (8000dcc <MX_GPIO_Init+0x27c>)
 8000cec:	f001 fc18 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d02:	2305      	movs	r3, #5
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4834      	ldr	r0, [pc, #208]	; (8000de0 <MX_GPIO_Init+0x290>)
 8000d0e:	f001 fc07 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000d12:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000d16:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	482a      	ldr	r0, [pc, #168]	; (8000dd4 <MX_GPIO_Init+0x284>)
 8000d2c:	f001 fbf8 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d30:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d42:	2306      	movs	r3, #6
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4820      	ldr	r0, [pc, #128]	; (8000dd0 <MX_GPIO_Init+0x280>)
 8000d4e:	f001 fbe7 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000d52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4619      	mov	r1, r3
 8000d66:	481d      	ldr	r0, [pc, #116]	; (8000ddc <MX_GPIO_Init+0x28c>)
 8000d68:	f001 fbda 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000d6c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d7e:	230a      	movs	r3, #10
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	4814      	ldr	r0, [pc, #80]	; (8000ddc <MX_GPIO_Init+0x28c>)
 8000d8a:	f001 fbc9 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d8e:	2320      	movs	r3, #32
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <MX_GPIO_Init+0x284>)
 8000da2:	f001 fbbd 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_GPIO_Init+0x294>)
 8000dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <MX_GPIO_Init+0x27c>)
 8000dba:	f001 fbb1 	bl	8002520 <HAL_GPIO_Init>

}
 8000dbe:	bf00      	nop
 8000dc0:	3730      	adds	r7, #48	; 0x30
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40020800 	.word	0x40020800
 8000dd4:	40020c00 	.word	0x40020c00
 8000dd8:	10110000 	.word	0x10110000
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40020400 	.word	0x40020400
 8000de4:	10120000 	.word	0x10120000

08000de8 <ADC_Read>:
 *  @brief Read ADC value
 *  @param pointer to ADC handler
 *  @retval ADC value
 */
static uint16_t ADC_Read(ADC_HandleTypeDef* handler)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  HAL_ADC_Start(handler);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f000 fe9f 	bl	8001b34 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(handler, HAL_MAX_DELAY);
 8000df6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 ff60 	bl	8001cc0 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(handler);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 ffe1 	bl	8001dc8 <HAL_ADC_GetValue>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b29b      	uxth	r3, r3
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <driving>:
 *  @brief Convert ADC readings to driving direction (GPIO)
 *  @param None
 *  @retval None
 */
static void driving(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  if (ADC_1 < (STICK_Y_MID - STICK_MARGIN)) // y is 0
 8000e18:	4b2d      	ldr	r3, [pc, #180]	; (8000ed0 <driving+0xbc>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	f240 726d 	movw	r2, #1901	; 0x76d
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d802      	bhi.n	8000e2a <driving+0x16>
  {
  	// Case I, II, or III
  	forward();
 8000e24:	f000 f86c 	bl	8000f00 <forward>
 8000e28:	e025      	b.n	8000e76 <driving+0x62>
  }
  else if (ADC_1 > (STICK_Y_MID + STICK_MARGIN))
 8000e2a:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <driving+0xbc>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	f640 1262 	movw	r2, #2402	; 0x962
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d902      	bls.n	8000e3c <driving+0x28>
  {
  	// Case VII, VIII, or IX
  	backward();
 8000e36:	f000 f90f 	bl	8001058 <backward>
 8000e3a:	e01c      	b.n	8000e76 <driving+0x62>
  }
  else
  {
    if (ADC_2 > (STICK_X_MID + STICK_MARGIN))
 8000e3c:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <driving+0xc0>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	f640 02eb 	movw	r2, #2283	; 0x8eb
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d905      	bls.n	8000e54 <driving+0x40>
    {
	    // Case IV
    	counterclockwise();
 8000e48:	f000 fa12 	bl	8001270 <counterclockwise>
    	CASE = 4;
 8000e4c:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <driving+0xc4>)
 8000e4e:	2204      	movs	r2, #4
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	e010      	b.n	8000e76 <driving+0x62>
    }
    else if (ADC_2 < (STICK_X_MID - STICK_MARGIN))
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <driving+0xc0>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	f240 62f6 	movw	r2, #1782	; 0x6f6
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d805      	bhi.n	8000e6c <driving+0x58>
    {
	    // Case VI
    	clockwise();
 8000e60:	f000 f9c4 	bl	80011ec <clockwise>
    	CASE = 6;
 8000e64:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <driving+0xc4>)
 8000e66:	2206      	movs	r2, #6
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	e004      	b.n	8000e76 <driving+0x62>
    }
    else
    {
      // Case V
      stop();
 8000e6c:	f000 f998 	bl	80011a0 <stop>
      CASE = 5;
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <driving+0xc4>)
 8000e72:	2205      	movs	r2, #5
 8000e74:	601a      	str	r2, [r3, #0]
    }
  }
  // updating GPIO value
  HAL_GPIO_WritePin(BRIDGE_GPIO, BRIDGE_PIN_1, BRIDGE_PIN_1_State);
 8000e76:	4b19      	ldr	r3, [pc, #100]	; (8000edc <driving+0xc8>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e80:	4817      	ldr	r0, [pc, #92]	; (8000ee0 <driving+0xcc>)
 8000e82:	f001 fce7 	bl	8002854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BRIDGE_GPIO, BRIDGE_PIN_2, BRIDGE_PIN_2_State);
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <driving+0xd0>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e90:	4813      	ldr	r0, [pc, #76]	; (8000ee0 <driving+0xcc>)
 8000e92:	f001 fcdf 	bl	8002854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BRIDGE_GPIO, BRIDGE_PIN_3, BRIDGE_PIN_3_State);
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <driving+0xd4>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ea0:	480f      	ldr	r0, [pc, #60]	; (8000ee0 <driving+0xcc>)
 8000ea2:	f001 fcd7 	bl	8002854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BRIDGE_GPIO, BRIDGE_PIN_4, BRIDGE_PIN_4_State);
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <driving+0xd8>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb0:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <driving+0xcc>)
 8000eb2:	f001 fccf 	bl	8002854 <HAL_GPIO_WritePin>
  // updating PWM value
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_1);
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <driving+0xdc>)
 8000eb8:	881a      	ldrh	r2, [r3, #0]
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <driving+0xe0>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, PWM_2);
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <driving+0xe4>)
 8000ec2:	881a      	ldrh	r2, [r3, #0]
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <driving+0xe8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000028 	.word	0x20000028
 8000ed4:	2000002a 	.word	0x2000002a
 8000ed8:	20000248 	.word	0x20000248
 8000edc:	20000030 	.word	0x20000030
 8000ee0:	40020c00 	.word	0x40020c00
 8000ee4:	20000031 	.word	0x20000031
 8000ee8:	20000032 	.word	0x20000032
 8000eec:	20000033 	.word	0x20000033
 8000ef0:	2000002c 	.word	0x2000002c
 8000ef4:	200001a8 	.word	0x200001a8
 8000ef8:	2000002e 	.word	0x2000002e
 8000efc:	2000008c 	.word	0x2000008c

08000f00 <forward>:
 * 	@brief Driving control case I, IV, VII: forward and/or turn
 * 	@param None
 * 	@retval None
 */
static void forward()
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
	// motor direction
	BRIDGE_PIN_1_State = GPIO_PIN_SET;
 8000f06:	4b47      	ldr	r3, [pc, #284]	; (8001024 <forward+0x124>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
	BRIDGE_PIN_2_State = GPIO_PIN_RESET;
 8000f0c:	4b46      	ldr	r3, [pc, #280]	; (8001028 <forward+0x128>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
	BRIDGE_PIN_3_State = GPIO_PIN_SET;
 8000f12:	4b46      	ldr	r3, [pc, #280]	; (800102c <forward+0x12c>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
	BRIDGE_PIN_4_State = GPIO_PIN_RESET;
 8000f18:	4b45      	ldr	r3, [pc, #276]	; (8001030 <forward+0x130>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
	// PWM Mapping
	float PosY_Percent =
	    (float)(STICK_Y_MID - ADC_1) / STICK_Y_MID * PWM_DUTY_MAX;
 8000f1e:	4b45      	ldr	r3, [pc, #276]	; (8001034 <forward+0x134>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	f5c3 6306 	rsb	r3, r3, #2144	; 0x860
 8000f26:	3308      	adds	r3, #8
 8000f28:	ee07 3a90 	vmov	s15, r3
 8000f2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f30:	eddf 6a41 	vldr	s13, [pc, #260]	; 8001038 <forward+0x138>
 8000f34:	eec7 7a26 	vdiv.f32	s15, s14, s13
	float PosY_Percent =
 8000f38:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800103c <forward+0x13c>
 8000f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f40:	edc7 7a01 	vstr	s15, [r7, #4]
	if (ADC_2 > (STICK_X_MID + STICK_MARGIN))
 8000f44:	4b3e      	ldr	r3, [pc, #248]	; (8001040 <forward+0x140>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	f640 02eb 	movw	r2, #2283	; 0x8eb
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d927      	bls.n	8000fa0 <forward+0xa0>
	{
	  // Case I
    PWM_2 = PosY_Percent;
 8000f50:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f58:	ee17 3a90 	vmov	r3, s15
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	4b39      	ldr	r3, [pc, #228]	; (8001044 <forward+0x144>)
 8000f60:	801a      	strh	r2, [r3, #0]
    PWM_1 = (float)(ADC_MAX - ADC_2) / (ADC_MAX - STICK_X_MID) * PWM_2;
 8000f62:	4b37      	ldr	r3, [pc, #220]	; (8001040 <forward+0x140>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000f6a:	ee07 3a90 	vmov	s15, r3
 8000f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f72:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001048 <forward+0x148>
 8000f76:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f7a:	4b32      	ldr	r3, [pc, #200]	; (8001044 <forward+0x144>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	ee07 3a90 	vmov	s15, r3
 8000f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f8e:	ee17 3a90 	vmov	r3, s15
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	4b2d      	ldr	r3, [pc, #180]	; (800104c <forward+0x14c>)
 8000f96:	801a      	strh	r2, [r3, #0]
    CASE = 1;
 8000f98:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <forward+0x150>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	601a      	str	r2, [r3, #0]
	  // Case II
	  PWM_1 = PosY_Percent;
	  PWM_2 = PWM_1;
	  CASE = 2;
	}
}
 8000f9e:	e03b      	b.n	8001018 <forward+0x118>
	else if (ADC_2 < (STICK_X_MID - STICK_MARGIN))
 8000fa0:	4b27      	ldr	r3, [pc, #156]	; (8001040 <forward+0x140>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	f240 62f6 	movw	r2, #1782	; 0x6f6
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d825      	bhi.n	8000ff8 <forward+0xf8>
	  PWM_1 = PosY_Percent;
 8000fac:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb4:	ee17 3a90 	vmov	r3, s15
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	4b24      	ldr	r3, [pc, #144]	; (800104c <forward+0x14c>)
 8000fbc:	801a      	strh	r2, [r3, #0]
    PWM_2 = (float)ADC_2 / STICK_X_MID * PWM_1;
 8000fbe:	4b20      	ldr	r3, [pc, #128]	; (8001040 <forward+0x140>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fca:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001054 <forward+0x154>
 8000fce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	; (800104c <forward+0x14c>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fe6:	ee17 3a90 	vmov	r3, s15
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <forward+0x144>)
 8000fee:	801a      	strh	r2, [r3, #0]
    CASE = 3;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <forward+0x150>)
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	601a      	str	r2, [r3, #0]
}
 8000ff6:	e00f      	b.n	8001018 <forward+0x118>
	  PWM_1 = PosY_Percent;
 8000ff8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001000:	ee17 3a90 	vmov	r3, s15
 8001004:	b29a      	uxth	r2, r3
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <forward+0x14c>)
 8001008:	801a      	strh	r2, [r3, #0]
	  PWM_2 = PWM_1;
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <forward+0x14c>)
 800100c:	881a      	ldrh	r2, [r3, #0]
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <forward+0x144>)
 8001010:	801a      	strh	r2, [r3, #0]
	  CASE = 2;
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <forward+0x150>)
 8001014:	2202      	movs	r2, #2
 8001016:	601a      	str	r2, [r3, #0]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	20000030 	.word	0x20000030
 8001028:	20000031 	.word	0x20000031
 800102c:	20000032 	.word	0x20000032
 8001030:	20000033 	.word	0x20000033
 8001034:	20000028 	.word	0x20000028
 8001038:	45068000 	.word	0x45068000
 800103c:	42c80000 	.word	0x42c80000
 8001040:	2000002a 	.word	0x2000002a
 8001044:	2000002e 	.word	0x2000002e
 8001048:	4500f000 	.word	0x4500f000
 800104c:	2000002c 	.word	0x2000002c
 8001050:	20000248 	.word	0x20000248
 8001054:	44fe2000 	.word	0x44fe2000

08001058 <backward>:
 * 	@brief Driving control case III, VI, IX: backward and/or turn
 * 	@param None
 * 	@retval None
 */
static void backward()
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
	// motor direction
	BRIDGE_PIN_1_State = GPIO_PIN_RESET;
 800105e:	4b43      	ldr	r3, [pc, #268]	; (800116c <backward+0x114>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_2_State = GPIO_PIN_SET;
 8001064:	4b42      	ldr	r3, [pc, #264]	; (8001170 <backward+0x118>)
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_3_State = GPIO_PIN_RESET;
 800106a:	4b42      	ldr	r3, [pc, #264]	; (8001174 <backward+0x11c>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_4_State = GPIO_PIN_SET;
 8001070:	4b41      	ldr	r3, [pc, #260]	; (8001178 <backward+0x120>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
	// PWM Mapping
	float NegY_Percent =
	    (float)(ADC_1 - STICK_Y_MID) / (ADC_MAX - STICK_Y_MID) * PWM_DUTY_MAX;
 8001076:	4b41      	ldr	r3, [pc, #260]	; (800117c <backward+0x124>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 800107e:	ee07 3a90 	vmov	s15, r3
 8001082:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001086:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001180 <backward+0x128>
 800108a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	float NegY_Percent =
 800108e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001184 <backward+0x12c>
 8001092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001096:	edc7 7a01 	vstr	s15, [r7, #4]
  if (ADC_2 > (STICK_X_MID + STICK_MARGIN))
 800109a:	4b3b      	ldr	r3, [pc, #236]	; (8001188 <backward+0x130>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	f640 02eb 	movw	r2, #2283	; 0x8eb
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d923      	bls.n	80010ee <backward+0x96>
  {
    // Case VII
    PWM_2 = NegY_Percent;
 80010a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ae:	ee17 3a90 	vmov	r3, s15
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b35      	ldr	r3, [pc, #212]	; (800118c <backward+0x134>)
 80010b6:	801a      	strh	r2, [r3, #0]
    PWM_1 = (float)(ADC_MAX - ADC_2) / (ADC_MAX - STICK_X_MID) * PWM_DUTY_MAX;
 80010b8:	4b33      	ldr	r3, [pc, #204]	; (8001188 <backward+0x130>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80010c0:	ee07 3a90 	vmov	s15, r3
 80010c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c8:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001190 <backward+0x138>
 80010cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001184 <backward+0x12c>
 80010d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010dc:	ee17 3a90 	vmov	r3, s15
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <backward+0x13c>)
 80010e4:	801a      	strh	r2, [r3, #0]
    CASE = 7;
 80010e6:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <backward+0x140>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
    // Case VIII
    PWM_1 = NegY_Percent;
    PWM_2 = PWM_1;
    CASE = 8;
  }
}
 80010ec:	e037      	b.n	800115e <backward+0x106>
  else if (ADC_2 < (STICK_X_MID - STICK_MARGIN))
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <backward+0x130>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	f240 62f6 	movw	r2, #1782	; 0x6f6
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d821      	bhi.n	800113e <backward+0xe6>
    PWM_1 = NegY_Percent;
 80010fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80010fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001102:	ee17 3a90 	vmov	r3, s15
 8001106:	b29a      	uxth	r2, r3
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <backward+0x13c>)
 800110a:	801a      	strh	r2, [r3, #0]
    PWM_2 = (float)ADC_2 / STICK_X_MID * PWM_DUTY_MAX;
 800110c:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <backward+0x130>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	ee07 3a90 	vmov	s15, r3
 8001114:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001118:	eddf 6a20 	vldr	s13, [pc, #128]	; 800119c <backward+0x144>
 800111c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001120:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001184 <backward+0x12c>
 8001124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800112c:	ee17 3a90 	vmov	r3, s15
 8001130:	b29a      	uxth	r2, r3
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <backward+0x134>)
 8001134:	801a      	strh	r2, [r3, #0]
    CASE = 9;
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <backward+0x140>)
 8001138:	2209      	movs	r2, #9
 800113a:	601a      	str	r2, [r3, #0]
}
 800113c:	e00f      	b.n	800115e <backward+0x106>
    PWM_1 = NegY_Percent;
 800113e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001146:	ee17 3a90 	vmov	r3, s15
 800114a:	b29a      	uxth	r2, r3
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <backward+0x13c>)
 800114e:	801a      	strh	r2, [r3, #0]
    PWM_2 = PWM_1;
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <backward+0x13c>)
 8001152:	881a      	ldrh	r2, [r3, #0]
 8001154:	4b0d      	ldr	r3, [pc, #52]	; (800118c <backward+0x134>)
 8001156:	801a      	strh	r2, [r3, #0]
    CASE = 8;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <backward+0x140>)
 800115a:	2208      	movs	r2, #8
 800115c:	601a      	str	r2, [r3, #0]
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000030 	.word	0x20000030
 8001170:	20000031 	.word	0x20000031
 8001174:	20000032 	.word	0x20000032
 8001178:	20000033 	.word	0x20000033
 800117c:	20000028 	.word	0x20000028
 8001180:	44f30000 	.word	0x44f30000
 8001184:	42c80000 	.word	0x42c80000
 8001188:	2000002a 	.word	0x2000002a
 800118c:	2000002e 	.word	0x2000002e
 8001190:	4500f000 	.word	0x4500f000
 8001194:	2000002c 	.word	0x2000002c
 8001198:	20000248 	.word	0x20000248
 800119c:	44fe2000 	.word	0x44fe2000

080011a0 <stop>:
 *  @brief Driving control case V: stop
 *  @param None
 *  @retval None
 */
static void stop()
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
	// motor direction
	BRIDGE_PIN_1_State = GPIO_PIN_RESET;
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <stop+0x34>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_2_State = GPIO_PIN_RESET;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <stop+0x38>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_3_State = GPIO_PIN_RESET;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <stop+0x3c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_4_State = GPIO_PIN_RESET;
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <stop+0x40>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
	// PWM mapping
	PWM_1 = 0;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <stop+0x44>)
 80011be:	2200      	movs	r2, #0
 80011c0:	801a      	strh	r2, [r3, #0]
	PWM_2 = 0;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <stop+0x48>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	801a      	strh	r2, [r3, #0]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000030 	.word	0x20000030
 80011d8:	20000031 	.word	0x20000031
 80011dc:	20000032 	.word	0x20000032
 80011e0:	20000033 	.word	0x20000033
 80011e4:	2000002c 	.word	0x2000002c
 80011e8:	2000002e 	.word	0x2000002e

080011ec <clockwise>:
 *  @brief Driving control case VII: rotate clockwise
 *  @param None
 *  @retval None
 */
static void clockwise()
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
	// motor direction
	BRIDGE_PIN_1_State = GPIO_PIN_SET;
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <clockwise+0x60>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_2_State = GPIO_PIN_RESET;
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <clockwise+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_3_State = GPIO_PIN_RESET;
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <clockwise+0x68>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_4_State = GPIO_PIN_SET;
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <clockwise+0x6c>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
	// PWM mapping
	PWM_1 = (float)(STICK_Y_MID - ADC_2) / STICK_Y_MID * PWM_DUTY_MAX;
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <clockwise+0x70>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	f5c3 6306 	rsb	r3, r3, #2144	; 0x860
 8001210:	3308      	adds	r3, #8
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121a:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001260 <clockwise+0x74>
 800121e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001222:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001264 <clockwise+0x78>
 8001226:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800122e:	ee17 3a90 	vmov	r3, s15
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <clockwise+0x7c>)
 8001236:	801a      	strh	r2, [r3, #0]
	PWM_2 = PWM_1;
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <clockwise+0x7c>)
 800123a:	881a      	ldrh	r2, [r3, #0]
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <clockwise+0x80>)
 800123e:	801a      	strh	r2, [r3, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000030 	.word	0x20000030
 8001250:	20000031 	.word	0x20000031
 8001254:	20000032 	.word	0x20000032
 8001258:	20000033 	.word	0x20000033
 800125c:	2000002a 	.word	0x2000002a
 8001260:	45068000 	.word	0x45068000
 8001264:	42c80000 	.word	0x42c80000
 8001268:	2000002c 	.word	0x2000002c
 800126c:	2000002e 	.word	0x2000002e

08001270 <counterclockwise>:
 *  @brief Driving control case II: rotate counter-clockwise
 *  @param None
 *  @retval None
 */
static void counterclockwise()
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
	// motor direction
	BRIDGE_PIN_1_State = GPIO_PIN_RESET;
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <counterclockwise+0x5c>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_2_State = GPIO_PIN_SET;
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <counterclockwise+0x60>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_3_State = GPIO_PIN_SET;
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <counterclockwise+0x64>)
 8001282:	2201      	movs	r2, #1
 8001284:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_4_State = GPIO_PIN_RESET;
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <counterclockwise+0x68>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
	// PWM mapping
	PWM_1 = (float)(ADC_2 - STICK_Y_MID) / (ADC_MAX - STICK_Y_MID) * PWM_DUTY_MAX;
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <counterclockwise+0x6c>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800129c:	eddf 6a10 	vldr	s13, [pc, #64]	; 80012e0 <counterclockwise+0x70>
 80012a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80012e4 <counterclockwise+0x74>
 80012a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b0:	ee17 3a90 	vmov	r3, s15
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <counterclockwise+0x78>)
 80012b8:	801a      	strh	r2, [r3, #0]
	PWM_2 = PWM_1;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <counterclockwise+0x78>)
 80012bc:	881a      	ldrh	r2, [r3, #0]
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <counterclockwise+0x7c>)
 80012c0:	801a      	strh	r2, [r3, #0]
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	20000030 	.word	0x20000030
 80012d0:	20000031 	.word	0x20000031
 80012d4:	20000032 	.word	0x20000032
 80012d8:	20000033 	.word	0x20000033
 80012dc:	2000002a 	.word	0x2000002a
 80012e0:	44f30000 	.word	0x44f30000
 80012e4:	42c80000 	.word	0x42c80000
 80012e8:	2000002c 	.word	0x2000002c
 80012ec:	2000002e 	.word	0x2000002e

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <HAL_MspInit+0x4c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a0f      	ldr	r2, [pc, #60]	; (800134c <HAL_MspInit+0x4c>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <HAL_MspInit+0x4c>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_MspInit+0x4c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a08      	ldr	r2, [pc, #32]	; (800134c <HAL_MspInit+0x4c>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_MspInit+0x4c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800

08001350 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08c      	sub	sp, #48	; 0x30
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a2e      	ldr	r2, [pc, #184]	; (8001428 <HAL_ADC_MspInit+0xd8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d128      	bne.n	80013c4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
 8001376:	4b2d      	ldr	r3, [pc, #180]	; (800142c <HAL_ADC_MspInit+0xdc>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	4a2c      	ldr	r2, [pc, #176]	; (800142c <HAL_ADC_MspInit+0xdc>)
 800137c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4b2a      	ldr	r3, [pc, #168]	; (800142c <HAL_ADC_MspInit+0xdc>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138a:	61bb      	str	r3, [r7, #24]
 800138c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <HAL_ADC_MspInit+0xdc>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a25      	ldr	r2, [pc, #148]	; (800142c <HAL_ADC_MspInit+0xdc>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b23      	ldr	r3, [pc, #140]	; (800142c <HAL_ADC_MspInit+0xdc>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PC4     ------> ADC1_IN14 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013aa:	2310      	movs	r3, #16
 80013ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ae:	2303      	movs	r3, #3
 80013b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	481c      	ldr	r0, [pc, #112]	; (8001430 <HAL_ADC_MspInit+0xe0>)
 80013be:	f001 f8af 	bl	8002520 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80013c2:	e02c      	b.n	800141e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a1a      	ldr	r2, [pc, #104]	; (8001434 <HAL_ADC_MspInit+0xe4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d127      	bne.n	800141e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <HAL_ADC_MspInit+0xdc>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a15      	ldr	r2, [pc, #84]	; (800142c <HAL_ADC_MspInit+0xdc>)
 80013d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <HAL_ADC_MspInit+0xdc>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_ADC_MspInit+0xdc>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a0e      	ldr	r2, [pc, #56]	; (800142c <HAL_ADC_MspInit+0xdc>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_ADC_MspInit+0xdc>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001406:	2320      	movs	r3, #32
 8001408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140a:	2303      	movs	r3, #3
 800140c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4619      	mov	r1, r3
 8001418:	4805      	ldr	r0, [pc, #20]	; (8001430 <HAL_ADC_MspInit+0xe0>)
 800141a:	f001 f881 	bl	8002520 <HAL_GPIO_Init>
}
 800141e:	bf00      	nop
 8001420:	3730      	adds	r7, #48	; 0x30
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40012000 	.word	0x40012000
 800142c:	40023800 	.word	0x40023800
 8001430:	40020800 	.word	0x40020800
 8001434:	40012100 	.word	0x40012100

08001438 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <HAL_DAC_MspInit+0x7c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d127      	bne.n	80014aa <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <HAL_DAC_MspInit+0x80>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a15      	ldr	r2, [pc, #84]	; (80014b8 <HAL_DAC_MspInit+0x80>)
 8001464:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <HAL_DAC_MspInit+0x80>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_DAC_MspInit+0x80>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_DAC_MspInit+0x80>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_DAC_MspInit+0x80>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001492:	2330      	movs	r3, #48	; 0x30
 8001494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001496:	2303      	movs	r3, #3
 8001498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <HAL_DAC_MspInit+0x84>)
 80014a6:	f001 f83b 	bl	8002520 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	; 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40007400 	.word	0x40007400
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020000 	.word	0x40020000

080014c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08c      	sub	sp, #48	; 0x30
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a42      	ldr	r2, [pc, #264]	; (80015e8 <HAL_I2C_MspInit+0x128>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d12d      	bne.n	800153e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
 80014e6:	4b41      	ldr	r3, [pc, #260]	; (80015ec <HAL_I2C_MspInit+0x12c>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a40      	ldr	r2, [pc, #256]	; (80015ec <HAL_I2C_MspInit+0x12c>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b3e      	ldr	r3, [pc, #248]	; (80015ec <HAL_I2C_MspInit+0x12c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	61bb      	str	r3, [r7, #24]
 80014fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80014fe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001504:	2312      	movs	r3, #18
 8001506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001508:	2301      	movs	r3, #1
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001510:	2304      	movs	r3, #4
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	4835      	ldr	r0, [pc, #212]	; (80015f0 <HAL_I2C_MspInit+0x130>)
 800151c:	f001 f800 	bl	8002520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	4b31      	ldr	r3, [pc, #196]	; (80015ec <HAL_I2C_MspInit+0x12c>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	4a30      	ldr	r2, [pc, #192]	; (80015ec <HAL_I2C_MspInit+0x12c>)
 800152a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800152e:	6413      	str	r3, [r2, #64]	; 0x40
 8001530:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <HAL_I2C_MspInit+0x12c>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800153c:	e050      	b.n	80015e0 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a2c      	ldr	r2, [pc, #176]	; (80015f4 <HAL_I2C_MspInit+0x134>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d14b      	bne.n	80015e0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <HAL_I2C_MspInit+0x12c>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	4a26      	ldr	r2, [pc, #152]	; (80015ec <HAL_I2C_MspInit+0x12c>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	6313      	str	r3, [r2, #48]	; 0x30
 8001558:	4b24      	ldr	r3, [pc, #144]	; (80015ec <HAL_I2C_MspInit+0x12c>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_I2C_MspInit+0x12c>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	4a1f      	ldr	r2, [pc, #124]	; (80015ec <HAL_I2C_MspInit+0x12c>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6313      	str	r3, [r2, #48]	; 0x30
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_I2C_MspInit+0x12c>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001586:	2312      	movs	r3, #18
 8001588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800158a:	2301      	movs	r3, #1
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001592:	2304      	movs	r3, #4
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4619      	mov	r1, r3
 800159c:	4816      	ldr	r0, [pc, #88]	; (80015f8 <HAL_I2C_MspInit+0x138>)
 800159e:	f000 ffbf 	bl	8002520 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a8:	2312      	movs	r3, #18
 80015aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015b4:	2304      	movs	r3, #4
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	480f      	ldr	r0, [pc, #60]	; (80015fc <HAL_I2C_MspInit+0x13c>)
 80015c0:	f000 ffae 	bl	8002520 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <HAL_I2C_MspInit+0x12c>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_I2C_MspInit+0x12c>)
 80015ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015d2:	6413      	str	r3, [r2, #64]	; 0x40
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_I2C_MspInit+0x12c>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
}
 80015e0:	bf00      	nop
 80015e2:	3730      	adds	r7, #48	; 0x30
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40005400 	.word	0x40005400
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020400 	.word	0x40020400
 80015f4:	40005c00 	.word	0x40005c00
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40020000 	.word	0x40020000

08001600 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a15      	ldr	r2, [pc, #84]	; (8001664 <HAL_TIM_Base_MspInit+0x64>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d10e      	bne.n	8001630 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <HAL_TIM_Base_MspInit+0x68>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a13      	ldr	r2, [pc, #76]	; (8001668 <HAL_TIM_Base_MspInit+0x68>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_TIM_Base_MspInit+0x68>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800162e:	e012      	b.n	8001656 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0d      	ldr	r2, [pc, #52]	; (800166c <HAL_TIM_Base_MspInit+0x6c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d10d      	bne.n	8001656 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_TIM_Base_MspInit+0x68>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a09      	ldr	r2, [pc, #36]	; (8001668 <HAL_TIM_Base_MspInit+0x68>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <HAL_TIM_Base_MspInit+0x68>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
}
 8001656:	bf00      	nop
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40000400 	.word	0x40000400
 8001668:	40023800 	.word	0x40023800
 800166c:	40000800 	.word	0x40000800

08001670 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a24      	ldr	r2, [pc, #144]	; (8001720 <HAL_TIM_MspPostInit+0xb0>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d11e      	bne.n	80016d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b23      	ldr	r3, [pc, #140]	; (8001724 <HAL_TIM_MspPostInit+0xb4>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a22      	ldr	r2, [pc, #136]	; (8001724 <HAL_TIM_MspPostInit+0xb4>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <HAL_TIM_MspPostInit+0xb4>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016ae:	2340      	movs	r3, #64	; 0x40
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016be:	2302      	movs	r3, #2
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	4817      	ldr	r0, [pc, #92]	; (8001728 <HAL_TIM_MspPostInit+0xb8>)
 80016ca:	f000 ff29 	bl	8002520 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80016ce:	e022      	b.n	8001716 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a15      	ldr	r2, [pc, #84]	; (800172c <HAL_TIM_MspPostInit+0xbc>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d11d      	bne.n	8001716 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_TIM_MspPostInit+0xb4>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a10      	ldr	r2, [pc, #64]	; (8001724 <HAL_TIM_MspPostInit+0xb4>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_TIM_MspPostInit+0xb4>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001706:	2302      	movs	r3, #2
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4807      	ldr	r0, [pc, #28]	; (8001730 <HAL_TIM_MspPostInit+0xc0>)
 8001712:	f000 ff05 	bl	8002520 <HAL_GPIO_Init>
}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	; 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40000400 	.word	0x40000400
 8001724:	40023800 	.word	0x40023800
 8001728:	40020800 	.word	0x40020800
 800172c:	40000800 	.word	0x40000800
 8001730:	40020400 	.word	0x40020400

08001734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08c      	sub	sp, #48	; 0x30
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a42      	ldr	r2, [pc, #264]	; (800185c <HAL_UART_MspInit+0x128>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d12c      	bne.n	80017b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	4b41      	ldr	r3, [pc, #260]	; (8001860 <HAL_UART_MspInit+0x12c>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a40      	ldr	r2, [pc, #256]	; (8001860 <HAL_UART_MspInit+0x12c>)
 8001760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <HAL_UART_MspInit+0x12c>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	61bb      	str	r3, [r7, #24]
 8001770:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	4b3a      	ldr	r3, [pc, #232]	; (8001860 <HAL_UART_MspInit+0x12c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a39      	ldr	r2, [pc, #228]	; (8001860 <HAL_UART_MspInit+0x12c>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b37      	ldr	r3, [pc, #220]	; (8001860 <HAL_UART_MspInit+0x12c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800178e:	230c      	movs	r3, #12
 8001790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179a:	2303      	movs	r3, #3
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800179e:	2307      	movs	r3, #7
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	482e      	ldr	r0, [pc, #184]	; (8001864 <HAL_UART_MspInit+0x130>)
 80017aa:	f000 feb9 	bl	8002520 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017ae:	e050      	b.n	8001852 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a2c      	ldr	r2, [pc, #176]	; (8001868 <HAL_UART_MspInit+0x134>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d14b      	bne.n	8001852 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b28      	ldr	r3, [pc, #160]	; (8001860 <HAL_UART_MspInit+0x12c>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	4a27      	ldr	r2, [pc, #156]	; (8001860 <HAL_UART_MspInit+0x12c>)
 80017c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ca:	4b25      	ldr	r3, [pc, #148]	; (8001860 <HAL_UART_MspInit+0x12c>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b21      	ldr	r3, [pc, #132]	; (8001860 <HAL_UART_MspInit+0x12c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a20      	ldr	r2, [pc, #128]	; (8001860 <HAL_UART_MspInit+0x12c>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <HAL_UART_MspInit+0x12c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <HAL_UART_MspInit+0x12c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a19      	ldr	r2, [pc, #100]	; (8001860 <HAL_UART_MspInit+0x12c>)
 80017fc:	f043 0308 	orr.w	r3, r3, #8
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <HAL_UART_MspInit+0x12c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800180e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001820:	2307      	movs	r3, #7
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	4810      	ldr	r0, [pc, #64]	; (800186c <HAL_UART_MspInit+0x138>)
 800182c:	f000 fe78 	bl	8002520 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001830:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001842:	2307      	movs	r3, #7
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	4619      	mov	r1, r3
 800184c:	4808      	ldr	r0, [pc, #32]	; (8001870 <HAL_UART_MspInit+0x13c>)
 800184e:	f000 fe67 	bl	8002520 <HAL_GPIO_Init>
}
 8001852:	bf00      	nop
 8001854:	3730      	adds	r7, #48	; 0x30
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40004400 	.word	0x40004400
 8001860:	40023800 	.word	0x40023800
 8001864:	40020000 	.word	0x40020000
 8001868:	40004800 	.word	0x40004800
 800186c:	40020400 	.word	0x40020400
 8001870:	40020c00 	.word	0x40020c00

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <HardFault_Handler+0x4>

08001888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <MemManage_Handler+0x4>

0800188e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <BusFault_Handler+0x4>

08001894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <UsageFault_Handler+0x4>

0800189a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c8:	f000 f8ae 	bl	8001a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  voice = !voice;
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <EXTI9_5_IRQHandler+0x30>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	bf14      	ite	ne
 80018dc:	2301      	movne	r3, #1
 80018de:	2300      	moveq	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	f083 0301 	eor.w	r3, r3, #1
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <EXTI9_5_IRQHandler+0x30>)
 80018f0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80018f2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80018f6:	f000 ffc7 	bl	8002888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000034 	.word	0x20000034

08001904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <SystemInit+0x28>)
 800190a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <SystemInit+0x28>)
 8001910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <SystemInit+0x28>)
 800191a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800191e:	609a      	str	r2, [r3, #8]
#endif
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001968 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001934:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001936:	e003      	b.n	8001940 <LoopCopyDataInit>

08001938 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800193a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800193c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800193e:	3104      	adds	r1, #4

08001940 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001940:	480b      	ldr	r0, [pc, #44]	; (8001970 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001944:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001946:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001948:	d3f6      	bcc.n	8001938 <CopyDataInit>
  ldr  r2, =_sbss
 800194a:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800194c:	e002      	b.n	8001954 <LoopFillZerobss>

0800194e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800194e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001950:	f842 3b04 	str.w	r3, [r2], #4

08001954 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001956:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001958:	d3f9      	bcc.n	800194e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800195a:	f7ff ffd3 	bl	8001904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800195e:	f002 ffb3 	bl	80048c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001962:	f7fe fdb1 	bl	80004c8 <main>
  bx  lr    
 8001966:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001968:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800196c:	08004960 	.word	0x08004960
  ldr  r0, =_sdata
 8001970:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001974:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001978:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800197c:	20000290 	.word	0x20000290

08001980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <ADC_IRQHandler>
	...

08001984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001988:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <HAL_Init+0x40>)
 800198e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <HAL_Init+0x40>)
 800199a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800199e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_Init+0x40>)
 80019a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ac:	2003      	movs	r0, #3
 80019ae:	f000 fd07 	bl	80023c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f000 f808 	bl	80019c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b8:	f7ff fca2 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023c00 	.word	0x40023c00

080019c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_InitTick+0x54>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_InitTick+0x58>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019de:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 fd1f 	bl	800242a <HAL_SYSTICK_Config>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00e      	b.n	8001a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	d80a      	bhi.n	8001a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fc:	2200      	movs	r2, #0
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a04:	f000 fce7 	bl	80023d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a08:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <HAL_InitTick+0x5c>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e000      	b.n	8001a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000004 	.word	0x20000004

08001a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_IncTick+0x20>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_IncTick+0x24>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_IncTick+0x24>)
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	2000028c 	.word	0x2000028c

08001a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_GetTick+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	2000028c 	.word	0x2000028c

08001a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff ffee 	bl	8001a50 <HAL_GetTick>
 8001a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a80:	d005      	beq.n	8001a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_Delay+0x40>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a8e:	bf00      	nop
 8001a90:	f7ff ffde 	bl	8001a50 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d8f7      	bhi.n	8001a90 <HAL_Delay+0x28>
  {
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000008 	.word	0x20000008

08001aac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e033      	b.n	8001b2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d109      	bne.n	8001ade <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff fc40 	bl	8001350 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d118      	bne.n	8001b1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001af2:	f023 0302 	bic.w	r3, r3, #2
 8001af6:	f043 0202 	orr.w	r2, r3, #2
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 fa92 	bl	8002028 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f023 0303 	bic.w	r3, r3, #3
 8001b12:	f043 0201 	orr.w	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	641a      	str	r2, [r3, #64]	; 0x40
 8001b1a:	e001      	b.n	8001b20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_Start+0x1a>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e0a5      	b.n	8001c9a <HAL_ADC_Start+0x166>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d018      	beq.n	8001b96 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b74:	4b4c      	ldr	r3, [pc, #304]	; (8001ca8 <HAL_ADC_Start+0x174>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a4c      	ldr	r2, [pc, #304]	; (8001cac <HAL_ADC_Start+0x178>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	0c9a      	lsrs	r2, r3, #18
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b88:	e002      	b.n	8001b90 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f9      	bne.n	8001b8a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d179      	bne.n	8001c98 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d007      	beq.n	8001bd6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001be2:	d106      	bne.n	8001bf2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be8:	f023 0206 	bic.w	r2, r3, #6
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	645a      	str	r2, [r3, #68]	; 0x44
 8001bf0:	e002      	b.n	8001bf8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c00:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_ADC_Start+0x17c>)
 8001c02:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c0c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d12a      	bne.n	8001c70 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a25      	ldr	r2, [pc, #148]	; (8001cb4 <HAL_ADC_Start+0x180>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d015      	beq.n	8001c50 <HAL_ADC_Start+0x11c>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a23      	ldr	r2, [pc, #140]	; (8001cb8 <HAL_ADC_Start+0x184>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d105      	bne.n	8001c3a <HAL_ADC_Start+0x106>
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_ADC_Start+0x17c>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 031f 	and.w	r3, r3, #31
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00a      	beq.n	8001c50 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1f      	ldr	r2, [pc, #124]	; (8001cbc <HAL_ADC_Start+0x188>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d129      	bne.n	8001c98 <HAL_ADC_Start+0x164>
 8001c44:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <HAL_ADC_Start+0x17c>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 031f 	and.w	r3, r3, #31
 8001c4c:	2b0f      	cmp	r3, #15
 8001c4e:	d823      	bhi.n	8001c98 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d11c      	bne.n	8001c98 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	e013      	b.n	8001c98 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0f      	ldr	r2, [pc, #60]	; (8001cb4 <HAL_ADC_Start+0x180>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d10e      	bne.n	8001c98 <HAL_ADC_Start+0x164>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d107      	bne.n	8001c98 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c96:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	431bde83 	.word	0x431bde83
 8001cb0:	40012300 	.word	0x40012300
 8001cb4:	40012000 	.word	0x40012000
 8001cb8:	40012100 	.word	0x40012100
 8001cbc:	40012200 	.word	0x40012200

08001cc0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cdc:	d113      	bne.n	8001d06 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cec:	d10b      	bne.n	8001d06 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f043 0220 	orr.w	r2, r3, #32
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e05c      	b.n	8001dc0 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d06:	f7ff fea3 	bl	8001a50 <HAL_GetTick>
 8001d0a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d0c:	e01a      	b.n	8001d44 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d14:	d016      	beq.n	8001d44 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d007      	beq.n	8001d2c <HAL_ADC_PollForConversion+0x6c>
 8001d1c:	f7ff fe98 	bl	8001a50 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d20b      	bcs.n	8001d44 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f043 0204 	orr.w	r2, r3, #4
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e03d      	b.n	8001dc0 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d1dd      	bne.n	8001d0e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f06f 0212 	mvn.w	r2, #18
 8001d5a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d123      	bne.n	8001dbe <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d11f      	bne.n	8001dbe <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d006      	beq.n	8001d9a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d111      	bne.n	8001dbe <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d105      	bne.n	8001dbe <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f043 0201 	orr.w	r2, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x1c>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e105      	b.n	800200c <HAL_ADC_ConfigChannel+0x228>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b09      	cmp	r3, #9
 8001e0e:	d925      	bls.n	8001e5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68d9      	ldr	r1, [r3, #12]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4613      	mov	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	3b1e      	subs	r3, #30
 8001e26:	2207      	movs	r2, #7
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43da      	mvns	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	400a      	ands	r2, r1
 8001e34:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68d9      	ldr	r1, [r3, #12]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	4603      	mov	r3, r0
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4403      	add	r3, r0
 8001e4e:	3b1e      	subs	r3, #30
 8001e50:	409a      	lsls	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	e022      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6919      	ldr	r1, [r3, #16]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4413      	add	r3, r2
 8001e70:	2207      	movs	r2, #7
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43da      	mvns	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6919      	ldr	r1, [r3, #16]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	4618      	mov	r0, r3
 8001e92:	4603      	mov	r3, r0
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4403      	add	r3, r0
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d824      	bhi.n	8001ef4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	3b05      	subs	r3, #5
 8001ebc:	221f      	movs	r2, #31
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	400a      	ands	r2, r1
 8001eca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3b05      	subs	r3, #5
 8001ee6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ef2:	e04c      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b0c      	cmp	r3, #12
 8001efa:	d824      	bhi.n	8001f46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3b23      	subs	r3, #35	; 0x23
 8001f0e:	221f      	movs	r2, #31
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43da      	mvns	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	3b23      	subs	r3, #35	; 0x23
 8001f38:	fa00 f203 	lsl.w	r2, r0, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30
 8001f44:	e023      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	3b41      	subs	r3, #65	; 0x41
 8001f58:	221f      	movs	r2, #31
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	400a      	ands	r2, r1
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4618      	mov	r0, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	3b41      	subs	r3, #65	; 0x41
 8001f82:	fa00 f203 	lsl.w	r2, r0, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f8e:	4b22      	ldr	r3, [pc, #136]	; (8002018 <HAL_ADC_ConfigChannel+0x234>)
 8001f90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a21      	ldr	r2, [pc, #132]	; (800201c <HAL_ADC_ConfigChannel+0x238>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d109      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x1cc>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b12      	cmp	r3, #18
 8001fa2:	d105      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a19      	ldr	r2, [pc, #100]	; (800201c <HAL_ADC_ConfigChannel+0x238>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d123      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x21e>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b10      	cmp	r3, #16
 8001fc0:	d003      	beq.n	8001fca <HAL_ADC_ConfigChannel+0x1e6>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b11      	cmp	r3, #17
 8001fc8:	d11b      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b10      	cmp	r3, #16
 8001fdc:	d111      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <HAL_ADC_ConfigChannel+0x23c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a10      	ldr	r2, [pc, #64]	; (8002024 <HAL_ADC_ConfigChannel+0x240>)
 8001fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe8:	0c9a      	lsrs	r2, r3, #18
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ff4:	e002      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f9      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	40012300 	.word	0x40012300
 800201c:	40012000 	.word	0x40012000
 8002020:	20000000 	.word	0x20000000
 8002024:	431bde83 	.word	0x431bde83

08002028 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002030:	4b79      	ldr	r3, [pc, #484]	; (8002218 <ADC_Init+0x1f0>)
 8002032:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	431a      	orrs	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800205c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	021a      	lsls	r2, r3, #8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002080:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6899      	ldr	r1, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	4a58      	ldr	r2, [pc, #352]	; (800221c <ADC_Init+0x1f4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d022      	beq.n	8002106 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6899      	ldr	r1, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6899      	ldr	r1, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	e00f      	b.n	8002126 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002114:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002124:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0202 	bic.w	r2, r2, #2
 8002134:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6899      	ldr	r1, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	7e1b      	ldrb	r3, [r3, #24]
 8002140:	005a      	lsls	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d01b      	beq.n	800218c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002162:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002172:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6859      	ldr	r1, [r3, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	3b01      	subs	r3, #1
 8002180:	035a      	lsls	r2, r3, #13
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	e007      	b.n	800219c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800219a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	051a      	lsls	r2, r3, #20
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6899      	ldr	r1, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021de:	025a      	lsls	r2, r3, #9
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6899      	ldr	r1, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	029a      	lsls	r2, r3, #10
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	609a      	str	r2, [r3, #8]
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	40012300 	.word	0x40012300
 800221c:	0f000001 	.word	0x0f000001

08002220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800223c:	4013      	ands	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800224c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002252:	4a04      	ldr	r2, [pc, #16]	; (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	60d3      	str	r3, [r2, #12]
}
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <__NVIC_GetPriorityGrouping+0x18>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	f003 0307 	and.w	r3, r3, #7
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	2b00      	cmp	r3, #0
 8002294:	db0b      	blt.n	80022ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	f003 021f 	and.w	r2, r3, #31
 800229c:	4907      	ldr	r1, [pc, #28]	; (80022bc <__NVIC_EnableIRQ+0x38>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	2001      	movs	r0, #1
 80022a6:	fa00 f202 	lsl.w	r2, r0, r2
 80022aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000e100 	.word	0xe000e100

080022c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	6039      	str	r1, [r7, #0]
 80022ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	db0a      	blt.n	80022ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	490c      	ldr	r1, [pc, #48]	; (800230c <__NVIC_SetPriority+0x4c>)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	0112      	lsls	r2, r2, #4
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	440b      	add	r3, r1
 80022e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e8:	e00a      	b.n	8002300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4908      	ldr	r1, [pc, #32]	; (8002310 <__NVIC_SetPriority+0x50>)
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	3b04      	subs	r3, #4
 80022f8:	0112      	lsls	r2, r2, #4
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	440b      	add	r3, r1
 80022fe:	761a      	strb	r2, [r3, #24]
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000e100 	.word	0xe000e100
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	; 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f1c3 0307 	rsb	r3, r3, #7
 800232e:	2b04      	cmp	r3, #4
 8002330:	bf28      	it	cs
 8002332:	2304      	movcs	r3, #4
 8002334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3304      	adds	r3, #4
 800233a:	2b06      	cmp	r3, #6
 800233c:	d902      	bls.n	8002344 <NVIC_EncodePriority+0x30>
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3b03      	subs	r3, #3
 8002342:	e000      	b.n	8002346 <NVIC_EncodePriority+0x32>
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43da      	mvns	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	401a      	ands	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800235c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	fa01 f303 	lsl.w	r3, r1, r3
 8002366:	43d9      	mvns	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	4313      	orrs	r3, r2
         );
}
 800236e:	4618      	mov	r0, r3
 8002370:	3724      	adds	r7, #36	; 0x24
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800238c:	d301      	bcc.n	8002392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800238e:	2301      	movs	r3, #1
 8002390:	e00f      	b.n	80023b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002392:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <SysTick_Config+0x40>)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239a:	210f      	movs	r1, #15
 800239c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023a0:	f7ff ff8e 	bl	80022c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <SysTick_Config+0x40>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023aa:	4b04      	ldr	r3, [pc, #16]	; (80023bc <SysTick_Config+0x40>)
 80023ac:	2207      	movs	r2, #7
 80023ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	e000e010 	.word	0xe000e010

080023c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ff29 	bl	8002220 <__NVIC_SetPriorityGrouping>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b086      	sub	sp, #24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	4603      	mov	r3, r0
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e8:	f7ff ff3e 	bl	8002268 <__NVIC_GetPriorityGrouping>
 80023ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68b9      	ldr	r1, [r7, #8]
 80023f2:	6978      	ldr	r0, [r7, #20]
 80023f4:	f7ff ff8e 	bl	8002314 <NVIC_EncodePriority>
 80023f8:	4602      	mov	r2, r0
 80023fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fe:	4611      	mov	r1, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ff5d 	bl	80022c0 <__NVIC_SetPriority>
}
 8002406:	bf00      	nop
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	4603      	mov	r3, r0
 8002416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff31 	bl	8002284 <__NVIC_EnableIRQ>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ffa2 	bl	800237c <SysTick_Config>
 8002438:	4603      	mov	r3, r0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e014      	b.n	800247e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	791b      	ldrb	r3, [r3, #4]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d105      	bne.n	800246a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7fe ffe7 	bl	8001438 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2202      	movs	r2, #2
 800246e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002486:	b480      	push	{r7}
 8002488:	b087      	sub	sp, #28
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	795b      	ldrb	r3, [r3, #5]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_DAC_ConfigChannel+0x20>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e036      	b.n	8002514 <HAL_DAC_ConfigChannel+0x8e>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2202      	movs	r2, #2
 80024b0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80024ba:	f640 72fe 	movw	r2, #4094	; 0xffe
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4013      	ands	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	22c0      	movs	r2, #192	; 0xc0
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43da      	mvns	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	400a      	ands	r2, r1
 8002504:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2201      	movs	r2, #1
 800250a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	371c      	adds	r7, #28
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	; 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	e16b      	b.n	8002814 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800253c:	2201      	movs	r2, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	429a      	cmp	r2, r3
 8002556:	f040 815a 	bne.w	800280e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d00b      	beq.n	800257a <HAL_GPIO_Init+0x5a>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d007      	beq.n	800257a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800256e:	2b11      	cmp	r3, #17
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b12      	cmp	r3, #18
 8002578:	d130      	bne.n	80025dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	2203      	movs	r2, #3
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025b0:	2201      	movs	r2, #1
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f003 0201 	and.w	r2, r3, #1
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	2203      	movs	r2, #3
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0xfc>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b12      	cmp	r3, #18
 800261a:	d123      	bne.n	8002664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	08da      	lsrs	r2, r3, #3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3208      	adds	r2, #8
 8002624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	220f      	movs	r2, #15
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	08da      	lsrs	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3208      	adds	r2, #8
 800265e:	69b9      	ldr	r1, [r7, #24]
 8002660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0203 	and.w	r2, r3, #3
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80b4 	beq.w	800280e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b5f      	ldr	r3, [pc, #380]	; (8002828 <HAL_GPIO_Init+0x308>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	4a5e      	ldr	r2, [pc, #376]	; (8002828 <HAL_GPIO_Init+0x308>)
 80026b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b4:	6453      	str	r3, [r2, #68]	; 0x44
 80026b6:	4b5c      	ldr	r3, [pc, #368]	; (8002828 <HAL_GPIO_Init+0x308>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026c2:	4a5a      	ldr	r2, [pc, #360]	; (800282c <HAL_GPIO_Init+0x30c>)
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	089b      	lsrs	r3, r3, #2
 80026c8:	3302      	adds	r3, #2
 80026ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	220f      	movs	r2, #15
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a51      	ldr	r2, [pc, #324]	; (8002830 <HAL_GPIO_Init+0x310>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d02b      	beq.n	8002746 <HAL_GPIO_Init+0x226>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a50      	ldr	r2, [pc, #320]	; (8002834 <HAL_GPIO_Init+0x314>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d025      	beq.n	8002742 <HAL_GPIO_Init+0x222>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4f      	ldr	r2, [pc, #316]	; (8002838 <HAL_GPIO_Init+0x318>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d01f      	beq.n	800273e <HAL_GPIO_Init+0x21e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4e      	ldr	r2, [pc, #312]	; (800283c <HAL_GPIO_Init+0x31c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d019      	beq.n	800273a <HAL_GPIO_Init+0x21a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4d      	ldr	r2, [pc, #308]	; (8002840 <HAL_GPIO_Init+0x320>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d013      	beq.n	8002736 <HAL_GPIO_Init+0x216>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4c      	ldr	r2, [pc, #304]	; (8002844 <HAL_GPIO_Init+0x324>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00d      	beq.n	8002732 <HAL_GPIO_Init+0x212>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4b      	ldr	r2, [pc, #300]	; (8002848 <HAL_GPIO_Init+0x328>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d007      	beq.n	800272e <HAL_GPIO_Init+0x20e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4a      	ldr	r2, [pc, #296]	; (800284c <HAL_GPIO_Init+0x32c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d101      	bne.n	800272a <HAL_GPIO_Init+0x20a>
 8002726:	2307      	movs	r3, #7
 8002728:	e00e      	b.n	8002748 <HAL_GPIO_Init+0x228>
 800272a:	2308      	movs	r3, #8
 800272c:	e00c      	b.n	8002748 <HAL_GPIO_Init+0x228>
 800272e:	2306      	movs	r3, #6
 8002730:	e00a      	b.n	8002748 <HAL_GPIO_Init+0x228>
 8002732:	2305      	movs	r3, #5
 8002734:	e008      	b.n	8002748 <HAL_GPIO_Init+0x228>
 8002736:	2304      	movs	r3, #4
 8002738:	e006      	b.n	8002748 <HAL_GPIO_Init+0x228>
 800273a:	2303      	movs	r3, #3
 800273c:	e004      	b.n	8002748 <HAL_GPIO_Init+0x228>
 800273e:	2302      	movs	r3, #2
 8002740:	e002      	b.n	8002748 <HAL_GPIO_Init+0x228>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <HAL_GPIO_Init+0x228>
 8002746:	2300      	movs	r3, #0
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	f002 0203 	and.w	r2, r2, #3
 800274e:	0092      	lsls	r2, r2, #2
 8002750:	4093      	lsls	r3, r2
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002758:	4934      	ldr	r1, [pc, #208]	; (800282c <HAL_GPIO_Init+0x30c>)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	3302      	adds	r3, #2
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002766:	4b3a      	ldr	r3, [pc, #232]	; (8002850 <HAL_GPIO_Init+0x330>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800278a:	4a31      	ldr	r2, [pc, #196]	; (8002850 <HAL_GPIO_Init+0x330>)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002790:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <HAL_GPIO_Init+0x330>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027b4:	4a26      	ldr	r2, [pc, #152]	; (8002850 <HAL_GPIO_Init+0x330>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ba:	4b25      	ldr	r3, [pc, #148]	; (8002850 <HAL_GPIO_Init+0x330>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027de:	4a1c      	ldr	r2, [pc, #112]	; (8002850 <HAL_GPIO_Init+0x330>)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027e4:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <HAL_GPIO_Init+0x330>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002808:	4a11      	ldr	r2, [pc, #68]	; (8002850 <HAL_GPIO_Init+0x330>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3301      	adds	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	2b0f      	cmp	r3, #15
 8002818:	f67f ae90 	bls.w	800253c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800281c:	bf00      	nop
 800281e:	3724      	adds	r7, #36	; 0x24
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	40023800 	.word	0x40023800
 800282c:	40013800 	.word	0x40013800
 8002830:	40020000 	.word	0x40020000
 8002834:	40020400 	.word	0x40020400
 8002838:	40020800 	.word	0x40020800
 800283c:	40020c00 	.word	0x40020c00
 8002840:	40021000 	.word	0x40021000
 8002844:	40021400 	.word	0x40021400
 8002848:	40021800 	.word	0x40021800
 800284c:	40021c00 	.word	0x40021c00
 8002850:	40013c00 	.word	0x40013c00

08002854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	807b      	strh	r3, [r7, #2]
 8002860:	4613      	mov	r3, r2
 8002862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002864:	787b      	ldrb	r3, [r7, #1]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800286a:	887a      	ldrh	r2, [r7, #2]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002870:	e003      	b.n	800287a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002872:	887b      	ldrh	r3, [r7, #2]
 8002874:	041a      	lsls	r2, r3, #16
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	619a      	str	r2, [r3, #24]
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002892:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d006      	beq.n	80028ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800289e:	4a05      	ldr	r2, [pc, #20]	; (80028b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f806 	bl	80028b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40013c00 	.word	0x40013c00

080028b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e11f      	b.n	8002b22 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe fde2 	bl	80014c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2224      	movs	r2, #36	; 0x24
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002922:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002932:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002934:	f000 fd3e 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 8002938:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4a7b      	ldr	r2, [pc, #492]	; (8002b2c <HAL_I2C_Init+0x25c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d807      	bhi.n	8002954 <HAL_I2C_Init+0x84>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4a7a      	ldr	r2, [pc, #488]	; (8002b30 <HAL_I2C_Init+0x260>)
 8002948:	4293      	cmp	r3, r2
 800294a:	bf94      	ite	ls
 800294c:	2301      	movls	r3, #1
 800294e:	2300      	movhi	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	e006      	b.n	8002962 <HAL_I2C_Init+0x92>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4a77      	ldr	r2, [pc, #476]	; (8002b34 <HAL_I2C_Init+0x264>)
 8002958:	4293      	cmp	r3, r2
 800295a:	bf94      	ite	ls
 800295c:	2301      	movls	r3, #1
 800295e:	2300      	movhi	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e0db      	b.n	8002b22 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4a72      	ldr	r2, [pc, #456]	; (8002b38 <HAL_I2C_Init+0x268>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	0c9b      	lsrs	r3, r3, #18
 8002974:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4a64      	ldr	r2, [pc, #400]	; (8002b2c <HAL_I2C_Init+0x25c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d802      	bhi.n	80029a4 <HAL_I2C_Init+0xd4>
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	3301      	adds	r3, #1
 80029a2:	e009      	b.n	80029b8 <HAL_I2C_Init+0xe8>
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	4a63      	ldr	r2, [pc, #396]	; (8002b3c <HAL_I2C_Init+0x26c>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	3301      	adds	r3, #1
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	430b      	orrs	r3, r1
 80029be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4956      	ldr	r1, [pc, #344]	; (8002b2c <HAL_I2C_Init+0x25c>)
 80029d4:	428b      	cmp	r3, r1
 80029d6:	d80d      	bhi.n	80029f4 <HAL_I2C_Init+0x124>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1e59      	subs	r1, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029e6:	3301      	adds	r3, #1
 80029e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	bf38      	it	cc
 80029f0:	2304      	movcc	r3, #4
 80029f2:	e04f      	b.n	8002a94 <HAL_I2C_Init+0x1c4>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d111      	bne.n	8002a20 <HAL_I2C_Init+0x150>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1e58      	subs	r0, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6859      	ldr	r1, [r3, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	440b      	add	r3, r1
 8002a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0e:	3301      	adds	r3, #1
 8002a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	bf0c      	ite	eq
 8002a18:	2301      	moveq	r3, #1
 8002a1a:	2300      	movne	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	e012      	b.n	8002a46 <HAL_I2C_Init+0x176>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1e58      	subs	r0, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6859      	ldr	r1, [r3, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	0099      	lsls	r1, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a36:	3301      	adds	r3, #1
 8002a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bf0c      	ite	eq
 8002a40:	2301      	moveq	r3, #1
 8002a42:	2300      	movne	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_I2C_Init+0x17e>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e022      	b.n	8002a94 <HAL_I2C_Init+0x1c4>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10e      	bne.n	8002a74 <HAL_I2C_Init+0x1a4>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1e58      	subs	r0, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6859      	ldr	r1, [r3, #4]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	440b      	add	r3, r1
 8002a64:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a68:	3301      	adds	r3, #1
 8002a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a72:	e00f      	b.n	8002a94 <HAL_I2C_Init+0x1c4>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1e58      	subs	r0, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	0099      	lsls	r1, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	6809      	ldr	r1, [r1, #0]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69da      	ldr	r2, [r3, #28]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ac2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6911      	ldr	r1, [r2, #16]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68d2      	ldr	r2, [r2, #12]
 8002ace:	4311      	orrs	r1, r2
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	000186a0 	.word	0x000186a0
 8002b30:	001e847f 	.word	0x001e847f
 8002b34:	003d08ff 	.word	0x003d08ff
 8002b38:	431bde83 	.word	0x431bde83
 8002b3c:	10624dd3 	.word	0x10624dd3

08002b40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e25b      	b.n	800300a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d075      	beq.n	8002c4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b5e:	4ba3      	ldr	r3, [pc, #652]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d00c      	beq.n	8002b84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b6a:	4ba0      	ldr	r3, [pc, #640]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d112      	bne.n	8002b9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b76:	4b9d      	ldr	r3, [pc, #628]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b82:	d10b      	bne.n	8002b9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b84:	4b99      	ldr	r3, [pc, #612]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d05b      	beq.n	8002c48 <HAL_RCC_OscConfig+0x108>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d157      	bne.n	8002c48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e236      	b.n	800300a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba4:	d106      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x74>
 8002ba6:	4b91      	ldr	r3, [pc, #580]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a90      	ldr	r2, [pc, #576]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	e01d      	b.n	8002bf0 <HAL_RCC_OscConfig+0xb0>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bbc:	d10c      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x98>
 8002bbe:	4b8b      	ldr	r3, [pc, #556]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a8a      	ldr	r2, [pc, #552]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	4b88      	ldr	r3, [pc, #544]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a87      	ldr	r2, [pc, #540]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e00b      	b.n	8002bf0 <HAL_RCC_OscConfig+0xb0>
 8002bd8:	4b84      	ldr	r3, [pc, #528]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a83      	ldr	r2, [pc, #524]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	4b81      	ldr	r3, [pc, #516]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a80      	ldr	r2, [pc, #512]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d013      	beq.n	8002c20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe ff2a 	bl	8001a50 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c00:	f7fe ff26 	bl	8001a50 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b64      	cmp	r3, #100	; 0x64
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e1fb      	b.n	800300a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	4b76      	ldr	r3, [pc, #472]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0xc0>
 8002c1e:	e014      	b.n	8002c4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7fe ff16 	bl	8001a50 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c28:	f7fe ff12 	bl	8001a50 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	; 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e1e7      	b.n	800300a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3a:	4b6c      	ldr	r3, [pc, #432]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0xe8>
 8002c46:	e000      	b.n	8002c4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d063      	beq.n	8002d1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c56:	4b65      	ldr	r3, [pc, #404]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00b      	beq.n	8002c7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c62:	4b62      	ldr	r3, [pc, #392]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d11c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c6e:	4b5f      	ldr	r3, [pc, #380]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d116      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7a:	4b5c      	ldr	r3, [pc, #368]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <HAL_RCC_OscConfig+0x152>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d001      	beq.n	8002c92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e1bb      	b.n	800300a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c92:	4b56      	ldr	r3, [pc, #344]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4952      	ldr	r1, [pc, #328]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca6:	e03a      	b.n	8002d1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d020      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb0:	4b4f      	ldr	r3, [pc, #316]	; (8002df0 <HAL_RCC_OscConfig+0x2b0>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb6:	f7fe fecb 	bl	8001a50 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cbe:	f7fe fec7 	bl	8001a50 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e19c      	b.n	800300a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd0:	4b46      	ldr	r3, [pc, #280]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cdc:	4b43      	ldr	r3, [pc, #268]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4940      	ldr	r1, [pc, #256]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	600b      	str	r3, [r1, #0]
 8002cf0:	e015      	b.n	8002d1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf2:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <HAL_RCC_OscConfig+0x2b0>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fe feaa 	bl	8001a50 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d00:	f7fe fea6 	bl	8001a50 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e17b      	b.n	800300a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d12:	4b36      	ldr	r3, [pc, #216]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d030      	beq.n	8002d8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d016      	beq.n	8002d60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d32:	4b30      	ldr	r3, [pc, #192]	; (8002df4 <HAL_RCC_OscConfig+0x2b4>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d38:	f7fe fe8a 	bl	8001a50 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d40:	f7fe fe86 	bl	8001a50 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e15b      	b.n	800300a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d52:	4b26      	ldr	r3, [pc, #152]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x200>
 8002d5e:	e015      	b.n	8002d8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d60:	4b24      	ldr	r3, [pc, #144]	; (8002df4 <HAL_RCC_OscConfig+0x2b4>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d66:	f7fe fe73 	bl	8001a50 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d6e:	f7fe fe6f 	bl	8001a50 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e144      	b.n	800300a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d80:	4b1a      	ldr	r3, [pc, #104]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80a0 	beq.w	8002eda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9e:	4b13      	ldr	r3, [pc, #76]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10f      	bne.n	8002dca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	4a0e      	ldr	r2, [pc, #56]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dba:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dca:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_RCC_OscConfig+0x2b8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d121      	bne.n	8002e1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <HAL_RCC_OscConfig+0x2b8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a07      	ldr	r2, [pc, #28]	; (8002df8 <HAL_RCC_OscConfig+0x2b8>)
 8002ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de2:	f7fe fe35 	bl	8001a50 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de8:	e011      	b.n	8002e0e <HAL_RCC_OscConfig+0x2ce>
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800
 8002df0:	42470000 	.word	0x42470000
 8002df4:	42470e80 	.word	0x42470e80
 8002df8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfc:	f7fe fe28 	bl	8001a50 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e0fd      	b.n	800300a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0e:	4b81      	ldr	r3, [pc, #516]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d106      	bne.n	8002e30 <HAL_RCC_OscConfig+0x2f0>
 8002e22:	4b7d      	ldr	r3, [pc, #500]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	4a7c      	ldr	r2, [pc, #496]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2e:	e01c      	b.n	8002e6a <HAL_RCC_OscConfig+0x32a>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b05      	cmp	r3, #5
 8002e36:	d10c      	bne.n	8002e52 <HAL_RCC_OscConfig+0x312>
 8002e38:	4b77      	ldr	r3, [pc, #476]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	4a76      	ldr	r2, [pc, #472]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002e3e:	f043 0304 	orr.w	r3, r3, #4
 8002e42:	6713      	str	r3, [r2, #112]	; 0x70
 8002e44:	4b74      	ldr	r3, [pc, #464]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e48:	4a73      	ldr	r2, [pc, #460]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e50:	e00b      	b.n	8002e6a <HAL_RCC_OscConfig+0x32a>
 8002e52:	4b71      	ldr	r3, [pc, #452]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	4a70      	ldr	r2, [pc, #448]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5e:	4b6e      	ldr	r3, [pc, #440]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e62:	4a6d      	ldr	r2, [pc, #436]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002e64:	f023 0304 	bic.w	r3, r3, #4
 8002e68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d015      	beq.n	8002e9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e72:	f7fe fded 	bl	8001a50 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e78:	e00a      	b.n	8002e90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e7a:	f7fe fde9 	bl	8001a50 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e0bc      	b.n	800300a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e90:	4b61      	ldr	r3, [pc, #388]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0ee      	beq.n	8002e7a <HAL_RCC_OscConfig+0x33a>
 8002e9c:	e014      	b.n	8002ec8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e9e:	f7fe fdd7 	bl	8001a50 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea6:	f7fe fdd3 	bl	8001a50 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e0a6      	b.n	800300a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ebc:	4b56      	ldr	r3, [pc, #344]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1ee      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d105      	bne.n	8002eda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ece:	4b52      	ldr	r3, [pc, #328]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	4a51      	ldr	r2, [pc, #324]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 8092 	beq.w	8003008 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ee4:	4b4c      	ldr	r3, [pc, #304]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d05c      	beq.n	8002faa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d141      	bne.n	8002f7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef8:	4b48      	ldr	r3, [pc, #288]	; (800301c <HAL_RCC_OscConfig+0x4dc>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efe:	f7fe fda7 	bl	8001a50 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f06:	f7fe fda3 	bl	8001a50 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e078      	b.n	800300a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f18:	4b3f      	ldr	r3, [pc, #252]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f0      	bne.n	8002f06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	019b      	lsls	r3, r3, #6
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	085b      	lsrs	r3, r3, #1
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	041b      	lsls	r3, r3, #16
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	061b      	lsls	r3, r3, #24
 8002f48:	4933      	ldr	r1, [pc, #204]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f4e:	4b33      	ldr	r3, [pc, #204]	; (800301c <HAL_RCC_OscConfig+0x4dc>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7fe fd7c 	bl	8001a50 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7fe fd78 	bl	8001a50 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e04d      	b.n	800300a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6e:	4b2a      	ldr	r3, [pc, #168]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x41c>
 8002f7a:	e045      	b.n	8003008 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7c:	4b27      	ldr	r3, [pc, #156]	; (800301c <HAL_RCC_OscConfig+0x4dc>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7fe fd65 	bl	8001a50 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f8a:	f7fe fd61 	bl	8001a50 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e036      	b.n	800300a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9c:	4b1e      	ldr	r3, [pc, #120]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f0      	bne.n	8002f8a <HAL_RCC_OscConfig+0x44a>
 8002fa8:	e02e      	b.n	8003008 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e029      	b.n	800300a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fb6:	4b18      	ldr	r3, [pc, #96]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d11c      	bne.n	8003004 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d115      	bne.n	8003004 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fde:	4013      	ands	r3, r2
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d10d      	bne.n	8003004 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d106      	bne.n	8003004 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40007000 	.word	0x40007000
 8003018:	40023800 	.word	0x40023800
 800301c:	42470060 	.word	0x42470060

08003020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0cc      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003034:	4b68      	ldr	r3, [pc, #416]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d90c      	bls.n	800305c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b65      	ldr	r3, [pc, #404]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800304a:	4b63      	ldr	r3, [pc, #396]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0b8      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d020      	beq.n	80030aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003074:	4b59      	ldr	r3, [pc, #356]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4a58      	ldr	r2, [pc, #352]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800307e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800308c:	4b53      	ldr	r3, [pc, #332]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	4a52      	ldr	r2, [pc, #328]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003098:	4b50      	ldr	r3, [pc, #320]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	494d      	ldr	r1, [pc, #308]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d044      	beq.n	8003140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d107      	bne.n	80030ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	4b47      	ldr	r3, [pc, #284]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d119      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e07f      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d003      	beq.n	80030de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d107      	bne.n	80030ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030de:	4b3f      	ldr	r3, [pc, #252]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e06f      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ee:	4b3b      	ldr	r3, [pc, #236]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e067      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030fe:	4b37      	ldr	r3, [pc, #220]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f023 0203 	bic.w	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4934      	ldr	r1, [pc, #208]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	4313      	orrs	r3, r2
 800310e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003110:	f7fe fc9e 	bl	8001a50 <HAL_GetTick>
 8003114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	e00a      	b.n	800312e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003118:	f7fe fc9a 	bl	8001a50 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e04f      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312e:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 020c 	and.w	r2, r3, #12
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	429a      	cmp	r2, r3
 800313e:	d1eb      	bne.n	8003118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003140:	4b25      	ldr	r3, [pc, #148]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d20c      	bcs.n	8003168 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b20      	ldr	r3, [pc, #128]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e032      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003174:	4b19      	ldr	r3, [pc, #100]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4916      	ldr	r1, [pc, #88]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d009      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003192:	4b12      	ldr	r3, [pc, #72]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	490e      	ldr	r1, [pc, #56]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031a6:	f000 f821 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 80031aa:	4601      	mov	r1, r0
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 80031b8:	5cd3      	ldrb	r3, [r2, r3]
 80031ba:	fa21 f303 	lsr.w	r3, r1, r3
 80031be:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe fbfe 	bl	80019c8 <HAL_InitTick>

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40023c00 	.word	0x40023c00
 80031dc:	40023800 	.word	0x40023800
 80031e0:	08004938 	.word	0x08004938
 80031e4:	20000000 	.word	0x20000000
 80031e8:	20000004 	.word	0x20000004

080031ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	2300      	movs	r3, #0
 80031fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003202:	4b63      	ldr	r3, [pc, #396]	; (8003390 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b04      	cmp	r3, #4
 800320c:	d007      	beq.n	800321e <HAL_RCC_GetSysClockFreq+0x32>
 800320e:	2b08      	cmp	r3, #8
 8003210:	d008      	beq.n	8003224 <HAL_RCC_GetSysClockFreq+0x38>
 8003212:	2b00      	cmp	r3, #0
 8003214:	f040 80b4 	bne.w	8003380 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003218:	4b5e      	ldr	r3, [pc, #376]	; (8003394 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800321a:	60bb      	str	r3, [r7, #8]
       break;
 800321c:	e0b3      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800321e:	4b5e      	ldr	r3, [pc, #376]	; (8003398 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003220:	60bb      	str	r3, [r7, #8]
      break;
 8003222:	e0b0      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003224:	4b5a      	ldr	r3, [pc, #360]	; (8003390 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800322c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800322e:	4b58      	ldr	r3, [pc, #352]	; (8003390 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d04a      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800323a:	4b55      	ldr	r3, [pc, #340]	; (8003390 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	099b      	lsrs	r3, r3, #6
 8003240:	f04f 0400 	mov.w	r4, #0
 8003244:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	ea03 0501 	and.w	r5, r3, r1
 8003250:	ea04 0602 	and.w	r6, r4, r2
 8003254:	4629      	mov	r1, r5
 8003256:	4632      	mov	r2, r6
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	f04f 0400 	mov.w	r4, #0
 8003260:	0154      	lsls	r4, r2, #5
 8003262:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003266:	014b      	lsls	r3, r1, #5
 8003268:	4619      	mov	r1, r3
 800326a:	4622      	mov	r2, r4
 800326c:	1b49      	subs	r1, r1, r5
 800326e:	eb62 0206 	sbc.w	r2, r2, r6
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	f04f 0400 	mov.w	r4, #0
 800327a:	0194      	lsls	r4, r2, #6
 800327c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003280:	018b      	lsls	r3, r1, #6
 8003282:	1a5b      	subs	r3, r3, r1
 8003284:	eb64 0402 	sbc.w	r4, r4, r2
 8003288:	f04f 0100 	mov.w	r1, #0
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	00e2      	lsls	r2, r4, #3
 8003292:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003296:	00d9      	lsls	r1, r3, #3
 8003298:	460b      	mov	r3, r1
 800329a:	4614      	mov	r4, r2
 800329c:	195b      	adds	r3, r3, r5
 800329e:	eb44 0406 	adc.w	r4, r4, r6
 80032a2:	f04f 0100 	mov.w	r1, #0
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	0262      	lsls	r2, r4, #9
 80032ac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80032b0:	0259      	lsls	r1, r3, #9
 80032b2:	460b      	mov	r3, r1
 80032b4:	4614      	mov	r4, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	4621      	mov	r1, r4
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f04f 0400 	mov.w	r4, #0
 80032c0:	461a      	mov	r2, r3
 80032c2:	4623      	mov	r3, r4
 80032c4:	f7fc ff80 	bl	80001c8 <__aeabi_uldivmod>
 80032c8:	4603      	mov	r3, r0
 80032ca:	460c      	mov	r4, r1
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	e049      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d0:	4b2f      	ldr	r3, [pc, #188]	; (8003390 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	099b      	lsrs	r3, r3, #6
 80032d6:	f04f 0400 	mov.w	r4, #0
 80032da:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	ea03 0501 	and.w	r5, r3, r1
 80032e6:	ea04 0602 	and.w	r6, r4, r2
 80032ea:	4629      	mov	r1, r5
 80032ec:	4632      	mov	r2, r6
 80032ee:	f04f 0300 	mov.w	r3, #0
 80032f2:	f04f 0400 	mov.w	r4, #0
 80032f6:	0154      	lsls	r4, r2, #5
 80032f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032fc:	014b      	lsls	r3, r1, #5
 80032fe:	4619      	mov	r1, r3
 8003300:	4622      	mov	r2, r4
 8003302:	1b49      	subs	r1, r1, r5
 8003304:	eb62 0206 	sbc.w	r2, r2, r6
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	f04f 0400 	mov.w	r4, #0
 8003310:	0194      	lsls	r4, r2, #6
 8003312:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003316:	018b      	lsls	r3, r1, #6
 8003318:	1a5b      	subs	r3, r3, r1
 800331a:	eb64 0402 	sbc.w	r4, r4, r2
 800331e:	f04f 0100 	mov.w	r1, #0
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	00e2      	lsls	r2, r4, #3
 8003328:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800332c:	00d9      	lsls	r1, r3, #3
 800332e:	460b      	mov	r3, r1
 8003330:	4614      	mov	r4, r2
 8003332:	195b      	adds	r3, r3, r5
 8003334:	eb44 0406 	adc.w	r4, r4, r6
 8003338:	f04f 0100 	mov.w	r1, #0
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	02a2      	lsls	r2, r4, #10
 8003342:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003346:	0299      	lsls	r1, r3, #10
 8003348:	460b      	mov	r3, r1
 800334a:	4614      	mov	r4, r2
 800334c:	4618      	mov	r0, r3
 800334e:	4621      	mov	r1, r4
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f04f 0400 	mov.w	r4, #0
 8003356:	461a      	mov	r2, r3
 8003358:	4623      	mov	r3, r4
 800335a:	f7fc ff35 	bl	80001c8 <__aeabi_uldivmod>
 800335e:	4603      	mov	r3, r0
 8003360:	460c      	mov	r4, r1
 8003362:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003364:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	0c1b      	lsrs	r3, r3, #16
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	3301      	adds	r3, #1
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	60bb      	str	r3, [r7, #8]
      break;
 800337e:	e002      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003380:	4b04      	ldr	r3, [pc, #16]	; (8003394 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003382:	60bb      	str	r3, [r7, #8]
      break;
 8003384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003386:	68bb      	ldr	r3, [r7, #8]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003390:	40023800 	.word	0x40023800
 8003394:	00f42400 	.word	0x00f42400
 8003398:	007a1200 	.word	0x007a1200

0800339c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a0:	4b03      	ldr	r3, [pc, #12]	; (80033b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033a2:	681b      	ldr	r3, [r3, #0]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	20000000 	.word	0x20000000

080033b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033b8:	f7ff fff0 	bl	800339c <HAL_RCC_GetHCLKFreq>
 80033bc:	4601      	mov	r1, r0
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	0a9b      	lsrs	r3, r3, #10
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	4a03      	ldr	r2, [pc, #12]	; (80033d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ca:	5cd3      	ldrb	r3, [r2, r3]
 80033cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40023800 	.word	0x40023800
 80033d8:	08004948 	.word	0x08004948

080033dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033e0:	f7ff ffdc 	bl	800339c <HAL_RCC_GetHCLKFreq>
 80033e4:	4601      	mov	r1, r0
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	0b5b      	lsrs	r3, r3, #13
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	4a03      	ldr	r2, [pc, #12]	; (8003400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033f2:	5cd3      	ldrb	r3, [r2, r3]
 80033f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40023800 	.word	0x40023800
 8003400:	08004948 	.word	0x08004948

08003404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e01d      	b.n	8003452 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fe f8e8 	bl	8001600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3304      	adds	r3, #4
 8003440:	4619      	mov	r1, r3
 8003442:	4610      	mov	r0, r2
 8003444:	f000 f9fa 	bl	800383c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e01d      	b.n	80034a8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d106      	bne.n	8003486 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f815 	bl	80034b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2202      	movs	r2, #2
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3304      	adds	r3, #4
 8003496:	4619      	mov	r1, r3
 8003498:	4610      	mov	r0, r2
 800349a:	f000 f9cf 	bl	800383c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2201      	movs	r2, #1
 80034d4:	6839      	ldr	r1, [r7, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fc9a 	bl	8003e10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a15      	ldr	r2, [pc, #84]	; (8003538 <HAL_TIM_PWM_Start+0x74>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <HAL_TIM_PWM_Start+0x2c>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a14      	ldr	r2, [pc, #80]	; (800353c <HAL_TIM_PWM_Start+0x78>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d101      	bne.n	80034f4 <HAL_TIM_PWM_Start+0x30>
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <HAL_TIM_PWM_Start+0x32>
 80034f4:	2300      	movs	r3, #0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d007      	beq.n	800350a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003508:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b06      	cmp	r3, #6
 800351a:	d007      	beq.n	800352c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40010000 	.word	0x40010000
 800353c:	40010400 	.word	0x40010400

08003540 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003556:	2302      	movs	r3, #2
 8003558:	e0b4      	b.n	80036c4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2202      	movs	r2, #2
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b0c      	cmp	r3, #12
 800356e:	f200 809f 	bhi.w	80036b0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003572:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	080035ad 	.word	0x080035ad
 800357c:	080036b1 	.word	0x080036b1
 8003580:	080036b1 	.word	0x080036b1
 8003584:	080036b1 	.word	0x080036b1
 8003588:	080035ed 	.word	0x080035ed
 800358c:	080036b1 	.word	0x080036b1
 8003590:	080036b1 	.word	0x080036b1
 8003594:	080036b1 	.word	0x080036b1
 8003598:	0800362f 	.word	0x0800362f
 800359c:	080036b1 	.word	0x080036b1
 80035a0:	080036b1 	.word	0x080036b1
 80035a4:	080036b1 	.word	0x080036b1
 80035a8:	0800366f 	.word	0x0800366f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f9e2 	bl	800397c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0208 	orr.w	r2, r2, #8
 80035c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0204 	bic.w	r2, r2, #4
 80035d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6999      	ldr	r1, [r3, #24]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	619a      	str	r2, [r3, #24]
      break;
 80035ea:	e062      	b.n	80036b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fa32 	bl	8003a5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6999      	ldr	r1, [r3, #24]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	021a      	lsls	r2, r3, #8
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	619a      	str	r2, [r3, #24]
      break;
 800362c:	e041      	b.n	80036b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fa87 	bl	8003b48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0208 	orr.w	r2, r2, #8
 8003648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0204 	bic.w	r2, r2, #4
 8003658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69d9      	ldr	r1, [r3, #28]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	61da      	str	r2, [r3, #28]
      break;
 800366c:	e021      	b.n	80036b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fadb 	bl	8003c30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	69da      	ldr	r2, [r3, #28]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69da      	ldr	r2, [r3, #28]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69d9      	ldr	r1, [r3, #28]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	021a      	lsls	r2, r3, #8
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	61da      	str	r2, [r3, #28]
      break;
 80036ae:	e000      	b.n	80036b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80036b0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_TIM_ConfigClockSource+0x18>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e0a6      	b.n	8003832 <HAL_TIM_ConfigClockSource+0x166>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003702:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800370a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b40      	cmp	r3, #64	; 0x40
 800371a:	d067      	beq.n	80037ec <HAL_TIM_ConfigClockSource+0x120>
 800371c:	2b40      	cmp	r3, #64	; 0x40
 800371e:	d80b      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x6c>
 8003720:	2b10      	cmp	r3, #16
 8003722:	d073      	beq.n	800380c <HAL_TIM_ConfigClockSource+0x140>
 8003724:	2b10      	cmp	r3, #16
 8003726:	d802      	bhi.n	800372e <HAL_TIM_ConfigClockSource+0x62>
 8003728:	2b00      	cmp	r3, #0
 800372a:	d06f      	beq.n	800380c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800372c:	e078      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800372e:	2b20      	cmp	r3, #32
 8003730:	d06c      	beq.n	800380c <HAL_TIM_ConfigClockSource+0x140>
 8003732:	2b30      	cmp	r3, #48	; 0x30
 8003734:	d06a      	beq.n	800380c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003736:	e073      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003738:	2b70      	cmp	r3, #112	; 0x70
 800373a:	d00d      	beq.n	8003758 <HAL_TIM_ConfigClockSource+0x8c>
 800373c:	2b70      	cmp	r3, #112	; 0x70
 800373e:	d804      	bhi.n	800374a <HAL_TIM_ConfigClockSource+0x7e>
 8003740:	2b50      	cmp	r3, #80	; 0x50
 8003742:	d033      	beq.n	80037ac <HAL_TIM_ConfigClockSource+0xe0>
 8003744:	2b60      	cmp	r3, #96	; 0x60
 8003746:	d041      	beq.n	80037cc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003748:	e06a      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800374a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374e:	d066      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x152>
 8003750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003754:	d017      	beq.n	8003786 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003756:	e063      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	6899      	ldr	r1, [r3, #8]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f000 fb32 	bl	8003dd0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800377a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	609a      	str	r2, [r3, #8]
      break;
 8003784:	e04c      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	6899      	ldr	r1, [r3, #8]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f000 fb1b 	bl	8003dd0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037a8:	609a      	str	r2, [r3, #8]
      break;
 80037aa:	e039      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	461a      	mov	r2, r3
 80037ba:	f000 fa8f 	bl	8003cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2150      	movs	r1, #80	; 0x50
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fae8 	bl	8003d9a <TIM_ITRx_SetConfig>
      break;
 80037ca:	e029      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	6859      	ldr	r1, [r3, #4]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	461a      	mov	r2, r3
 80037da:	f000 faae 	bl	8003d3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2160      	movs	r1, #96	; 0x60
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fad8 	bl	8003d9a <TIM_ITRx_SetConfig>
      break;
 80037ea:	e019      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	6859      	ldr	r1, [r3, #4]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	461a      	mov	r2, r3
 80037fa:	f000 fa6f 	bl	8003cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2140      	movs	r1, #64	; 0x40
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fac8 	bl	8003d9a <TIM_ITRx_SetConfig>
      break;
 800380a:	e009      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4619      	mov	r1, r3
 8003816:	4610      	mov	r0, r2
 8003818:	f000 fabf 	bl	8003d9a <TIM_ITRx_SetConfig>
      break;
 800381c:	e000      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800381e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a40      	ldr	r2, [pc, #256]	; (8003950 <TIM_Base_SetConfig+0x114>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d013      	beq.n	800387c <TIM_Base_SetConfig+0x40>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385a:	d00f      	beq.n	800387c <TIM_Base_SetConfig+0x40>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a3d      	ldr	r2, [pc, #244]	; (8003954 <TIM_Base_SetConfig+0x118>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00b      	beq.n	800387c <TIM_Base_SetConfig+0x40>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a3c      	ldr	r2, [pc, #240]	; (8003958 <TIM_Base_SetConfig+0x11c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d007      	beq.n	800387c <TIM_Base_SetConfig+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a3b      	ldr	r2, [pc, #236]	; (800395c <TIM_Base_SetConfig+0x120>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d003      	beq.n	800387c <TIM_Base_SetConfig+0x40>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a3a      	ldr	r2, [pc, #232]	; (8003960 <TIM_Base_SetConfig+0x124>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d108      	bne.n	800388e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a2f      	ldr	r2, [pc, #188]	; (8003950 <TIM_Base_SetConfig+0x114>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d02b      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389c:	d027      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a2c      	ldr	r2, [pc, #176]	; (8003954 <TIM_Base_SetConfig+0x118>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d023      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a2b      	ldr	r2, [pc, #172]	; (8003958 <TIM_Base_SetConfig+0x11c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d01f      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a2a      	ldr	r2, [pc, #168]	; (800395c <TIM_Base_SetConfig+0x120>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01b      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a29      	ldr	r2, [pc, #164]	; (8003960 <TIM_Base_SetConfig+0x124>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d017      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a28      	ldr	r2, [pc, #160]	; (8003964 <TIM_Base_SetConfig+0x128>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a27      	ldr	r2, [pc, #156]	; (8003968 <TIM_Base_SetConfig+0x12c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00f      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a26      	ldr	r2, [pc, #152]	; (800396c <TIM_Base_SetConfig+0x130>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00b      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a25      	ldr	r2, [pc, #148]	; (8003970 <TIM_Base_SetConfig+0x134>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d007      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a24      	ldr	r2, [pc, #144]	; (8003974 <TIM_Base_SetConfig+0x138>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d003      	beq.n	80038ee <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a23      	ldr	r2, [pc, #140]	; (8003978 <TIM_Base_SetConfig+0x13c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d108      	bne.n	8003900 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a0a      	ldr	r2, [pc, #40]	; (8003950 <TIM_Base_SetConfig+0x114>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d003      	beq.n	8003934 <TIM_Base_SetConfig+0xf8>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a0c      	ldr	r2, [pc, #48]	; (8003960 <TIM_Base_SetConfig+0x124>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d103      	bne.n	800393c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	615a      	str	r2, [r3, #20]
}
 8003942:	bf00      	nop
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40010000 	.word	0x40010000
 8003954:	40000400 	.word	0x40000400
 8003958:	40000800 	.word	0x40000800
 800395c:	40000c00 	.word	0x40000c00
 8003960:	40010400 	.word	0x40010400
 8003964:	40014000 	.word	0x40014000
 8003968:	40014400 	.word	0x40014400
 800396c:	40014800 	.word	0x40014800
 8003970:	40001800 	.word	0x40001800
 8003974:	40001c00 	.word	0x40001c00
 8003978:	40002000 	.word	0x40002000

0800397c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	f023 0201 	bic.w	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0303 	bic.w	r3, r3, #3
 80039b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f023 0302 	bic.w	r3, r3, #2
 80039c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a20      	ldr	r2, [pc, #128]	; (8003a54 <TIM_OC1_SetConfig+0xd8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d003      	beq.n	80039e0 <TIM_OC1_SetConfig+0x64>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a1f      	ldr	r2, [pc, #124]	; (8003a58 <TIM_OC1_SetConfig+0xdc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d10c      	bne.n	80039fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f023 0308 	bic.w	r3, r3, #8
 80039e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f023 0304 	bic.w	r3, r3, #4
 80039f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a15      	ldr	r2, [pc, #84]	; (8003a54 <TIM_OC1_SetConfig+0xd8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d003      	beq.n	8003a0a <TIM_OC1_SetConfig+0x8e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <TIM_OC1_SetConfig+0xdc>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d111      	bne.n	8003a2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	621a      	str	r2, [r3, #32]
}
 8003a48:	bf00      	nop
 8003a4a:	371c      	adds	r7, #28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	40010000 	.word	0x40010000
 8003a58:	40010400 	.word	0x40010400

08003a5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	f023 0210 	bic.w	r2, r3, #16
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	021b      	lsls	r3, r3, #8
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f023 0320 	bic.w	r3, r3, #32
 8003aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a22      	ldr	r2, [pc, #136]	; (8003b40 <TIM_OC2_SetConfig+0xe4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d003      	beq.n	8003ac4 <TIM_OC2_SetConfig+0x68>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a21      	ldr	r2, [pc, #132]	; (8003b44 <TIM_OC2_SetConfig+0xe8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d10d      	bne.n	8003ae0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ade:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a17      	ldr	r2, [pc, #92]	; (8003b40 <TIM_OC2_SetConfig+0xe4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <TIM_OC2_SetConfig+0x94>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a16      	ldr	r2, [pc, #88]	; (8003b44 <TIM_OC2_SetConfig+0xe8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d113      	bne.n	8003b18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003af6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003afe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	621a      	str	r2, [r3, #32]
}
 8003b32:	bf00      	nop
 8003b34:	371c      	adds	r7, #28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40010000 	.word	0x40010000
 8003b44:	40010400 	.word	0x40010400

08003b48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0303 	bic.w	r3, r3, #3
 8003b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	021b      	lsls	r3, r3, #8
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a21      	ldr	r2, [pc, #132]	; (8003c28 <TIM_OC3_SetConfig+0xe0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d003      	beq.n	8003bae <TIM_OC3_SetConfig+0x66>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a20      	ldr	r2, [pc, #128]	; (8003c2c <TIM_OC3_SetConfig+0xe4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d10d      	bne.n	8003bca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	021b      	lsls	r3, r3, #8
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a16      	ldr	r2, [pc, #88]	; (8003c28 <TIM_OC3_SetConfig+0xe0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d003      	beq.n	8003bda <TIM_OC3_SetConfig+0x92>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <TIM_OC3_SetConfig+0xe4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d113      	bne.n	8003c02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	621a      	str	r2, [r3, #32]
}
 8003c1c:	bf00      	nop
 8003c1e:	371c      	adds	r7, #28
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	40010000 	.word	0x40010000
 8003c2c:	40010400 	.word	0x40010400

08003c30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	021b      	lsls	r3, r3, #8
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	031b      	lsls	r3, r3, #12
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a12      	ldr	r2, [pc, #72]	; (8003cd4 <TIM_OC4_SetConfig+0xa4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <TIM_OC4_SetConfig+0x68>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a11      	ldr	r2, [pc, #68]	; (8003cd8 <TIM_OC4_SetConfig+0xa8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d109      	bne.n	8003cac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	019b      	lsls	r3, r3, #6
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	621a      	str	r2, [r3, #32]
}
 8003cc6:	bf00      	nop
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40010000 	.word	0x40010000
 8003cd8:	40010400 	.word	0x40010400

08003cdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	f023 0201 	bic.w	r2, r3, #1
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f023 030a 	bic.w	r3, r3, #10
 8003d18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b087      	sub	sp, #28
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	f023 0210 	bic.w	r2, r3, #16
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	031b      	lsls	r3, r3, #12
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	621a      	str	r2, [r3, #32]
}
 8003d8e:	bf00      	nop
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b085      	sub	sp, #20
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f043 0307 	orr.w	r3, r3, #7
 8003dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	609a      	str	r2, [r3, #8]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	021a      	lsls	r2, r3, #8
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	609a      	str	r2, [r3, #8]
}
 8003e04:	bf00      	nop
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f003 031f 	and.w	r3, r3, #31
 8003e22:	2201      	movs	r2, #1
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a1a      	ldr	r2, [r3, #32]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	43db      	mvns	r3, r3
 8003e32:	401a      	ands	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a1a      	ldr	r2, [r3, #32]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f003 031f 	and.w	r3, r3, #31
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	fa01 f303 	lsl.w	r3, r1, r3
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	621a      	str	r2, [r3, #32]
}
 8003e4e:	bf00      	nop
 8003e50:	371c      	adds	r7, #28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
	...

08003e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e05a      	b.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a21      	ldr	r2, [pc, #132]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d022      	beq.n	8003efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec0:	d01d      	beq.n	8003efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1d      	ldr	r2, [pc, #116]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d018      	beq.n	8003efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1b      	ldr	r2, [pc, #108]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d013      	beq.n	8003efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1a      	ldr	r2, [pc, #104]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00e      	beq.n	8003efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a18      	ldr	r2, [pc, #96]	; (8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d009      	beq.n	8003efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a17      	ldr	r2, [pc, #92]	; (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d004      	beq.n	8003efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a15      	ldr	r2, [pc, #84]	; (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d10c      	bne.n	8003f18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	40000400 	.word	0x40000400
 8003f40:	40000800 	.word	0x40000800
 8003f44:	40000c00 	.word	0x40000c00
 8003f48:	40010400 	.word	0x40010400
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40001800 	.word	0x40001800

08003f54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e03f      	b.n	8003fe6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fd fbda 	bl	8001734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2224      	movs	r2, #36	; 0x24
 8003f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f919 	bl	80041d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b088      	sub	sp, #32
 8003ff2:	af02      	add	r7, sp, #8
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	603b      	str	r3, [r7, #0]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b20      	cmp	r3, #32
 800400c:	f040 8090 	bne.w	8004130 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_UART_Receive+0x2e>
 8004016:	88fb      	ldrh	r3, [r7, #6]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e088      	b.n	8004132 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_UART_Receive+0x40>
 800402a:	2302      	movs	r3, #2
 800402c:	e081      	b.n	8004132 <HAL_UART_Receive+0x144>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2222      	movs	r2, #34	; 0x22
 8004040:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004044:	f7fd fd04 	bl	8001a50 <HAL_GetTick>
 8004048:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	88fa      	ldrh	r2, [r7, #6]
 800404e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	88fa      	ldrh	r2, [r7, #6]
 8004054:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800405e:	e05c      	b.n	800411a <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004076:	d12b      	bne.n	80040d0 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2200      	movs	r2, #0
 8004080:	2120      	movs	r1, #32
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 f859 	bl	800413a <UART_WaitOnFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e04f      	b.n	8004132 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10c      	bne.n	80040b8 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	3302      	adds	r3, #2
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	e030      	b.n	800411a <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	3301      	adds	r3, #1
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	e024      	b.n	800411a <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2200      	movs	r2, #0
 80040d8:	2120      	movs	r1, #32
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f82d 	bl	800413a <UART_WaitOnFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e023      	b.n	8004132 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d108      	bne.n	8004104 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6859      	ldr	r1, [r3, #4]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	60ba      	str	r2, [r7, #8]
 80040fe:	b2ca      	uxtb	r2, r1
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	e00a      	b.n	800411a <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	b2da      	uxtb	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	1c59      	adds	r1, r3, #1
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d19d      	bne.n	8004060 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800412c:	2300      	movs	r3, #0
 800412e:	e000      	b.n	8004132 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004130:	2302      	movs	r3, #2
  }
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b084      	sub	sp, #16
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	603b      	str	r3, [r7, #0]
 8004146:	4613      	mov	r3, r2
 8004148:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800414a:	e02c      	b.n	80041a6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004152:	d028      	beq.n	80041a6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d007      	beq.n	800416a <UART_WaitOnFlagUntilTimeout+0x30>
 800415a:	f7fd fc79 	bl	8001a50 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	429a      	cmp	r2, r3
 8004168:	d21d      	bcs.n	80041a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004178:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e00f      	b.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4013      	ands	r3, r2
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	bf0c      	ite	eq
 80041b6:	2301      	moveq	r3, #1
 80041b8:	2300      	movne	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d0c3      	beq.n	800414c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	4313      	orrs	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004212:	f023 030c 	bic.w	r3, r3, #12
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6812      	ldr	r2, [r2, #0]
 800421a:	68f9      	ldr	r1, [r7, #12]
 800421c:	430b      	orrs	r3, r1
 800421e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800423e:	f040 818b 	bne.w	8004558 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4ac1      	ldr	r2, [pc, #772]	; (800454c <UART_SetConfig+0x37c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d005      	beq.n	8004258 <UART_SetConfig+0x88>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4abf      	ldr	r2, [pc, #764]	; (8004550 <UART_SetConfig+0x380>)
 8004252:	4293      	cmp	r3, r2
 8004254:	f040 80bd 	bne.w	80043d2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004258:	f7ff f8c0 	bl	80033dc <HAL_RCC_GetPCLK2Freq>
 800425c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	461d      	mov	r5, r3
 8004262:	f04f 0600 	mov.w	r6, #0
 8004266:	46a8      	mov	r8, r5
 8004268:	46b1      	mov	r9, r6
 800426a:	eb18 0308 	adds.w	r3, r8, r8
 800426e:	eb49 0409 	adc.w	r4, r9, r9
 8004272:	4698      	mov	r8, r3
 8004274:	46a1      	mov	r9, r4
 8004276:	eb18 0805 	adds.w	r8, r8, r5
 800427a:	eb49 0906 	adc.w	r9, r9, r6
 800427e:	f04f 0100 	mov.w	r1, #0
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800428a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800428e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004292:	4688      	mov	r8, r1
 8004294:	4691      	mov	r9, r2
 8004296:	eb18 0005 	adds.w	r0, r8, r5
 800429a:	eb49 0106 	adc.w	r1, r9, r6
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	461d      	mov	r5, r3
 80042a4:	f04f 0600 	mov.w	r6, #0
 80042a8:	196b      	adds	r3, r5, r5
 80042aa:	eb46 0406 	adc.w	r4, r6, r6
 80042ae:	461a      	mov	r2, r3
 80042b0:	4623      	mov	r3, r4
 80042b2:	f7fb ff89 	bl	80001c8 <__aeabi_uldivmod>
 80042b6:	4603      	mov	r3, r0
 80042b8:	460c      	mov	r4, r1
 80042ba:	461a      	mov	r2, r3
 80042bc:	4ba5      	ldr	r3, [pc, #660]	; (8004554 <UART_SetConfig+0x384>)
 80042be:	fba3 2302 	umull	r2, r3, r3, r2
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	461d      	mov	r5, r3
 80042cc:	f04f 0600 	mov.w	r6, #0
 80042d0:	46a9      	mov	r9, r5
 80042d2:	46b2      	mov	sl, r6
 80042d4:	eb19 0309 	adds.w	r3, r9, r9
 80042d8:	eb4a 040a 	adc.w	r4, sl, sl
 80042dc:	4699      	mov	r9, r3
 80042de:	46a2      	mov	sl, r4
 80042e0:	eb19 0905 	adds.w	r9, r9, r5
 80042e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80042e8:	f04f 0100 	mov.w	r1, #0
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042fc:	4689      	mov	r9, r1
 80042fe:	4692      	mov	sl, r2
 8004300:	eb19 0005 	adds.w	r0, r9, r5
 8004304:	eb4a 0106 	adc.w	r1, sl, r6
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	461d      	mov	r5, r3
 800430e:	f04f 0600 	mov.w	r6, #0
 8004312:	196b      	adds	r3, r5, r5
 8004314:	eb46 0406 	adc.w	r4, r6, r6
 8004318:	461a      	mov	r2, r3
 800431a:	4623      	mov	r3, r4
 800431c:	f7fb ff54 	bl	80001c8 <__aeabi_uldivmod>
 8004320:	4603      	mov	r3, r0
 8004322:	460c      	mov	r4, r1
 8004324:	461a      	mov	r2, r3
 8004326:	4b8b      	ldr	r3, [pc, #556]	; (8004554 <UART_SetConfig+0x384>)
 8004328:	fba3 1302 	umull	r1, r3, r3, r2
 800432c:	095b      	lsrs	r3, r3, #5
 800432e:	2164      	movs	r1, #100	; 0x64
 8004330:	fb01 f303 	mul.w	r3, r1, r3
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	3332      	adds	r3, #50	; 0x32
 800433a:	4a86      	ldr	r2, [pc, #536]	; (8004554 <UART_SetConfig+0x384>)
 800433c:	fba2 2303 	umull	r2, r3, r2, r3
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004348:	4498      	add	r8, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	461d      	mov	r5, r3
 800434e:	f04f 0600 	mov.w	r6, #0
 8004352:	46a9      	mov	r9, r5
 8004354:	46b2      	mov	sl, r6
 8004356:	eb19 0309 	adds.w	r3, r9, r9
 800435a:	eb4a 040a 	adc.w	r4, sl, sl
 800435e:	4699      	mov	r9, r3
 8004360:	46a2      	mov	sl, r4
 8004362:	eb19 0905 	adds.w	r9, r9, r5
 8004366:	eb4a 0a06 	adc.w	sl, sl, r6
 800436a:	f04f 0100 	mov.w	r1, #0
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004376:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800437a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800437e:	4689      	mov	r9, r1
 8004380:	4692      	mov	sl, r2
 8004382:	eb19 0005 	adds.w	r0, r9, r5
 8004386:	eb4a 0106 	adc.w	r1, sl, r6
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	461d      	mov	r5, r3
 8004390:	f04f 0600 	mov.w	r6, #0
 8004394:	196b      	adds	r3, r5, r5
 8004396:	eb46 0406 	adc.w	r4, r6, r6
 800439a:	461a      	mov	r2, r3
 800439c:	4623      	mov	r3, r4
 800439e:	f7fb ff13 	bl	80001c8 <__aeabi_uldivmod>
 80043a2:	4603      	mov	r3, r0
 80043a4:	460c      	mov	r4, r1
 80043a6:	461a      	mov	r2, r3
 80043a8:	4b6a      	ldr	r3, [pc, #424]	; (8004554 <UART_SetConfig+0x384>)
 80043aa:	fba3 1302 	umull	r1, r3, r3, r2
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	2164      	movs	r1, #100	; 0x64
 80043b2:	fb01 f303 	mul.w	r3, r1, r3
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	3332      	adds	r3, #50	; 0x32
 80043bc:	4a65      	ldr	r2, [pc, #404]	; (8004554 <UART_SetConfig+0x384>)
 80043be:	fba2 2303 	umull	r2, r3, r2, r3
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	f003 0207 	and.w	r2, r3, #7
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4442      	add	r2, r8
 80043ce:	609a      	str	r2, [r3, #8]
 80043d0:	e26f      	b.n	80048b2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043d2:	f7fe ffef 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 80043d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	461d      	mov	r5, r3
 80043dc:	f04f 0600 	mov.w	r6, #0
 80043e0:	46a8      	mov	r8, r5
 80043e2:	46b1      	mov	r9, r6
 80043e4:	eb18 0308 	adds.w	r3, r8, r8
 80043e8:	eb49 0409 	adc.w	r4, r9, r9
 80043ec:	4698      	mov	r8, r3
 80043ee:	46a1      	mov	r9, r4
 80043f0:	eb18 0805 	adds.w	r8, r8, r5
 80043f4:	eb49 0906 	adc.w	r9, r9, r6
 80043f8:	f04f 0100 	mov.w	r1, #0
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004404:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004408:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800440c:	4688      	mov	r8, r1
 800440e:	4691      	mov	r9, r2
 8004410:	eb18 0005 	adds.w	r0, r8, r5
 8004414:	eb49 0106 	adc.w	r1, r9, r6
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	461d      	mov	r5, r3
 800441e:	f04f 0600 	mov.w	r6, #0
 8004422:	196b      	adds	r3, r5, r5
 8004424:	eb46 0406 	adc.w	r4, r6, r6
 8004428:	461a      	mov	r2, r3
 800442a:	4623      	mov	r3, r4
 800442c:	f7fb fecc 	bl	80001c8 <__aeabi_uldivmod>
 8004430:	4603      	mov	r3, r0
 8004432:	460c      	mov	r4, r1
 8004434:	461a      	mov	r2, r3
 8004436:	4b47      	ldr	r3, [pc, #284]	; (8004554 <UART_SetConfig+0x384>)
 8004438:	fba3 2302 	umull	r2, r3, r3, r2
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	461d      	mov	r5, r3
 8004446:	f04f 0600 	mov.w	r6, #0
 800444a:	46a9      	mov	r9, r5
 800444c:	46b2      	mov	sl, r6
 800444e:	eb19 0309 	adds.w	r3, r9, r9
 8004452:	eb4a 040a 	adc.w	r4, sl, sl
 8004456:	4699      	mov	r9, r3
 8004458:	46a2      	mov	sl, r4
 800445a:	eb19 0905 	adds.w	r9, r9, r5
 800445e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004462:	f04f 0100 	mov.w	r1, #0
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800446e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004472:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004476:	4689      	mov	r9, r1
 8004478:	4692      	mov	sl, r2
 800447a:	eb19 0005 	adds.w	r0, r9, r5
 800447e:	eb4a 0106 	adc.w	r1, sl, r6
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	461d      	mov	r5, r3
 8004488:	f04f 0600 	mov.w	r6, #0
 800448c:	196b      	adds	r3, r5, r5
 800448e:	eb46 0406 	adc.w	r4, r6, r6
 8004492:	461a      	mov	r2, r3
 8004494:	4623      	mov	r3, r4
 8004496:	f7fb fe97 	bl	80001c8 <__aeabi_uldivmod>
 800449a:	4603      	mov	r3, r0
 800449c:	460c      	mov	r4, r1
 800449e:	461a      	mov	r2, r3
 80044a0:	4b2c      	ldr	r3, [pc, #176]	; (8004554 <UART_SetConfig+0x384>)
 80044a2:	fba3 1302 	umull	r1, r3, r3, r2
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	2164      	movs	r1, #100	; 0x64
 80044aa:	fb01 f303 	mul.w	r3, r1, r3
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	3332      	adds	r3, #50	; 0x32
 80044b4:	4a27      	ldr	r2, [pc, #156]	; (8004554 <UART_SetConfig+0x384>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044c2:	4498      	add	r8, r3
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	461d      	mov	r5, r3
 80044c8:	f04f 0600 	mov.w	r6, #0
 80044cc:	46a9      	mov	r9, r5
 80044ce:	46b2      	mov	sl, r6
 80044d0:	eb19 0309 	adds.w	r3, r9, r9
 80044d4:	eb4a 040a 	adc.w	r4, sl, sl
 80044d8:	4699      	mov	r9, r3
 80044da:	46a2      	mov	sl, r4
 80044dc:	eb19 0905 	adds.w	r9, r9, r5
 80044e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80044e4:	f04f 0100 	mov.w	r1, #0
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044f8:	4689      	mov	r9, r1
 80044fa:	4692      	mov	sl, r2
 80044fc:	eb19 0005 	adds.w	r0, r9, r5
 8004500:	eb4a 0106 	adc.w	r1, sl, r6
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	461d      	mov	r5, r3
 800450a:	f04f 0600 	mov.w	r6, #0
 800450e:	196b      	adds	r3, r5, r5
 8004510:	eb46 0406 	adc.w	r4, r6, r6
 8004514:	461a      	mov	r2, r3
 8004516:	4623      	mov	r3, r4
 8004518:	f7fb fe56 	bl	80001c8 <__aeabi_uldivmod>
 800451c:	4603      	mov	r3, r0
 800451e:	460c      	mov	r4, r1
 8004520:	461a      	mov	r2, r3
 8004522:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <UART_SetConfig+0x384>)
 8004524:	fba3 1302 	umull	r1, r3, r3, r2
 8004528:	095b      	lsrs	r3, r3, #5
 800452a:	2164      	movs	r1, #100	; 0x64
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	3332      	adds	r3, #50	; 0x32
 8004536:	4a07      	ldr	r2, [pc, #28]	; (8004554 <UART_SetConfig+0x384>)
 8004538:	fba2 2303 	umull	r2, r3, r2, r3
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	f003 0207 	and.w	r2, r3, #7
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4442      	add	r2, r8
 8004548:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800454a:	e1b2      	b.n	80048b2 <UART_SetConfig+0x6e2>
 800454c:	40011000 	.word	0x40011000
 8004550:	40011400 	.word	0x40011400
 8004554:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4ad7      	ldr	r2, [pc, #860]	; (80048bc <UART_SetConfig+0x6ec>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d005      	beq.n	800456e <UART_SetConfig+0x39e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4ad6      	ldr	r2, [pc, #856]	; (80048c0 <UART_SetConfig+0x6f0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	f040 80d1 	bne.w	8004710 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800456e:	f7fe ff35 	bl	80033dc <HAL_RCC_GetPCLK2Freq>
 8004572:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	469a      	mov	sl, r3
 8004578:	f04f 0b00 	mov.w	fp, #0
 800457c:	46d0      	mov	r8, sl
 800457e:	46d9      	mov	r9, fp
 8004580:	eb18 0308 	adds.w	r3, r8, r8
 8004584:	eb49 0409 	adc.w	r4, r9, r9
 8004588:	4698      	mov	r8, r3
 800458a:	46a1      	mov	r9, r4
 800458c:	eb18 080a 	adds.w	r8, r8, sl
 8004590:	eb49 090b 	adc.w	r9, r9, fp
 8004594:	f04f 0100 	mov.w	r1, #0
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80045a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80045a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80045a8:	4688      	mov	r8, r1
 80045aa:	4691      	mov	r9, r2
 80045ac:	eb1a 0508 	adds.w	r5, sl, r8
 80045b0:	eb4b 0609 	adc.w	r6, fp, r9
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	4619      	mov	r1, r3
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	f04f 0300 	mov.w	r3, #0
 80045c2:	f04f 0400 	mov.w	r4, #0
 80045c6:	0094      	lsls	r4, r2, #2
 80045c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045cc:	008b      	lsls	r3, r1, #2
 80045ce:	461a      	mov	r2, r3
 80045d0:	4623      	mov	r3, r4
 80045d2:	4628      	mov	r0, r5
 80045d4:	4631      	mov	r1, r6
 80045d6:	f7fb fdf7 	bl	80001c8 <__aeabi_uldivmod>
 80045da:	4603      	mov	r3, r0
 80045dc:	460c      	mov	r4, r1
 80045de:	461a      	mov	r2, r3
 80045e0:	4bb8      	ldr	r3, [pc, #736]	; (80048c4 <UART_SetConfig+0x6f4>)
 80045e2:	fba3 2302 	umull	r2, r3, r3, r2
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	469b      	mov	fp, r3
 80045f0:	f04f 0c00 	mov.w	ip, #0
 80045f4:	46d9      	mov	r9, fp
 80045f6:	46e2      	mov	sl, ip
 80045f8:	eb19 0309 	adds.w	r3, r9, r9
 80045fc:	eb4a 040a 	adc.w	r4, sl, sl
 8004600:	4699      	mov	r9, r3
 8004602:	46a2      	mov	sl, r4
 8004604:	eb19 090b 	adds.w	r9, r9, fp
 8004608:	eb4a 0a0c 	adc.w	sl, sl, ip
 800460c:	f04f 0100 	mov.w	r1, #0
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004618:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800461c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004620:	4689      	mov	r9, r1
 8004622:	4692      	mov	sl, r2
 8004624:	eb1b 0509 	adds.w	r5, fp, r9
 8004628:	eb4c 060a 	adc.w	r6, ip, sl
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	4619      	mov	r1, r3
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	f04f 0300 	mov.w	r3, #0
 800463a:	f04f 0400 	mov.w	r4, #0
 800463e:	0094      	lsls	r4, r2, #2
 8004640:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004644:	008b      	lsls	r3, r1, #2
 8004646:	461a      	mov	r2, r3
 8004648:	4623      	mov	r3, r4
 800464a:	4628      	mov	r0, r5
 800464c:	4631      	mov	r1, r6
 800464e:	f7fb fdbb 	bl	80001c8 <__aeabi_uldivmod>
 8004652:	4603      	mov	r3, r0
 8004654:	460c      	mov	r4, r1
 8004656:	461a      	mov	r2, r3
 8004658:	4b9a      	ldr	r3, [pc, #616]	; (80048c4 <UART_SetConfig+0x6f4>)
 800465a:	fba3 1302 	umull	r1, r3, r3, r2
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	2164      	movs	r1, #100	; 0x64
 8004662:	fb01 f303 	mul.w	r3, r1, r3
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	3332      	adds	r3, #50	; 0x32
 800466c:	4a95      	ldr	r2, [pc, #596]	; (80048c4 <UART_SetConfig+0x6f4>)
 800466e:	fba2 2303 	umull	r2, r3, r2, r3
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004678:	4498      	add	r8, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	469b      	mov	fp, r3
 800467e:	f04f 0c00 	mov.w	ip, #0
 8004682:	46d9      	mov	r9, fp
 8004684:	46e2      	mov	sl, ip
 8004686:	eb19 0309 	adds.w	r3, r9, r9
 800468a:	eb4a 040a 	adc.w	r4, sl, sl
 800468e:	4699      	mov	r9, r3
 8004690:	46a2      	mov	sl, r4
 8004692:	eb19 090b 	adds.w	r9, r9, fp
 8004696:	eb4a 0a0c 	adc.w	sl, sl, ip
 800469a:	f04f 0100 	mov.w	r1, #0
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046ae:	4689      	mov	r9, r1
 80046b0:	4692      	mov	sl, r2
 80046b2:	eb1b 0509 	adds.w	r5, fp, r9
 80046b6:	eb4c 060a 	adc.w	r6, ip, sl
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4619      	mov	r1, r3
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	f04f 0400 	mov.w	r4, #0
 80046cc:	0094      	lsls	r4, r2, #2
 80046ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046d2:	008b      	lsls	r3, r1, #2
 80046d4:	461a      	mov	r2, r3
 80046d6:	4623      	mov	r3, r4
 80046d8:	4628      	mov	r0, r5
 80046da:	4631      	mov	r1, r6
 80046dc:	f7fb fd74 	bl	80001c8 <__aeabi_uldivmod>
 80046e0:	4603      	mov	r3, r0
 80046e2:	460c      	mov	r4, r1
 80046e4:	461a      	mov	r2, r3
 80046e6:	4b77      	ldr	r3, [pc, #476]	; (80048c4 <UART_SetConfig+0x6f4>)
 80046e8:	fba3 1302 	umull	r1, r3, r3, r2
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	2164      	movs	r1, #100	; 0x64
 80046f0:	fb01 f303 	mul.w	r3, r1, r3
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	3332      	adds	r3, #50	; 0x32
 80046fa:	4a72      	ldr	r2, [pc, #456]	; (80048c4 <UART_SetConfig+0x6f4>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	f003 020f 	and.w	r2, r3, #15
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4442      	add	r2, r8
 800470c:	609a      	str	r2, [r3, #8]
 800470e:	e0d0      	b.n	80048b2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004710:	f7fe fe50 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 8004714:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	469a      	mov	sl, r3
 800471a:	f04f 0b00 	mov.w	fp, #0
 800471e:	46d0      	mov	r8, sl
 8004720:	46d9      	mov	r9, fp
 8004722:	eb18 0308 	adds.w	r3, r8, r8
 8004726:	eb49 0409 	adc.w	r4, r9, r9
 800472a:	4698      	mov	r8, r3
 800472c:	46a1      	mov	r9, r4
 800472e:	eb18 080a 	adds.w	r8, r8, sl
 8004732:	eb49 090b 	adc.w	r9, r9, fp
 8004736:	f04f 0100 	mov.w	r1, #0
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004742:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004746:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800474a:	4688      	mov	r8, r1
 800474c:	4691      	mov	r9, r2
 800474e:	eb1a 0508 	adds.w	r5, sl, r8
 8004752:	eb4b 0609 	adc.w	r6, fp, r9
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4619      	mov	r1, r3
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	f04f 0400 	mov.w	r4, #0
 8004768:	0094      	lsls	r4, r2, #2
 800476a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800476e:	008b      	lsls	r3, r1, #2
 8004770:	461a      	mov	r2, r3
 8004772:	4623      	mov	r3, r4
 8004774:	4628      	mov	r0, r5
 8004776:	4631      	mov	r1, r6
 8004778:	f7fb fd26 	bl	80001c8 <__aeabi_uldivmod>
 800477c:	4603      	mov	r3, r0
 800477e:	460c      	mov	r4, r1
 8004780:	461a      	mov	r2, r3
 8004782:	4b50      	ldr	r3, [pc, #320]	; (80048c4 <UART_SetConfig+0x6f4>)
 8004784:	fba3 2302 	umull	r2, r3, r3, r2
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	469b      	mov	fp, r3
 8004792:	f04f 0c00 	mov.w	ip, #0
 8004796:	46d9      	mov	r9, fp
 8004798:	46e2      	mov	sl, ip
 800479a:	eb19 0309 	adds.w	r3, r9, r9
 800479e:	eb4a 040a 	adc.w	r4, sl, sl
 80047a2:	4699      	mov	r9, r3
 80047a4:	46a2      	mov	sl, r4
 80047a6:	eb19 090b 	adds.w	r9, r9, fp
 80047aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80047ae:	f04f 0100 	mov.w	r1, #0
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047c2:	4689      	mov	r9, r1
 80047c4:	4692      	mov	sl, r2
 80047c6:	eb1b 0509 	adds.w	r5, fp, r9
 80047ca:	eb4c 060a 	adc.w	r6, ip, sl
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	4619      	mov	r1, r3
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	f04f 0400 	mov.w	r4, #0
 80047e0:	0094      	lsls	r4, r2, #2
 80047e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047e6:	008b      	lsls	r3, r1, #2
 80047e8:	461a      	mov	r2, r3
 80047ea:	4623      	mov	r3, r4
 80047ec:	4628      	mov	r0, r5
 80047ee:	4631      	mov	r1, r6
 80047f0:	f7fb fcea 	bl	80001c8 <__aeabi_uldivmod>
 80047f4:	4603      	mov	r3, r0
 80047f6:	460c      	mov	r4, r1
 80047f8:	461a      	mov	r2, r3
 80047fa:	4b32      	ldr	r3, [pc, #200]	; (80048c4 <UART_SetConfig+0x6f4>)
 80047fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	2164      	movs	r1, #100	; 0x64
 8004804:	fb01 f303 	mul.w	r3, r1, r3
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	3332      	adds	r3, #50	; 0x32
 800480e:	4a2d      	ldr	r2, [pc, #180]	; (80048c4 <UART_SetConfig+0x6f4>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800481a:	4498      	add	r8, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	469b      	mov	fp, r3
 8004820:	f04f 0c00 	mov.w	ip, #0
 8004824:	46d9      	mov	r9, fp
 8004826:	46e2      	mov	sl, ip
 8004828:	eb19 0309 	adds.w	r3, r9, r9
 800482c:	eb4a 040a 	adc.w	r4, sl, sl
 8004830:	4699      	mov	r9, r3
 8004832:	46a2      	mov	sl, r4
 8004834:	eb19 090b 	adds.w	r9, r9, fp
 8004838:	eb4a 0a0c 	adc.w	sl, sl, ip
 800483c:	f04f 0100 	mov.w	r1, #0
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004848:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800484c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004850:	4689      	mov	r9, r1
 8004852:	4692      	mov	sl, r2
 8004854:	eb1b 0509 	adds.w	r5, fp, r9
 8004858:	eb4c 060a 	adc.w	r6, ip, sl
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4619      	mov	r1, r3
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	f04f 0400 	mov.w	r4, #0
 800486e:	0094      	lsls	r4, r2, #2
 8004870:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004874:	008b      	lsls	r3, r1, #2
 8004876:	461a      	mov	r2, r3
 8004878:	4623      	mov	r3, r4
 800487a:	4628      	mov	r0, r5
 800487c:	4631      	mov	r1, r6
 800487e:	f7fb fca3 	bl	80001c8 <__aeabi_uldivmod>
 8004882:	4603      	mov	r3, r0
 8004884:	460c      	mov	r4, r1
 8004886:	461a      	mov	r2, r3
 8004888:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <UART_SetConfig+0x6f4>)
 800488a:	fba3 1302 	umull	r1, r3, r3, r2
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	2164      	movs	r1, #100	; 0x64
 8004892:	fb01 f303 	mul.w	r3, r1, r3
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	3332      	adds	r3, #50	; 0x32
 800489c:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <UART_SetConfig+0x6f4>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	f003 020f 	and.w	r2, r3, #15
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4442      	add	r2, r8
 80048ae:	609a      	str	r2, [r3, #8]
}
 80048b0:	e7ff      	b.n	80048b2 <UART_SetConfig+0x6e2>
 80048b2:	bf00      	nop
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048bc:	40011000 	.word	0x40011000
 80048c0:	40011400 	.word	0x40011400
 80048c4:	51eb851f 	.word	0x51eb851f

080048c8 <__libc_init_array>:
 80048c8:	b570      	push	{r4, r5, r6, lr}
 80048ca:	4e0d      	ldr	r6, [pc, #52]	; (8004900 <__libc_init_array+0x38>)
 80048cc:	4c0d      	ldr	r4, [pc, #52]	; (8004904 <__libc_init_array+0x3c>)
 80048ce:	1ba4      	subs	r4, r4, r6
 80048d0:	10a4      	asrs	r4, r4, #2
 80048d2:	2500      	movs	r5, #0
 80048d4:	42a5      	cmp	r5, r4
 80048d6:	d109      	bne.n	80048ec <__libc_init_array+0x24>
 80048d8:	4e0b      	ldr	r6, [pc, #44]	; (8004908 <__libc_init_array+0x40>)
 80048da:	4c0c      	ldr	r4, [pc, #48]	; (800490c <__libc_init_array+0x44>)
 80048dc:	f000 f820 	bl	8004920 <_init>
 80048e0:	1ba4      	subs	r4, r4, r6
 80048e2:	10a4      	asrs	r4, r4, #2
 80048e4:	2500      	movs	r5, #0
 80048e6:	42a5      	cmp	r5, r4
 80048e8:	d105      	bne.n	80048f6 <__libc_init_array+0x2e>
 80048ea:	bd70      	pop	{r4, r5, r6, pc}
 80048ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048f0:	4798      	blx	r3
 80048f2:	3501      	adds	r5, #1
 80048f4:	e7ee      	b.n	80048d4 <__libc_init_array+0xc>
 80048f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048fa:	4798      	blx	r3
 80048fc:	3501      	adds	r5, #1
 80048fe:	e7f2      	b.n	80048e6 <__libc_init_array+0x1e>
 8004900:	08004958 	.word	0x08004958
 8004904:	08004958 	.word	0x08004958
 8004908:	08004958 	.word	0x08004958
 800490c:	0800495c 	.word	0x0800495c

08004910 <memset>:
 8004910:	4402      	add	r2, r0
 8004912:	4603      	mov	r3, r0
 8004914:	4293      	cmp	r3, r2
 8004916:	d100      	bne.n	800491a <memset+0xa>
 8004918:	4770      	bx	lr
 800491a:	f803 1b01 	strb.w	r1, [r3], #1
 800491e:	e7f9      	b.n	8004914 <memset+0x4>

08004920 <_init>:
 8004920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004922:	bf00      	nop
 8004924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004926:	bc08      	pop	{r3}
 8004928:	469e      	mov	lr, r3
 800492a:	4770      	bx	lr

0800492c <_fini>:
 800492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492e:	bf00      	nop
 8004930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004932:	bc08      	pop	{r3}
 8004934:	469e      	mov	lr, r3
 8004936:	4770      	bx	lr
