
test_no_default.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005444  08005444  00015444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054b4  080054b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080054b4  080054b4  000154b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054bc  080054bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054bc  080054bc  000154bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054c0  080054c0  000154c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080054c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000070  08005534  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08005534  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f369  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e47  00000000  00000000  0002f409  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001018  00000000  00000000  00031250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f40  00000000  00000000  00032268  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022353  00000000  00000000  000331a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd1f  00000000  00000000  000554fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d26f9  00000000  00000000  0006121a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00133913  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004974  00000000  00000000  00133990  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800542c 	.word	0x0800542c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800542c 	.word	0x0800542c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ad0:	f000 b972 	b.w	8000db8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	4688      	mov	r8, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14b      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4615      	mov	r5, r2
 8000afe:	d967      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0720 	rsb	r7, r2, #32
 8000b0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b12:	4095      	lsls	r5, r2
 8000b14:	ea47 0803 	orr.w	r8, r7, r3
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b24:	fa1f fc85 	uxth.w	ip, r5
 8000b28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b30:	fb07 f10c 	mul.w	r1, r7, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b3e:	f080 811b 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8118 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b48:	3f02      	subs	r7, #2
 8000b4a:	442b      	add	r3, r5
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b60:	45a4      	cmp	ip, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	192c      	adds	r4, r5, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b6a:	f080 8107 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b6e:	45a4      	cmp	ip, r4
 8000b70:	f240 8104 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b74:	3802      	subs	r0, #2
 8000b76:	442c      	add	r4, r5
 8000b78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b7c:	eba4 040c 	sub.w	r4, r4, ip
 8000b80:	2700      	movs	r7, #0
 8000b82:	b11e      	cbz	r6, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d909      	bls.n	8000baa <__udivmoddi4+0xbe>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80eb 	beq.w	8000d72 <__udivmoddi4+0x286>
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ba2:	4638      	mov	r0, r7
 8000ba4:	4639      	mov	r1, r7
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	fab3 f783 	clz	r7, r3
 8000bae:	2f00      	cmp	r7, #0
 8000bb0:	d147      	bne.n	8000c42 <__udivmoddi4+0x156>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d302      	bcc.n	8000bbc <__udivmoddi4+0xd0>
 8000bb6:	4282      	cmp	r2, r0
 8000bb8:	f200 80fa 	bhi.w	8000db0 <__udivmoddi4+0x2c4>
 8000bbc:	1a84      	subs	r4, r0, r2
 8000bbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d0e0      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000bca:	e9c6 4800 	strd	r4, r8, [r6]
 8000bce:	e7dd      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000bd0:	b902      	cbnz	r2, 8000bd4 <__udivmoddi4+0xe8>
 8000bd2:	deff      	udf	#255	; 0xff
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	f040 808f 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bde:	1b49      	subs	r1, r1, r5
 8000be0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000be4:	fa1f f885 	uxth.w	r8, r5
 8000be8:	2701      	movs	r7, #1
 8000bea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000c00:	18eb      	adds	r3, r5, r3
 8000c02:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	f200 80cd 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000c0e:	4684      	mov	ip, r0
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c20:	fb08 f800 	mul.w	r8, r8, r0
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x14c>
 8000c28:	192c      	adds	r4, r5, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x14a>
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	f200 80b6 	bhi.w	8000da2 <__udivmoddi4+0x2b6>
 8000c36:	4618      	mov	r0, r3
 8000c38:	eba4 0408 	sub.w	r4, r4, r8
 8000c3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c40:	e79f      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c42:	f1c7 0c20 	rsb	ip, r7, #32
 8000c46:	40bb      	lsls	r3, r7
 8000c48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c50:	fa01 f407 	lsl.w	r4, r1, r7
 8000c54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c60:	4325      	orrs	r5, r4
 8000c62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c66:	0c2c      	lsrs	r4, r5, #16
 8000c68:	fb08 3319 	mls	r3, r8, r9, r3
 8000c6c:	fa1f fa8e 	uxth.w	sl, lr
 8000c70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c74:	fb09 f40a 	mul.w	r4, r9, sl
 8000c78:	429c      	cmp	r4, r3
 8000c7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1e 0303 	adds.w	r3, lr, r3
 8000c88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c8c:	f080 8087 	bcs.w	8000d9e <__udivmoddi4+0x2b2>
 8000c90:	429c      	cmp	r4, r3
 8000c92:	f240 8084 	bls.w	8000d9e <__udivmoddi4+0x2b2>
 8000c96:	f1a9 0902 	sub.w	r9, r9, #2
 8000c9a:	4473      	add	r3, lr
 8000c9c:	1b1b      	subs	r3, r3, r4
 8000c9e:	b2ad      	uxth	r5, r5
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb0:	45a2      	cmp	sl, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cbc:	d26b      	bcs.n	8000d96 <__udivmoddi4+0x2aa>
 8000cbe:	45a2      	cmp	sl, r4
 8000cc0:	d969      	bls.n	8000d96 <__udivmoddi4+0x2aa>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4474      	add	r4, lr
 8000cc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cca:	fba0 8902 	umull	r8, r9, r0, r2
 8000cce:	eba4 040a 	sub.w	r4, r4, sl
 8000cd2:	454c      	cmp	r4, r9
 8000cd4:	46c2      	mov	sl, r8
 8000cd6:	464b      	mov	r3, r9
 8000cd8:	d354      	bcc.n	8000d84 <__udivmoddi4+0x298>
 8000cda:	d051      	beq.n	8000d80 <__udivmoddi4+0x294>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d069      	beq.n	8000db4 <__udivmoddi4+0x2c8>
 8000ce0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ce4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ce8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cec:	40fd      	lsrs	r5, r7
 8000cee:	40fc      	lsrs	r4, r7
 8000cf0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cf4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	e747      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000cfc:	f1c2 0320 	rsb	r3, r2, #32
 8000d00:	fa20 f703 	lsr.w	r7, r0, r3
 8000d04:	4095      	lsls	r5, r2
 8000d06:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d12:	4338      	orrs	r0, r7
 8000d14:	0c01      	lsrs	r1, r0, #16
 8000d16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d1a:	fa1f f885 	uxth.w	r8, r5
 8000d1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d26:	fb07 f308 	mul.w	r3, r7, r8
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x256>
 8000d32:	1869      	adds	r1, r5, r1
 8000d34:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d38:	d22f      	bcs.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d92d      	bls.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3e:	3f02      	subs	r7, #2
 8000d40:	4429      	add	r1, r5
 8000d42:	1acb      	subs	r3, r1, r3
 8000d44:	b281      	uxth	r1, r0
 8000d46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d52:	fb00 f308 	mul.w	r3, r0, r8
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x27e>
 8000d5a:	1869      	adds	r1, r5, r1
 8000d5c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d60:	d217      	bcs.n	8000d92 <__udivmoddi4+0x2a6>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d915      	bls.n	8000d92 <__udivmoddi4+0x2a6>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4429      	add	r1, r5
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d70:	e73b      	b.n	8000bea <__udivmoddi4+0xfe>
 8000d72:	4637      	mov	r7, r6
 8000d74:	4630      	mov	r0, r6
 8000d76:	e709      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d78:	4607      	mov	r7, r0
 8000d7a:	e6e7      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	e6fb      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d80:	4541      	cmp	r1, r8
 8000d82:	d2ab      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d88:	eb69 020e 	sbc.w	r2, r9, lr
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	4613      	mov	r3, r2
 8000d90:	e7a4      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d92:	4660      	mov	r0, ip
 8000d94:	e7e9      	b.n	8000d6a <__udivmoddi4+0x27e>
 8000d96:	4618      	mov	r0, r3
 8000d98:	e795      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9a:	4667      	mov	r7, ip
 8000d9c:	e7d1      	b.n	8000d42 <__udivmoddi4+0x256>
 8000d9e:	4681      	mov	r9, r0
 8000da0:	e77c      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	442c      	add	r4, r5
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0x14c>
 8000da8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dac:	442b      	add	r3, r5
 8000dae:	e72f      	b.n	8000c10 <__udivmoddi4+0x124>
 8000db0:	4638      	mov	r0, r7
 8000db2:	e708      	b.n	8000bc6 <__udivmoddi4+0xda>
 8000db4:	4637      	mov	r7, r6
 8000db6:	e6e9      	b.n	8000b8c <__udivmoddi4+0xa0>

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	0000      	movs	r0, r0
	...

08000dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b08b      	sub	sp, #44	; 0x2c
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc6:	f001 f8d1 	bl	8001f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dca:	f000 f899 	bl	8000f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dce:	f000 fbc5 	bl	800155c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dd2:	f000 f8ff 	bl	8000fd4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000dd6:	f000 fb6d 	bl	80014b4 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000dda:	f000 f94d 	bl	8001078 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000dde:	f000 f9d1 	bl	8001184 <MX_I2C1_Init>
  MX_DAC_Init();
 8000de2:	f000 f99b 	bl	800111c <MX_DAC_Init>
  MX_I2C3_Init();
 8000de6:	f000 f9fb 	bl	80011e0 <MX_I2C3_Init>
  MX_TIM3_Init();
 8000dea:	f000 fa77 	bl	80012dc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000dee:	f000 faeb 	bl	80013c8 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000df2:	f000 fb89 	bl	8001508 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000df6:	f000 fa21 	bl	800123c <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Start TIM1 (for us delay)
  HAL_TIM_Base_Start(&htim1);
 8000dfa:	483b      	ldr	r0, [pc, #236]	; (8000ee8 <main+0x128>)
 8000dfc:	f002 fc91 	bl	8003722 <HAL_TIM_Base_Start>

  // Start PWMs
  HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 8000e00:	2100      	movs	r1, #0
 8000e02:	483a      	ldr	r0, [pc, #232]	; (8000eec <main+0x12c>)
 8000e04:	f002 fce6 	bl	80037d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start (&htim4, TIM_CHANNEL_2);
 8000e08:	2104      	movs	r1, #4
 8000e0a:	4839      	ldr	r0, [pc, #228]	; (8000ef0 <main+0x130>)
 8000e0c:	f002 fce2 	bl	80037d4 <HAL_TIM_PWM_Start>
  while (1)
  {
    uint16_t count;
    uint16_t distance;
    HAL_GPIO_WritePin(GPIOB, US_Trig_Pin, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e16:	4837      	ldr	r0, [pc, #220]	; (8000ef4 <main+0x134>)
 8000e18:	f001 fea4 	bl	8002b64 <HAL_GPIO_WritePin>
    Delay_us(10);
 8000e1c:	200a      	movs	r0, #10
 8000e1e:	f000 fcff 	bl	8001820 <Delay_us>
    HAL_GPIO_WritePin(GPIOB, US_Trig_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e28:	4832      	ldr	r0, [pc, #200]	; (8000ef4 <main+0x134>)
 8000e2a:	f001 fe9b 	bl	8002b64 <HAL_GPIO_WritePin>

    while (HAL_GPIO_ReadPin(GPIOB, US_Echo_Pin) == GPIO_PIN_RESET);
 8000e2e:	bf00      	nop
 8000e30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e34:	482f      	ldr	r0, [pc, #188]	; (8000ef4 <main+0x134>)
 8000e36:	f001 fe7d 	bl	8002b34 <HAL_GPIO_ReadPin>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0f7      	beq.n	8000e30 <main+0x70>
    Reset_Timer_us();
 8000e40:	f000 fd06 	bl	8001850 <Reset_Timer_us>
    while ((HAL_GPIO_ReadPin(GPIOB, US_Echo_Pin) == GPIO_PIN_SET) && (Get_Timer_us() < 65535));
 8000e44:	bf00      	nop
 8000e46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e4a:	482a      	ldr	r0, [pc, #168]	; (8000ef4 <main+0x134>)
 8000e4c:	f001 fe72 	bl	8002b34 <HAL_GPIO_ReadPin>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d107      	bne.n	8000e66 <main+0xa6>
 8000e56:	f000 fd09 	bl	800186c <Get_Timer_us>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d1ef      	bne.n	8000e46 <main+0x86>
    count = Get_Timer_us();
 8000e66:	f000 fd01 	bl	800186c <Get_Timer_us>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	84fb      	strh	r3, [r7, #38]	; 0x26
    distance = (float)(0.0343 * count / 2);
 8000e6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb57 	bl	8000524 <__aeabi_i2d>
 8000e76:	a31a      	add	r3, pc, #104	; (adr r3, 8000ee0 <main+0x120>)
 8000e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7c:	f7ff fbbc 	bl	80005f8 <__aeabi_dmul>
 8000e80:	4603      	mov	r3, r0
 8000e82:	460c      	mov	r4, r1
 8000e84:	4618      	mov	r0, r3
 8000e86:	4621      	mov	r1, r4
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e90:	f7ff fcdc 	bl	800084c <__aeabi_ddiv>
 8000e94:	4603      	mov	r3, r0
 8000e96:	460c      	mov	r4, r1
 8000e98:	4618      	mov	r0, r3
 8000e9a:	4621      	mov	r1, r4
 8000e9c:	f7ff fdbe 	bl	8000a1c <__aeabi_d2f>
 8000ea0:	ee07 0a90 	vmov	s15, r0
 8000ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ea8:	ee17 3a90 	vmov	r3, s15
 8000eac:	84bb      	strh	r3, [r7, #36]	; 0x24
    sprintf(msg, "delay = %d us, distance = %d cm\r\n ", count, distance);
 8000eae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000eb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000eb2:	1d38      	adds	r0, r7, #4
 8000eb4:	4910      	ldr	r1, [pc, #64]	; (8000ef8 <main+0x138>)
 8000eb6:	f003 feb3 	bl	8004c20 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff f987 	bl	80001d0 <strlen>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	1d39      	adds	r1, r7, #4
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <main+0x13c>)
 8000ece:	f003 fa16 	bl	80042fe <HAL_UART_Transmit>
    HAL_Delay(1000);
 8000ed2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed6:	f001 f8bb 	bl	8002050 <HAL_Delay>
  {
 8000eda:	e799      	b.n	8000e10 <main+0x50>
 8000edc:	f3af 8000 	nop.w
 8000ee0:	04816f00 	.word	0x04816f00
 8000ee4:	3fa18fc5 	.word	0x3fa18fc5
 8000ee8:	200002a4 	.word	0x200002a4
 8000eec:	20000208 	.word	0x20000208
 8000ef0:	200000ec 	.word	0x200000ec
 8000ef4:	40020400 	.word	0x40020400
 8000ef8:	08005444 	.word	0x08005444
 8000efc:	200002ec 	.word	0x200002ec

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b094      	sub	sp, #80	; 0x50
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 0320 	add.w	r3, r7, #32
 8000f0a:	2230      	movs	r2, #48	; 0x30
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fe7e 	bl	8004c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f32:	6413      	str	r3, [r2, #64]	; 0x40
 8000f34:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f60:	2301      	movs	r3, #1
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f64:	2310      	movs	r3, #16
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f70:	2308      	movs	r3, #8
 8000f72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f74:	23a8      	movs	r3, #168	; 0xa8
 8000f76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f80:	f107 0320 	add.w	r3, r7, #32
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 ff3f 	bl	8002e08 <HAL_RCC_OscConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f90:	f000 fc7a 	bl	8001888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f94:	230f      	movs	r3, #15
 8000f96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fa0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000faa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2105      	movs	r1, #5
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 f998 	bl	80032e8 <HAL_RCC_ClockConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fbe:	f000 fc63 	bl	8001888 <Error_Handler>
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3750      	adds	r7, #80	; 0x50
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40007000 	.word	0x40007000

08000fd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fda:	463b      	mov	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <MX_ADC1_Init+0x98>)
 8000fe8:	4a21      	ldr	r2, [pc, #132]	; (8001070 <MX_ADC1_Init+0x9c>)
 8000fea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <MX_ADC1_Init+0x98>)
 8000fee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ff2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <MX_ADC1_Init+0x98>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <MX_ADC1_Init+0x98>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_ADC1_Init+0x98>)
 8001002:	2200      	movs	r2, #0
 8001004:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <MX_ADC1_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <MX_ADC1_Init+0x98>)
 8001010:	2200      	movs	r2, #0
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_ADC1_Init+0x98>)
 8001016:	4a17      	ldr	r2, [pc, #92]	; (8001074 <MX_ADC1_Init+0xa0>)
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_ADC1_Init+0x98>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <MX_ADC1_Init+0x98>)
 8001022:	2201      	movs	r2, #1
 8001024:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_ADC1_Init+0x98>)
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800102e:	4b0f      	ldr	r3, [pc, #60]	; (800106c <MX_ADC1_Init+0x98>)
 8001030:	2201      	movs	r2, #1
 8001032:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <MX_ADC1_Init+0x98>)
 8001036:	f001 f82d 	bl	8002094 <HAL_ADC_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001040:	f000 fc22 	bl	8001888 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001044:	230e      	movs	r3, #14
 8001046:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001048:	2301      	movs	r3, #1
 800104a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001050:	463b      	mov	r3, r7
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_ADC1_Init+0x98>)
 8001056:	f001 f861 	bl	800211c <HAL_ADC_ConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001060:	f000 fc12 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000248 	.word	0x20000248
 8001070:	40012000 	.word	0x40012000
 8001074:	0f000001 	.word	0x0f000001

08001078 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800107e:	463b      	mov	r3, r7
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <MX_ADC2_Init+0x98>)
 800108c:	4a21      	ldr	r2, [pc, #132]	; (8001114 <MX_ADC2_Init+0x9c>)
 800108e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <MX_ADC2_Init+0x98>)
 8001092:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001096:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <MX_ADC2_Init+0x98>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <MX_ADC2_Init+0x98>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010a4:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <MX_ADC2_Init+0x98>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010aa:	4b19      	ldr	r3, [pc, #100]	; (8001110 <MX_ADC2_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <MX_ADC2_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <MX_ADC2_Init+0x98>)
 80010ba:	4a17      	ldr	r2, [pc, #92]	; (8001118 <MX_ADC2_Init+0xa0>)
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <MX_ADC2_Init+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_ADC2_Init+0x98>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_ADC2_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_ADC2_Init+0x98>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010d8:	480d      	ldr	r0, [pc, #52]	; (8001110 <MX_ADC2_Init+0x98>)
 80010da:	f000 ffdb 	bl	8002094 <HAL_ADC_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80010e4:	f000 fbd0 	bl	8001888 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80010e8:	230f      	movs	r3, #15
 80010ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010f4:	463b      	mov	r3, r7
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_ADC2_Init+0x98>)
 80010fa:	f001 f80f 	bl	800211c <HAL_ADC_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001104:	f000 fbc0 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000016c 	.word	0x2000016c
 8001114:	40012100 	.word	0x40012100
 8001118:	0f000001 	.word	0x0f000001

0800111c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001122:	463b      	mov	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_DAC_Init+0x60>)
 800112c:	4a14      	ldr	r2, [pc, #80]	; (8001180 <MX_DAC_Init+0x64>)
 800112e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001130:	4812      	ldr	r0, [pc, #72]	; (800117c <MX_DAC_Init+0x60>)
 8001132:	f001 faf6 	bl	8002722 <HAL_DAC_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800113c:	f000 fba4 	bl	8001888 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	4619      	mov	r1, r3
 800114e:	480b      	ldr	r0, [pc, #44]	; (800117c <MX_DAC_Init+0x60>)
 8001150:	f001 fb09 	bl	8002766 <HAL_DAC_ConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800115a:	f000 fb95 	bl	8001888 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	2210      	movs	r2, #16
 8001162:	4619      	mov	r1, r3
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_DAC_Init+0x60>)
 8001166:	f001 fafe 	bl	8002766 <HAL_DAC_ConfigChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001170:	f000 fb8a 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000290 	.word	0x20000290
 8001180:	40007400 	.word	0x40007400

08001184 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <MX_I2C1_Init+0x50>)
 800118a:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <MX_I2C1_Init+0x54>)
 800118c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_I2C1_Init+0x50>)
 8001190:	4a12      	ldr	r2, [pc, #72]	; (80011dc <MX_I2C1_Init+0x58>)
 8001192:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_I2C1_Init+0x50>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_I2C1_Init+0x50>)
 800119c:	2200      	movs	r2, #0
 800119e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_I2C1_Init+0x50>)
 80011a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <MX_I2C1_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_I2C1_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <MX_I2C1_Init+0x50>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <MX_I2C1_Init+0x50>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011c0:	4804      	ldr	r0, [pc, #16]	; (80011d4 <MX_I2C1_Init+0x50>)
 80011c2:	f001 fce9 	bl	8002b98 <HAL_I2C_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011cc:	f000 fb5c 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200001b4 	.word	0x200001b4
 80011d8:	40005400 	.word	0x40005400
 80011dc:	000186a0 	.word	0x000186a0

080011e0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_I2C3_Init+0x50>)
 80011e6:	4a13      	ldr	r2, [pc, #76]	; (8001234 <MX_I2C3_Init+0x54>)
 80011e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_I2C3_Init+0x50>)
 80011ec:	4a12      	ldr	r2, [pc, #72]	; (8001238 <MX_I2C3_Init+0x58>)
 80011ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_I2C3_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 32;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_I2C3_Init+0x50>)
 80011f8:	2220      	movs	r2, #32
 80011fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_I2C3_Init+0x50>)
 80011fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001202:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <MX_I2C3_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_I2C3_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <MX_I2C3_Init+0x50>)
 8001212:	2240      	movs	r2, #64	; 0x40
 8001214:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_I2C3_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <MX_I2C3_Init+0x50>)
 800121e:	f001 fcbb 	bl	8002b98 <HAL_I2C_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001228:	f000 fb2e 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000098 	.word	0x20000098
 8001234:	40005c00 	.word	0x40005c00
 8001238:	00061a80 	.word	0x00061a80

0800123c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001250:	463b      	mov	r3, r7
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <MX_TIM1_Init+0x98>)
 800125a:	4a1f      	ldr	r2, [pc, #124]	; (80012d8 <MX_TIM1_Init+0x9c>)
 800125c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168;
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <MX_TIM1_Init+0x98>)
 8001260:	22a8      	movs	r2, #168	; 0xa8
 8001262:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <MX_TIM1_Init+0x98>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <MX_TIM1_Init+0x98>)
 800126c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001270:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <MX_TIM1_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <MX_TIM1_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <MX_TIM1_Init+0x98>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001284:	4813      	ldr	r0, [pc, #76]	; (80012d4 <MX_TIM1_Init+0x98>)
 8001286:	f002 fa21 	bl	80036cc <HAL_TIM_Base_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001290:	f000 fafa 	bl	8001888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001298:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	4619      	mov	r1, r3
 80012a0:	480c      	ldr	r0, [pc, #48]	; (80012d4 <MX_TIM1_Init+0x98>)
 80012a2:	f002 fb9b 	bl	80039dc <HAL_TIM_ConfigClockSource>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80012ac:	f000 faec 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012b8:	463b      	mov	r3, r7
 80012ba:	4619      	mov	r1, r3
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_TIM1_Init+0x98>)
 80012be:	f002 ff55 	bl	800416c <HAL_TIMEx_MasterConfigSynchronization>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012c8:	f000 fade 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200002a4 	.word	0x200002a4
 80012d8:	40010000 	.word	0x40010000

080012dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08e      	sub	sp, #56	; 0x38
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
 8001308:	615a      	str	r2, [r3, #20]
 800130a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800130c:	4b2c      	ldr	r3, [pc, #176]	; (80013c0 <MX_TIM3_Init+0xe4>)
 800130e:	4a2d      	ldr	r2, [pc, #180]	; (80013c4 <MX_TIM3_Init+0xe8>)
 8001310:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80;
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <MX_TIM3_Init+0xe4>)
 8001314:	2250      	movs	r2, #80	; 0x50
 8001316:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <MX_TIM3_Init+0xe4>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800131e:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <MX_TIM3_Init+0xe4>)
 8001320:	2264      	movs	r2, #100	; 0x64
 8001322:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <MX_TIM3_Init+0xe4>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132a:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <MX_TIM3_Init+0xe4>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001330:	4823      	ldr	r0, [pc, #140]	; (80013c0 <MX_TIM3_Init+0xe4>)
 8001332:	f002 f9cb 	bl	80036cc <HAL_TIM_Base_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800133c:	f000 faa4 	bl	8001888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800134a:	4619      	mov	r1, r3
 800134c:	481c      	ldr	r0, [pc, #112]	; (80013c0 <MX_TIM3_Init+0xe4>)
 800134e:	f002 fb45 	bl	80039dc <HAL_TIM_ConfigClockSource>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001358:	f000 fa96 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800135c:	4818      	ldr	r0, [pc, #96]	; (80013c0 <MX_TIM3_Init+0xe4>)
 800135e:	f002 fa04 	bl	800376a <HAL_TIM_PWM_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001368:	f000 fa8e 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001374:	f107 0320 	add.w	r3, r7, #32
 8001378:	4619      	mov	r1, r3
 800137a:	4811      	ldr	r0, [pc, #68]	; (80013c0 <MX_TIM3_Init+0xe4>)
 800137c:	f002 fef6 	bl	800416c <HAL_TIMEx_MasterConfigSynchronization>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001386:	f000 fa7f 	bl	8001888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138a:	2360      	movs	r3, #96	; 0x60
 800138c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	4807      	ldr	r0, [pc, #28]	; (80013c0 <MX_TIM3_Init+0xe4>)
 80013a2:	f002 fa55 	bl	8003850 <HAL_TIM_PWM_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80013ac:	f000 fa6c 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013b0:	4803      	ldr	r0, [pc, #12]	; (80013c0 <MX_TIM3_Init+0xe4>)
 80013b2:	f000 fc3f 	bl	8001c34 <HAL_TIM_MspPostInit>

}
 80013b6:	bf00      	nop
 80013b8:	3738      	adds	r7, #56	; 0x38
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000208 	.word	0x20000208
 80013c4:	40000400 	.word	0x40000400

080013c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08e      	sub	sp, #56	; 0x38
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013dc:	f107 0320 	add.w	r3, r7, #32
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
 80013f4:	615a      	str	r2, [r3, #20]
 80013f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013f8:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <MX_TIM4_Init+0xe4>)
 80013fa:	4a2d      	ldr	r2, [pc, #180]	; (80014b0 <MX_TIM4_Init+0xe8>)
 80013fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12;
 80013fe:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <MX_TIM4_Init+0xe4>)
 8001400:	220c      	movs	r2, #12
 8001402:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001404:	4b29      	ldr	r3, [pc, #164]	; (80014ac <MX_TIM4_Init+0xe4>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800140a:	4b28      	ldr	r3, [pc, #160]	; (80014ac <MX_TIM4_Init+0xe4>)
 800140c:	2264      	movs	r2, #100	; 0x64
 800140e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001410:	4b26      	ldr	r3, [pc, #152]	; (80014ac <MX_TIM4_Init+0xe4>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001416:	4b25      	ldr	r3, [pc, #148]	; (80014ac <MX_TIM4_Init+0xe4>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800141c:	4823      	ldr	r0, [pc, #140]	; (80014ac <MX_TIM4_Init+0xe4>)
 800141e:	f002 f955 	bl	80036cc <HAL_TIM_Base_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001428:	f000 fa2e 	bl	8001888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001432:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001436:	4619      	mov	r1, r3
 8001438:	481c      	ldr	r0, [pc, #112]	; (80014ac <MX_TIM4_Init+0xe4>)
 800143a:	f002 facf 	bl	80039dc <HAL_TIM_ConfigClockSource>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001444:	f000 fa20 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001448:	4818      	ldr	r0, [pc, #96]	; (80014ac <MX_TIM4_Init+0xe4>)
 800144a:	f002 f98e 	bl	800376a <HAL_TIM_PWM_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001454:	f000 fa18 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001460:	f107 0320 	add.w	r3, r7, #32
 8001464:	4619      	mov	r1, r3
 8001466:	4811      	ldr	r0, [pc, #68]	; (80014ac <MX_TIM4_Init+0xe4>)
 8001468:	f002 fe80 	bl	800416c <HAL_TIMEx_MasterConfigSynchronization>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001472:	f000 fa09 	bl	8001888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001476:	2360      	movs	r3, #96	; 0x60
 8001478:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2204      	movs	r2, #4
 800148a:	4619      	mov	r1, r3
 800148c:	4807      	ldr	r0, [pc, #28]	; (80014ac <MX_TIM4_Init+0xe4>)
 800148e:	f002 f9df 	bl	8003850 <HAL_TIM_PWM_ConfigChannel>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001498:	f000 f9f6 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800149c:	4803      	ldr	r0, [pc, #12]	; (80014ac <MX_TIM4_Init+0xe4>)
 800149e:	f000 fbc9 	bl	8001c34 <HAL_TIM_MspPostInit>

}
 80014a2:	bf00      	nop
 80014a4:	3738      	adds	r7, #56	; 0x38
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200000ec 	.word	0x200000ec
 80014b0:	40000800 	.word	0x40000800

080014b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <MX_USART2_UART_Init+0x50>)
 80014bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014da:	220c      	movs	r2, #12
 80014dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014ec:	f002 feba 	bl	8004264 <HAL_UART_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014f6:	f000 f9c7 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200002ec 	.word	0x200002ec
 8001504:	40004400 	.word	0x40004400

08001508 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_USART3_UART_Init+0x4c>)
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <MX_USART3_UART_Init+0x50>)
 8001510:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <MX_USART3_UART_Init+0x4c>)
 8001514:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001518:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_USART3_UART_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MX_USART3_UART_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_USART3_UART_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_USART3_UART_Init+0x4c>)
 800152e:	220c      	movs	r2, #12
 8001530:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <MX_USART3_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_USART3_UART_Init+0x4c>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_USART3_UART_Init+0x4c>)
 8001540:	f002 fe90 	bl	8004264 <HAL_UART_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800154a:	f000 f99d 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000012c 	.word	0x2000012c
 8001558:	40004800 	.word	0x40004800

0800155c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08c      	sub	sp, #48	; 0x30
 8001560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
 8001576:	4ba2      	ldr	r3, [pc, #648]	; (8001800 <MX_GPIO_Init+0x2a4>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4aa1      	ldr	r2, [pc, #644]	; (8001800 <MX_GPIO_Init+0x2a4>)
 800157c:	f043 0310 	orr.w	r3, r3, #16
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b9f      	ldr	r3, [pc, #636]	; (8001800 <MX_GPIO_Init+0x2a4>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	61bb      	str	r3, [r7, #24]
 800158c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	4b9b      	ldr	r3, [pc, #620]	; (8001800 <MX_GPIO_Init+0x2a4>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a9a      	ldr	r2, [pc, #616]	; (8001800 <MX_GPIO_Init+0x2a4>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b98      	ldr	r3, [pc, #608]	; (8001800 <MX_GPIO_Init+0x2a4>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b94      	ldr	r3, [pc, #592]	; (8001800 <MX_GPIO_Init+0x2a4>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a93      	ldr	r2, [pc, #588]	; (8001800 <MX_GPIO_Init+0x2a4>)
 80015b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b91      	ldr	r3, [pc, #580]	; (8001800 <MX_GPIO_Init+0x2a4>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b8d      	ldr	r3, [pc, #564]	; (8001800 <MX_GPIO_Init+0x2a4>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a8c      	ldr	r2, [pc, #560]	; (8001800 <MX_GPIO_Init+0x2a4>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b8a      	ldr	r3, [pc, #552]	; (8001800 <MX_GPIO_Init+0x2a4>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	4b86      	ldr	r3, [pc, #536]	; (8001800 <MX_GPIO_Init+0x2a4>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a85      	ldr	r2, [pc, #532]	; (8001800 <MX_GPIO_Init+0x2a4>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b83      	ldr	r3, [pc, #524]	; (8001800 <MX_GPIO_Init+0x2a4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	4b7f      	ldr	r3, [pc, #508]	; (8001800 <MX_GPIO_Init+0x2a4>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a7e      	ldr	r2, [pc, #504]	; (8001800 <MX_GPIO_Init+0x2a4>)
 8001608:	f043 0308 	orr.w	r3, r3, #8
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b7c      	ldr	r3, [pc, #496]	; (8001800 <MX_GPIO_Init+0x2a4>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	2108      	movs	r1, #8
 800161e:	4879      	ldr	r0, [pc, #484]	; (8001804 <MX_GPIO_Init+0x2a8>)
 8001620:	f001 faa0 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001624:	2201      	movs	r2, #1
 8001626:	2101      	movs	r1, #1
 8001628:	4877      	ldr	r0, [pc, #476]	; (8001808 <MX_GPIO_Init+0x2ac>)
 800162a:	f001 fa9b 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001634:	4875      	ldr	r0, [pc, #468]	; (800180c <MX_GPIO_Init+0x2b0>)
 8001636:	f001 fa95 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800163a:	2200      	movs	r2, #0
 800163c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001640:	4873      	ldr	r0, [pc, #460]	; (8001810 <MX_GPIO_Init+0x2b4>)
 8001642:	f001 fa8f 	bl	8002b64 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001646:	2308      	movs	r3, #8
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4619      	mov	r1, r3
 800165c:	4869      	ldr	r0, [pc, #420]	; (8001804 <MX_GPIO_Init+0x2a8>)
 800165e:	f001 f8cf 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001662:	2301      	movs	r3, #1
 8001664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001666:	2301      	movs	r3, #1
 8001668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 031c 	add.w	r3, r7, #28
 8001676:	4619      	mov	r1, r3
 8001678:	4863      	ldr	r0, [pc, #396]	; (8001808 <MX_GPIO_Init+0x2ac>)
 800167a:	f001 f8c1 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800167e:	2308      	movs	r3, #8
 8001680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800168e:	2305      	movs	r3, #5
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	4619      	mov	r1, r3
 8001698:	485b      	ldr	r0, [pc, #364]	; (8001808 <MX_GPIO_Init+0x2ac>)
 800169a:	f001 f8b1 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800169e:	2301      	movs	r3, #1
 80016a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a2:	4b5c      	ldr	r3, [pc, #368]	; (8001814 <MX_GPIO_Init+0x2b8>)
 80016a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4619      	mov	r1, r3
 80016b0:	4859      	ldr	r0, [pc, #356]	; (8001818 <MX_GPIO_Init+0x2bc>)
 80016b2:	f001 f8a5 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80016b6:	23c0      	movs	r3, #192	; 0xc0
 80016b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016c6:	2305      	movs	r3, #5
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	4851      	ldr	r0, [pc, #324]	; (8001818 <MX_GPIO_Init+0x2bc>)
 80016d2:	f001 f895 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 US_Echo_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|US_Echo_Pin;
 80016d6:	f242 0304 	movw	r3, #8196	; 0x2004
 80016da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	4848      	ldr	r0, [pc, #288]	; (800180c <MX_GPIO_Init+0x2b0>)
 80016ec:	f001 f888 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016fa:	2302      	movs	r3, #2
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016fe:	f107 031c 	add.w	r3, r7, #28
 8001702:	4619      	mov	r1, r3
 8001704:	483f      	ldr	r0, [pc, #252]	; (8001804 <MX_GPIO_Init+0x2a8>)
 8001706:	f001 f87b 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800170a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800170e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800171c:	2305      	movs	r3, #5
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	4619      	mov	r1, r3
 8001726:	4839      	ldr	r0, [pc, #228]	; (800180c <MX_GPIO_Init+0x2b0>)
 8001728:	f001 f86a 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : US_Trig_Pin */
  GPIO_InitStruct.Pin = US_Trig_Pin;
 800172c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(US_Trig_GPIO_Port, &GPIO_InitStruct);
 800173e:	f107 031c 	add.w	r3, r7, #28
 8001742:	4619      	mov	r1, r3
 8001744:	4831      	ldr	r0, [pc, #196]	; (800180c <MX_GPIO_Init+0x2b0>)
 8001746:	f001 f85b 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800174a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800174e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	4619      	mov	r1, r3
 8001762:	482b      	ldr	r0, [pc, #172]	; (8001810 <MX_GPIO_Init+0x2b4>)
 8001764:	f001 f84c 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001768:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800176c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800177a:	2306      	movs	r3, #6
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177e:	f107 031c 	add.w	r3, r7, #28
 8001782:	4619      	mov	r1, r3
 8001784:	4820      	ldr	r0, [pc, #128]	; (8001808 <MX_GPIO_Init+0x2ac>)
 8001786:	f001 f83b 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800178a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	4619      	mov	r1, r3
 800179e:	481e      	ldr	r0, [pc, #120]	; (8001818 <MX_GPIO_Init+0x2bc>)
 80017a0:	f001 f82e 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80017a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017b6:	230a      	movs	r3, #10
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	4619      	mov	r1, r3
 80017c0:	4815      	ldr	r0, [pc, #84]	; (8001818 <MX_GPIO_Init+0x2bc>)
 80017c2:	f001 f81d 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80017c6:	2320      	movs	r3, #32
 80017c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4619      	mov	r1, r3
 80017d8:	480d      	ldr	r0, [pc, #52]	; (8001810 <MX_GPIO_Init+0x2b4>)
 80017da:	f001 f811 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80017de:	2302      	movs	r3, #2
 80017e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_GPIO_Init+0x2c0>)
 80017e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	4619      	mov	r1, r3
 80017f0:	4804      	ldr	r0, [pc, #16]	; (8001804 <MX_GPIO_Init+0x2a8>)
 80017f2:	f001 f805 	bl	8002800 <HAL_GPIO_Init>

}
 80017f6:	bf00      	nop
 80017f8:	3730      	adds	r7, #48	; 0x30
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	40021000 	.word	0x40021000
 8001808:	40020800 	.word	0x40020800
 800180c:	40020400 	.word	0x40020400
 8001810:	40020c00 	.word	0x40020c00
 8001814:	10110000 	.word	0x10110000
 8001818:	40020000 	.word	0x40020000
 800181c:	10120000 	.word	0x10120000

08001820 <Delay_us>:
	PWM_1 = (float)(ADC_2 - STICK_Y_MID) / (ADC_MAX - STICK_Y_MID) * PWM_DUTY_MAX;
	PWM_2 = PWM_1;
}

static void Delay_us(uint16_t delay)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER (&htim1, 0);
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <Delay_us+0x2c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2200      	movs	r2, #0
 8001830:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8001832:	bf00      	nop
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <Delay_us+0x2c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	429a      	cmp	r2, r3
 800183e:	d3f9      	bcc.n	8001834 <Delay_us+0x14>
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	200002a4 	.word	0x200002a4

08001850 <Reset_Timer_us>:

static void Reset_Timer_us(){
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COUNTER (&htim1, 0);
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <Reset_Timer_us+0x18>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2200      	movs	r2, #0
 800185a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	200002a4 	.word	0x200002a4

0800186c <Get_Timer_us>:

static uint16_t Get_Timer_us()
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  __HAL_TIM_GET_COUNTER(&htim1);
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <Get_Timer_us+0x18>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001876:	bf00      	nop
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	200002a4 	.word	0x200002a4

08001888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_MspInit+0x4c>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	4a0f      	ldr	r2, [pc, #60]	; (80018e4 <HAL_MspInit+0x4c>)
 80018a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ac:	6453      	str	r3, [r2, #68]	; 0x44
 80018ae:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <HAL_MspInit+0x4c>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_MspInit+0x4c>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	4a08      	ldr	r2, [pc, #32]	; (80018e4 <HAL_MspInit+0x4c>)
 80018c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_MspInit+0x4c>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800

080018e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	; 0x30
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a2e      	ldr	r2, [pc, #184]	; (80019c0 <HAL_ADC_MspInit+0xd8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d128      	bne.n	800195c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
 800190e:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <HAL_ADC_MspInit+0xdc>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	4a2c      	ldr	r2, [pc, #176]	; (80019c4 <HAL_ADC_MspInit+0xdc>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001918:	6453      	str	r3, [r2, #68]	; 0x44
 800191a:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <HAL_ADC_MspInit+0xdc>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001922:	61bb      	str	r3, [r7, #24]
 8001924:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <HAL_ADC_MspInit+0xdc>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a25      	ldr	r2, [pc, #148]	; (80019c4 <HAL_ADC_MspInit+0xdc>)
 8001930:	f043 0304 	orr.w	r3, r3, #4
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <HAL_ADC_MspInit+0xdc>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PC4     ------> ADC1_IN14 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001942:	2310      	movs	r3, #16
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001946:	2303      	movs	r3, #3
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	4619      	mov	r1, r3
 8001954:	481c      	ldr	r0, [pc, #112]	; (80019c8 <HAL_ADC_MspInit+0xe0>)
 8001956:	f000 ff53 	bl	8002800 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800195a:	e02c      	b.n	80019b6 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a1a      	ldr	r2, [pc, #104]	; (80019cc <HAL_ADC_MspInit+0xe4>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d127      	bne.n	80019b6 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <HAL_ADC_MspInit+0xdc>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	4a15      	ldr	r2, [pc, #84]	; (80019c4 <HAL_ADC_MspInit+0xdc>)
 8001970:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001974:	6453      	str	r3, [r2, #68]	; 0x44
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_ADC_MspInit+0xdc>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_ADC_MspInit+0xdc>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <HAL_ADC_MspInit+0xdc>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_ADC_MspInit+0xdc>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800199e:	2320      	movs	r3, #32
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a2:	2303      	movs	r3, #3
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	4619      	mov	r1, r3
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <HAL_ADC_MspInit+0xe0>)
 80019b2:	f000 ff25 	bl	8002800 <HAL_GPIO_Init>
}
 80019b6:	bf00      	nop
 80019b8:	3730      	adds	r7, #48	; 0x30
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40012000 	.word	0x40012000
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020800 	.word	0x40020800
 80019cc:	40012100 	.word	0x40012100

080019d0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a17      	ldr	r2, [pc, #92]	; (8001a4c <HAL_DAC_MspInit+0x7c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d127      	bne.n	8001a42 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <HAL_DAC_MspInit+0x80>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <HAL_DAC_MspInit+0x80>)
 80019fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
 8001a02:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <HAL_DAC_MspInit+0x80>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <HAL_DAC_MspInit+0x80>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <HAL_DAC_MspInit+0x80>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_DAC_MspInit+0x80>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a2a:	2330      	movs	r3, #48	; 0x30
 8001a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4805      	ldr	r0, [pc, #20]	; (8001a54 <HAL_DAC_MspInit+0x84>)
 8001a3e:	f000 fedf 	bl	8002800 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001a42:	bf00      	nop
 8001a44:	3728      	adds	r7, #40	; 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40007400 	.word	0x40007400
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020000 	.word	0x40020000

08001a58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08c      	sub	sp, #48	; 0x30
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a42      	ldr	r2, [pc, #264]	; (8001b80 <HAL_I2C_MspInit+0x128>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d12d      	bne.n	8001ad6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a40      	ldr	r2, [pc, #256]	; (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b3e      	ldr	r3, [pc, #248]	; (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001a96:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a9c:	2312      	movs	r3, #18
 8001a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aac:	f107 031c 	add.w	r3, r7, #28
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4835      	ldr	r0, [pc, #212]	; (8001b88 <HAL_I2C_MspInit+0x130>)
 8001ab4:	f000 fea4 	bl	8002800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	4a30      	ldr	r2, [pc, #192]	; (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001ac2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac8:	4b2e      	ldr	r3, [pc, #184]	; (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ad4:	e050      	b.n	8001b78 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a2c      	ldr	r2, [pc, #176]	; (8001b8c <HAL_I2C_MspInit+0x134>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d14b      	bne.n	8001b78 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	4a26      	ldr	r2, [pc, #152]	; (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	6313      	str	r3, [r2, #48]	; 0x30
 8001af0:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	4a1f      	ldr	r2, [pc, #124]	; (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b1e:	2312      	movs	r3, #18
 8001b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b22:	2301      	movs	r3, #1
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	4619      	mov	r1, r3
 8001b34:	4816      	ldr	r0, [pc, #88]	; (8001b90 <HAL_I2C_MspInit+0x138>)
 8001b36:	f000 fe63 	bl	8002800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b40:	2312      	movs	r3, #18
 8001b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b44:	2301      	movs	r3, #1
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b4c:	2304      	movs	r3, #4
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	4619      	mov	r1, r3
 8001b56:	480f      	ldr	r0, [pc, #60]	; (8001b94 <HAL_I2C_MspInit+0x13c>)
 8001b58:	f000 fe52 	bl	8002800 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001b66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
}
 8001b78:	bf00      	nop
 8001b7a:	3730      	adds	r7, #48	; 0x30
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40005400 	.word	0x40005400
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	40005c00 	.word	0x40005c00
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020000 	.word	0x40020000

08001b98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1f      	ldr	r2, [pc, #124]	; (8001c24 <HAL_TIM_Base_MspInit+0x8c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d10e      	bne.n	8001bc8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <HAL_TIM_Base_MspInit+0x90>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <HAL_TIM_Base_MspInit+0x90>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bba:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <HAL_TIM_Base_MspInit+0x90>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001bc6:	e026      	b.n	8001c16 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <HAL_TIM_Base_MspInit+0x94>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d10e      	bne.n	8001bf0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <HAL_TIM_Base_MspInit+0x90>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <HAL_TIM_Base_MspInit+0x90>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_TIM_Base_MspInit+0x90>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
}
 8001bee:	e012      	b.n	8001c16 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0e      	ldr	r2, [pc, #56]	; (8001c30 <HAL_TIM_Base_MspInit+0x98>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d10d      	bne.n	8001c16 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_TIM_Base_MspInit+0x90>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <HAL_TIM_Base_MspInit+0x90>)
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <HAL_TIM_Base_MspInit+0x90>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
}
 8001c16:	bf00      	nop
 8001c18:	371c      	adds	r7, #28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40010000 	.word	0x40010000
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40000400 	.word	0x40000400
 8001c30:	40000800 	.word	0x40000800

08001c34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <HAL_TIM_MspPostInit+0xb0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d11e      	bne.n	8001c94 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <HAL_TIM_MspPostInit+0xb4>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a22      	ldr	r2, [pc, #136]	; (8001ce8 <HAL_TIM_MspPostInit+0xb4>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <HAL_TIM_MspPostInit+0xb4>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c72:	2340      	movs	r3, #64	; 0x40
 8001c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c82:	2302      	movs	r3, #2
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4817      	ldr	r0, [pc, #92]	; (8001cec <HAL_TIM_MspPostInit+0xb8>)
 8001c8e:	f000 fdb7 	bl	8002800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c92:	e022      	b.n	8001cda <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a15      	ldr	r2, [pc, #84]	; (8001cf0 <HAL_TIM_MspPostInit+0xbc>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d11d      	bne.n	8001cda <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <HAL_TIM_MspPostInit+0xb4>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <HAL_TIM_MspPostInit+0xb4>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <HAL_TIM_MspPostInit+0xb4>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4807      	ldr	r0, [pc, #28]	; (8001cf4 <HAL_TIM_MspPostInit+0xc0>)
 8001cd6:	f000 fd93 	bl	8002800 <HAL_GPIO_Init>
}
 8001cda:	bf00      	nop
 8001cdc:	3728      	adds	r7, #40	; 0x28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40000400 	.word	0x40000400
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40020800 	.word	0x40020800
 8001cf0:	40000800 	.word	0x40000800
 8001cf4:	40020400 	.word	0x40020400

08001cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08c      	sub	sp, #48	; 0x30
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 031c 	add.w	r3, r7, #28
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a42      	ldr	r2, [pc, #264]	; (8001e20 <HAL_UART_MspInit+0x128>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d12c      	bne.n	8001d74 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
 8001d1e:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <HAL_UART_MspInit+0x12c>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a40      	ldr	r2, [pc, #256]	; (8001e24 <HAL_UART_MspInit+0x12c>)
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <HAL_UART_MspInit+0x12c>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	61bb      	str	r3, [r7, #24]
 8001d34:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	4b3a      	ldr	r3, [pc, #232]	; (8001e24 <HAL_UART_MspInit+0x12c>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a39      	ldr	r2, [pc, #228]	; (8001e24 <HAL_UART_MspInit+0x12c>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b37      	ldr	r3, [pc, #220]	; (8001e24 <HAL_UART_MspInit+0x12c>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d52:	230c      	movs	r3, #12
 8001d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d62:	2307      	movs	r3, #7
 8001d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d66:	f107 031c 	add.w	r3, r7, #28
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	482e      	ldr	r0, [pc, #184]	; (8001e28 <HAL_UART_MspInit+0x130>)
 8001d6e:	f000 fd47 	bl	8002800 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d72:	e050      	b.n	8001e16 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a2c      	ldr	r2, [pc, #176]	; (8001e2c <HAL_UART_MspInit+0x134>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d14b      	bne.n	8001e16 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <HAL_UART_MspInit+0x12c>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	4a27      	ldr	r2, [pc, #156]	; (8001e24 <HAL_UART_MspInit+0x12c>)
 8001d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8e:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <HAL_UART_MspInit+0x12c>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <HAL_UART_MspInit+0x12c>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a20      	ldr	r2, [pc, #128]	; (8001e24 <HAL_UART_MspInit+0x12c>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_UART_MspInit+0x12c>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_UART_MspInit+0x12c>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a19      	ldr	r2, [pc, #100]	; (8001e24 <HAL_UART_MspInit+0x12c>)
 8001dc0:	f043 0308 	orr.w	r3, r3, #8
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_UART_MspInit+0x12c>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001dd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001de4:	2307      	movs	r3, #7
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	4619      	mov	r1, r3
 8001dee:	4810      	ldr	r0, [pc, #64]	; (8001e30 <HAL_UART_MspInit+0x138>)
 8001df0:	f000 fd06 	bl	8002800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e02:	2303      	movs	r3, #3
 8001e04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e06:	2307      	movs	r3, #7
 8001e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e0a:	f107 031c 	add.w	r3, r7, #28
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4808      	ldr	r0, [pc, #32]	; (8001e34 <HAL_UART_MspInit+0x13c>)
 8001e12:	f000 fcf5 	bl	8002800 <HAL_GPIO_Init>
}
 8001e16:	bf00      	nop
 8001e18:	3730      	adds	r7, #48	; 0x30
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40004400 	.word	0x40004400
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	40004800 	.word	0x40004800
 8001e30:	40020400 	.word	0x40020400
 8001e34:	40020c00 	.word	0x40020c00

08001e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <HardFault_Handler+0x4>

08001e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <MemManage_Handler+0x4>

08001e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e56:	e7fe      	b.n	8001e56 <BusFault_Handler+0x4>

08001e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <UsageFault_Handler+0x4>

08001e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e8c:	f000 f8c0 	bl	8002010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <_sbrk+0x50>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <_sbrk+0x16>
		heap_end = &end;
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <_sbrk+0x50>)
 8001ea6:	4a10      	ldr	r2, [pc, #64]	; (8001ee8 <_sbrk+0x54>)
 8001ea8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <_sbrk+0x50>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <_sbrk+0x50>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	466a      	mov	r2, sp
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d907      	bls.n	8001ece <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ebe:	f002 fe7d 	bl	8004bbc <__errno>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	230c      	movs	r3, #12
 8001ec6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ecc:	e006      	b.n	8001edc <_sbrk+0x48>
	}

	heap_end += incr;
 8001ece:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <_sbrk+0x50>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	4a03      	ldr	r2, [pc, #12]	; (8001ee4 <_sbrk+0x50>)
 8001ed8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001eda:	68fb      	ldr	r3, [r7, #12]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	2000008c 	.word	0x2000008c
 8001ee8:	20000338 	.word	0x20000338

08001eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <SystemInit+0x28>)
 8001ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef6:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <SystemInit+0x28>)
 8001ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <SystemInit+0x28>)
 8001f02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f06:	609a      	str	r2, [r3, #8]
#endif
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f1e:	e003      	b.n	8001f28 <LoopCopyDataInit>

08001f20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f26:	3104      	adds	r1, #4

08001f28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f28:	480b      	ldr	r0, [pc, #44]	; (8001f58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f30:	d3f6      	bcc.n	8001f20 <CopyDataInit>
  ldr  r2, =_sbss
 8001f32:	4a0b      	ldr	r2, [pc, #44]	; (8001f60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f34:	e002      	b.n	8001f3c <LoopFillZerobss>

08001f36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f38:	f842 3b04 	str.w	r3, [r2], #4

08001f3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f40:	d3f9      	bcc.n	8001f36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f42:	f7ff ffd3 	bl	8001eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f46:	f002 fe3f 	bl	8004bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f4a:	f7fe ff39 	bl	8000dc0 <main>
  bx  lr    
 8001f4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001f54:	080054c4 	.word	0x080054c4
  ldr  r0, =_sdata
 8001f58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f5c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001f60:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001f64:	20000334 	.word	0x20000334

08001f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f68:	e7fe      	b.n	8001f68 <ADC_IRQHandler>
	...

08001f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f70:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <HAL_Init+0x40>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0d      	ldr	r2, [pc, #52]	; (8001fac <HAL_Init+0x40>)
 8001f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_Init+0x40>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <HAL_Init+0x40>)
 8001f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_Init+0x40>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a07      	ldr	r2, [pc, #28]	; (8001fac <HAL_Init+0x40>)
 8001f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f94:	2003      	movs	r0, #3
 8001f96:	f000 fb91 	bl	80026bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f000 f808 	bl	8001fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa0:	f7ff fc7a 	bl	8001898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023c00 	.word	0x40023c00

08001fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb8:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_InitTick+0x54>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_InitTick+0x58>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fb9b 	bl	800270a <HAL_SYSTICK_Config>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00e      	b.n	8001ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b0f      	cmp	r3, #15
 8001fe2:	d80a      	bhi.n	8001ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fec:	f000 fb71 	bl	80026d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff0:	4a06      	ldr	r2, [pc, #24]	; (800200c <HAL_InitTick+0x5c>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e000      	b.n	8001ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000000 	.word	0x20000000
 8002008:	20000008 	.word	0x20000008
 800200c:	20000004 	.word	0x20000004

08002010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_IncTick+0x20>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_IncTick+0x24>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4413      	add	r3, r2
 8002020:	4a04      	ldr	r2, [pc, #16]	; (8002034 <HAL_IncTick+0x24>)
 8002022:	6013      	str	r3, [r2, #0]
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000008 	.word	0x20000008
 8002034:	2000032c 	.word	0x2000032c

08002038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return uwTick;
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_GetTick+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	2000032c 	.word	0x2000032c

08002050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002058:	f7ff ffee 	bl	8002038 <HAL_GetTick>
 800205c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002068:	d005      	beq.n	8002076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_Delay+0x40>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002076:	bf00      	nop
 8002078:	f7ff ffde 	bl	8002038 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	429a      	cmp	r2, r3
 8002086:	d8f7      	bhi.n	8002078 <HAL_Delay+0x28>
  {
  }
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000008 	.word	0x20000008

08002094 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e033      	b.n	8002112 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d109      	bne.n	80020c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fc18 	bl	80018e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d118      	bne.n	8002104 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020da:	f023 0302 	bic.w	r3, r3, #2
 80020de:	f043 0202 	orr.w	r2, r3, #2
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f93a 	bl	8002360 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f023 0303 	bic.w	r3, r3, #3
 80020fa:	f043 0201 	orr.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
 8002102:	e001      	b.n	8002108 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002110:	7bfb      	ldrb	r3, [r7, #15]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x1c>
 8002134:	2302      	movs	r3, #2
 8002136:	e105      	b.n	8002344 <HAL_ADC_ConfigChannel+0x228>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b09      	cmp	r3, #9
 8002146:	d925      	bls.n	8002194 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68d9      	ldr	r1, [r3, #12]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	b29b      	uxth	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	3b1e      	subs	r3, #30
 800215e:	2207      	movs	r2, #7
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43da      	mvns	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	400a      	ands	r2, r1
 800216c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68d9      	ldr	r1, [r3, #12]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	b29b      	uxth	r3, r3
 800217e:	4618      	mov	r0, r3
 8002180:	4603      	mov	r3, r0
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4403      	add	r3, r0
 8002186:	3b1e      	subs	r3, #30
 8002188:	409a      	lsls	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	e022      	b.n	80021da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6919      	ldr	r1, [r3, #16]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	4613      	mov	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4413      	add	r3, r2
 80021a8:	2207      	movs	r2, #7
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	400a      	ands	r2, r1
 80021b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6919      	ldr	r1, [r3, #16]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	4618      	mov	r0, r3
 80021ca:	4603      	mov	r3, r0
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4403      	add	r3, r0
 80021d0:	409a      	lsls	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b06      	cmp	r3, #6
 80021e0:	d824      	bhi.n	800222c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	3b05      	subs	r3, #5
 80021f4:	221f      	movs	r2, #31
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43da      	mvns	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	400a      	ands	r2, r1
 8002202:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	4618      	mov	r0, r3
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	3b05      	subs	r3, #5
 800221e:	fa00 f203 	lsl.w	r2, r0, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	635a      	str	r2, [r3, #52]	; 0x34
 800222a:	e04c      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b0c      	cmp	r3, #12
 8002232:	d824      	bhi.n	800227e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	3b23      	subs	r3, #35	; 0x23
 8002246:	221f      	movs	r2, #31
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43da      	mvns	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	400a      	ands	r2, r1
 8002254:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	4618      	mov	r0, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	3b23      	subs	r3, #35	; 0x23
 8002270:	fa00 f203 	lsl.w	r2, r0, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	631a      	str	r2, [r3, #48]	; 0x30
 800227c:	e023      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	3b41      	subs	r3, #65	; 0x41
 8002290:	221f      	movs	r2, #31
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43da      	mvns	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	400a      	ands	r2, r1
 800229e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	4618      	mov	r0, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	3b41      	subs	r3, #65	; 0x41
 80022ba:	fa00 f203 	lsl.w	r2, r0, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022c6:	4b22      	ldr	r3, [pc, #136]	; (8002350 <HAL_ADC_ConfigChannel+0x234>)
 80022c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a21      	ldr	r2, [pc, #132]	; (8002354 <HAL_ADC_ConfigChannel+0x238>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d109      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x1cc>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b12      	cmp	r3, #18
 80022da:	d105      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a19      	ldr	r2, [pc, #100]	; (8002354 <HAL_ADC_ConfigChannel+0x238>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d123      	bne.n	800233a <HAL_ADC_ConfigChannel+0x21e>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b10      	cmp	r3, #16
 80022f8:	d003      	beq.n	8002302 <HAL_ADC_ConfigChannel+0x1e6>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b11      	cmp	r3, #17
 8002300:	d11b      	bne.n	800233a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b10      	cmp	r3, #16
 8002314:	d111      	bne.n	800233a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002316:	4b10      	ldr	r3, [pc, #64]	; (8002358 <HAL_ADC_ConfigChannel+0x23c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a10      	ldr	r2, [pc, #64]	; (800235c <HAL_ADC_ConfigChannel+0x240>)
 800231c:	fba2 2303 	umull	r2, r3, r2, r3
 8002320:	0c9a      	lsrs	r2, r3, #18
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800232c:	e002      	b.n	8002334 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3b01      	subs	r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f9      	bne.n	800232e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	40012300 	.word	0x40012300
 8002354:	40012000 	.word	0x40012000
 8002358:	20000000 	.word	0x20000000
 800235c:	431bde83 	.word	0x431bde83

08002360 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002368:	4b79      	ldr	r3, [pc, #484]	; (8002550 <ADC_Init+0x1f0>)
 800236a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	431a      	orrs	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	021a      	lsls	r2, r3, #8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6859      	ldr	r1, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6899      	ldr	r1, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	4a58      	ldr	r2, [pc, #352]	; (8002554 <ADC_Init+0x1f4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d022      	beq.n	800243e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002406:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6899      	ldr	r1, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002428:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6899      	ldr	r1, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	e00f      	b.n	800245e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800244c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800245c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0202 	bic.w	r2, r2, #2
 800246c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6899      	ldr	r1, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7e1b      	ldrb	r3, [r3, #24]
 8002478:	005a      	lsls	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01b      	beq.n	80024c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800249a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6859      	ldr	r1, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	3b01      	subs	r3, #1
 80024b8:	035a      	lsls	r2, r3, #13
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	e007      	b.n	80024d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	051a      	lsls	r2, r3, #20
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002508:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6899      	ldr	r1, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002516:	025a      	lsls	r2, r3, #9
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800252e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6899      	ldr	r1, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	029a      	lsls	r2, r3, #10
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	609a      	str	r2, [r3, #8]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	40012300 	.word	0x40012300
 8002554:	0f000001 	.word	0x0f000001

08002558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <__NVIC_SetPriorityGrouping+0x44>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002574:	4013      	ands	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800258a:	4a04      	ldr	r2, [pc, #16]	; (800259c <__NVIC_SetPriorityGrouping+0x44>)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	60d3      	str	r3, [r2, #12]
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <__NVIC_GetPriorityGrouping+0x18>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	0a1b      	lsrs	r3, r3, #8
 80025aa:	f003 0307 	and.w	r3, r3, #7
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	6039      	str	r1, [r7, #0]
 80025c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	db0a      	blt.n	80025e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	490c      	ldr	r1, [pc, #48]	; (8002608 <__NVIC_SetPriority+0x4c>)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	0112      	lsls	r2, r2, #4
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	440b      	add	r3, r1
 80025e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e4:	e00a      	b.n	80025fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4908      	ldr	r1, [pc, #32]	; (800260c <__NVIC_SetPriority+0x50>)
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	3b04      	subs	r3, #4
 80025f4:	0112      	lsls	r2, r2, #4
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	440b      	add	r3, r1
 80025fa:	761a      	strb	r2, [r3, #24]
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000e100 	.word	0xe000e100
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f1c3 0307 	rsb	r3, r3, #7
 800262a:	2b04      	cmp	r3, #4
 800262c:	bf28      	it	cs
 800262e:	2304      	movcs	r3, #4
 8002630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3304      	adds	r3, #4
 8002636:	2b06      	cmp	r3, #6
 8002638:	d902      	bls.n	8002640 <NVIC_EncodePriority+0x30>
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3b03      	subs	r3, #3
 800263e:	e000      	b.n	8002642 <NVIC_EncodePriority+0x32>
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43da      	mvns	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	401a      	ands	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002658:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa01 f303 	lsl.w	r3, r1, r3
 8002662:	43d9      	mvns	r1, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002668:	4313      	orrs	r3, r2
         );
}
 800266a:	4618      	mov	r0, r3
 800266c:	3724      	adds	r7, #36	; 0x24
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3b01      	subs	r3, #1
 8002684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002688:	d301      	bcc.n	800268e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268a:	2301      	movs	r3, #1
 800268c:	e00f      	b.n	80026ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800268e:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <SysTick_Config+0x40>)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3b01      	subs	r3, #1
 8002694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002696:	210f      	movs	r1, #15
 8002698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800269c:	f7ff ff8e 	bl	80025bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <SysTick_Config+0x40>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026a6:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <SysTick_Config+0x40>)
 80026a8:	2207      	movs	r2, #7
 80026aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	e000e010 	.word	0xe000e010

080026bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff ff47 	bl	8002558 <__NVIC_SetPriorityGrouping>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b086      	sub	sp, #24
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4603      	mov	r3, r0
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e4:	f7ff ff5c 	bl	80025a0 <__NVIC_GetPriorityGrouping>
 80026e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	6978      	ldr	r0, [r7, #20]
 80026f0:	f7ff ff8e 	bl	8002610 <NVIC_EncodePriority>
 80026f4:	4602      	mov	r2, r0
 80026f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ff5d 	bl	80025bc <__NVIC_SetPriority>
}
 8002702:	bf00      	nop
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff ffb0 	bl	8002678 <SysTick_Config>
 8002718:	4603      	mov	r3, r0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e014      	b.n	800275e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	791b      	ldrb	r3, [r3, #4]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d105      	bne.n	800274a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff f943 	bl	80019d0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2202      	movs	r2, #2
 800274e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002766:	b480      	push	{r7}
 8002768:	b087      	sub	sp, #28
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	795b      	ldrb	r3, [r3, #5]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_DAC_ConfigChannel+0x20>
 8002782:	2302      	movs	r3, #2
 8002784:	e036      	b.n	80027f4 <HAL_DAC_ConfigChannel+0x8e>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2202      	movs	r2, #2
 8002790:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800279a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4013      	ands	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6819      	ldr	r1, [r3, #0]
 80027d4:	22c0      	movs	r2, #192	; 0xc0
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43da      	mvns	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	400a      	ands	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	371c      	adds	r7, #28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	; 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	e16b      	b.n	8002af4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800281c:	2201      	movs	r2, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	429a      	cmp	r2, r3
 8002836:	f040 815a 	bne.w	8002aee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d00b      	beq.n	800285a <HAL_GPIO_Init+0x5a>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d007      	beq.n	800285a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800284e:	2b11      	cmp	r3, #17
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b12      	cmp	r3, #18
 8002858:	d130      	bne.n	80028bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	2203      	movs	r2, #3
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002890:	2201      	movs	r2, #1
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 0201 	and.w	r2, r3, #1
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0xfc>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b12      	cmp	r3, #18
 80028fa:	d123      	bne.n	8002944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	08da      	lsrs	r2, r3, #3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3208      	adds	r2, #8
 8002904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	220f      	movs	r2, #15
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	08da      	lsrs	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3208      	adds	r2, #8
 800293e:	69b9      	ldr	r1, [r7, #24]
 8002940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0203 	and.w	r2, r3, #3
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80b4 	beq.w	8002aee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	4b5f      	ldr	r3, [pc, #380]	; (8002b08 <HAL_GPIO_Init+0x308>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	4a5e      	ldr	r2, [pc, #376]	; (8002b08 <HAL_GPIO_Init+0x308>)
 8002990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002994:	6453      	str	r3, [r2, #68]	; 0x44
 8002996:	4b5c      	ldr	r3, [pc, #368]	; (8002b08 <HAL_GPIO_Init+0x308>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029a2:	4a5a      	ldr	r2, [pc, #360]	; (8002b0c <HAL_GPIO_Init+0x30c>)
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	089b      	lsrs	r3, r3, #2
 80029a8:	3302      	adds	r3, #2
 80029aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	220f      	movs	r2, #15
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a51      	ldr	r2, [pc, #324]	; (8002b10 <HAL_GPIO_Init+0x310>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d02b      	beq.n	8002a26 <HAL_GPIO_Init+0x226>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a50      	ldr	r2, [pc, #320]	; (8002b14 <HAL_GPIO_Init+0x314>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d025      	beq.n	8002a22 <HAL_GPIO_Init+0x222>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a4f      	ldr	r2, [pc, #316]	; (8002b18 <HAL_GPIO_Init+0x318>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d01f      	beq.n	8002a1e <HAL_GPIO_Init+0x21e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4e      	ldr	r2, [pc, #312]	; (8002b1c <HAL_GPIO_Init+0x31c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d019      	beq.n	8002a1a <HAL_GPIO_Init+0x21a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4d      	ldr	r2, [pc, #308]	; (8002b20 <HAL_GPIO_Init+0x320>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d013      	beq.n	8002a16 <HAL_GPIO_Init+0x216>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4c      	ldr	r2, [pc, #304]	; (8002b24 <HAL_GPIO_Init+0x324>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00d      	beq.n	8002a12 <HAL_GPIO_Init+0x212>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a4b      	ldr	r2, [pc, #300]	; (8002b28 <HAL_GPIO_Init+0x328>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d007      	beq.n	8002a0e <HAL_GPIO_Init+0x20e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a4a      	ldr	r2, [pc, #296]	; (8002b2c <HAL_GPIO_Init+0x32c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d101      	bne.n	8002a0a <HAL_GPIO_Init+0x20a>
 8002a06:	2307      	movs	r3, #7
 8002a08:	e00e      	b.n	8002a28 <HAL_GPIO_Init+0x228>
 8002a0a:	2308      	movs	r3, #8
 8002a0c:	e00c      	b.n	8002a28 <HAL_GPIO_Init+0x228>
 8002a0e:	2306      	movs	r3, #6
 8002a10:	e00a      	b.n	8002a28 <HAL_GPIO_Init+0x228>
 8002a12:	2305      	movs	r3, #5
 8002a14:	e008      	b.n	8002a28 <HAL_GPIO_Init+0x228>
 8002a16:	2304      	movs	r3, #4
 8002a18:	e006      	b.n	8002a28 <HAL_GPIO_Init+0x228>
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e004      	b.n	8002a28 <HAL_GPIO_Init+0x228>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e002      	b.n	8002a28 <HAL_GPIO_Init+0x228>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <HAL_GPIO_Init+0x228>
 8002a26:	2300      	movs	r3, #0
 8002a28:	69fa      	ldr	r2, [r7, #28]
 8002a2a:	f002 0203 	and.w	r2, r2, #3
 8002a2e:	0092      	lsls	r2, r2, #2
 8002a30:	4093      	lsls	r3, r2
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a38:	4934      	ldr	r1, [pc, #208]	; (8002b0c <HAL_GPIO_Init+0x30c>)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	3302      	adds	r3, #2
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a46:	4b3a      	ldr	r3, [pc, #232]	; (8002b30 <HAL_GPIO_Init+0x330>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a6a:	4a31      	ldr	r2, [pc, #196]	; (8002b30 <HAL_GPIO_Init+0x330>)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a70:	4b2f      	ldr	r3, [pc, #188]	; (8002b30 <HAL_GPIO_Init+0x330>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a94:	4a26      	ldr	r2, [pc, #152]	; (8002b30 <HAL_GPIO_Init+0x330>)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a9a:	4b25      	ldr	r3, [pc, #148]	; (8002b30 <HAL_GPIO_Init+0x330>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002abe:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <HAL_GPIO_Init+0x330>)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <HAL_GPIO_Init+0x330>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ae8:	4a11      	ldr	r2, [pc, #68]	; (8002b30 <HAL_GPIO_Init+0x330>)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3301      	adds	r3, #1
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	2b0f      	cmp	r3, #15
 8002af8:	f67f ae90 	bls.w	800281c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002afc:	bf00      	nop
 8002afe:	3724      	adds	r7, #36	; 0x24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40013800 	.word	0x40013800
 8002b10:	40020000 	.word	0x40020000
 8002b14:	40020400 	.word	0x40020400
 8002b18:	40020800 	.word	0x40020800
 8002b1c:	40020c00 	.word	0x40020c00
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40021400 	.word	0x40021400
 8002b28:	40021800 	.word	0x40021800
 8002b2c:	40021c00 	.word	0x40021c00
 8002b30:	40013c00 	.word	0x40013c00

08002b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
 8002b50:	e001      	b.n	8002b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b52:	2300      	movs	r3, #0
 8002b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	807b      	strh	r3, [r7, #2]
 8002b70:	4613      	mov	r3, r2
 8002b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b74:	787b      	ldrb	r3, [r7, #1]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b7a:	887a      	ldrh	r2, [r7, #2]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b80:	e003      	b.n	8002b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b82:	887b      	ldrh	r3, [r7, #2]
 8002b84:	041a      	lsls	r2, r3, #16
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	619a      	str	r2, [r3, #24]
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e11f      	b.n	8002dea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fe ff4a 	bl	8001a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2224      	movs	r2, #36	; 0x24
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0201 	bic.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bfc:	f000 fd3e 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 8002c00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4a7b      	ldr	r2, [pc, #492]	; (8002df4 <HAL_I2C_Init+0x25c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d807      	bhi.n	8002c1c <HAL_I2C_Init+0x84>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a7a      	ldr	r2, [pc, #488]	; (8002df8 <HAL_I2C_Init+0x260>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	bf94      	ite	ls
 8002c14:	2301      	movls	r3, #1
 8002c16:	2300      	movhi	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e006      	b.n	8002c2a <HAL_I2C_Init+0x92>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a77      	ldr	r2, [pc, #476]	; (8002dfc <HAL_I2C_Init+0x264>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	bf94      	ite	ls
 8002c24:	2301      	movls	r3, #1
 8002c26:	2300      	movhi	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e0db      	b.n	8002dea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4a72      	ldr	r2, [pc, #456]	; (8002e00 <HAL_I2C_Init+0x268>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	0c9b      	lsrs	r3, r3, #18
 8002c3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	4a64      	ldr	r2, [pc, #400]	; (8002df4 <HAL_I2C_Init+0x25c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d802      	bhi.n	8002c6c <HAL_I2C_Init+0xd4>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	e009      	b.n	8002c80 <HAL_I2C_Init+0xe8>
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	4a63      	ldr	r2, [pc, #396]	; (8002e04 <HAL_I2C_Init+0x26c>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	099b      	lsrs	r3, r3, #6
 8002c7e:	3301      	adds	r3, #1
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	430b      	orrs	r3, r1
 8002c86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4956      	ldr	r1, [pc, #344]	; (8002df4 <HAL_I2C_Init+0x25c>)
 8002c9c:	428b      	cmp	r3, r1
 8002c9e:	d80d      	bhi.n	8002cbc <HAL_I2C_Init+0x124>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1e59      	subs	r1, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	bf38      	it	cc
 8002cb8:	2304      	movcc	r3, #4
 8002cba:	e04f      	b.n	8002d5c <HAL_I2C_Init+0x1c4>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d111      	bne.n	8002ce8 <HAL_I2C_Init+0x150>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	1e58      	subs	r0, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6859      	ldr	r1, [r3, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	440b      	add	r3, r1
 8002cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	bf0c      	ite	eq
 8002ce0:	2301      	moveq	r3, #1
 8002ce2:	2300      	movne	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	e012      	b.n	8002d0e <HAL_I2C_Init+0x176>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	1e58      	subs	r0, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6859      	ldr	r1, [r3, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	0099      	lsls	r1, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bf0c      	ite	eq
 8002d08:	2301      	moveq	r3, #1
 8002d0a:	2300      	movne	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_I2C_Init+0x17e>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e022      	b.n	8002d5c <HAL_I2C_Init+0x1c4>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10e      	bne.n	8002d3c <HAL_I2C_Init+0x1a4>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1e58      	subs	r0, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6859      	ldr	r1, [r3, #4]
 8002d26:	460b      	mov	r3, r1
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	440b      	add	r3, r1
 8002d2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d30:	3301      	adds	r3, #1
 8002d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d3a:	e00f      	b.n	8002d5c <HAL_I2C_Init+0x1c4>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1e58      	subs	r0, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	0099      	lsls	r1, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	6809      	ldr	r1, [r1, #0]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69da      	ldr	r2, [r3, #28]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6911      	ldr	r1, [r2, #16]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	68d2      	ldr	r2, [r2, #12]
 8002d96:	4311      	orrs	r1, r2
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	000186a0 	.word	0x000186a0
 8002df8:	001e847f 	.word	0x001e847f
 8002dfc:	003d08ff 	.word	0x003d08ff
 8002e00:	431bde83 	.word	0x431bde83
 8002e04:	10624dd3 	.word	0x10624dd3

08002e08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e25b      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d075      	beq.n	8002f12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e26:	4ba3      	ldr	r3, [pc, #652]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d00c      	beq.n	8002e4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e32:	4ba0      	ldr	r3, [pc, #640]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d112      	bne.n	8002e64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e3e:	4b9d      	ldr	r3, [pc, #628]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e4a:	d10b      	bne.n	8002e64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	4b99      	ldr	r3, [pc, #612]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d05b      	beq.n	8002f10 <HAL_RCC_OscConfig+0x108>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d157      	bne.n	8002f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e236      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6c:	d106      	bne.n	8002e7c <HAL_RCC_OscConfig+0x74>
 8002e6e:	4b91      	ldr	r3, [pc, #580]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a90      	ldr	r2, [pc, #576]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	e01d      	b.n	8002eb8 <HAL_RCC_OscConfig+0xb0>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x98>
 8002e86:	4b8b      	ldr	r3, [pc, #556]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a8a      	ldr	r2, [pc, #552]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	4b88      	ldr	r3, [pc, #544]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a87      	ldr	r2, [pc, #540]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	e00b      	b.n	8002eb8 <HAL_RCC_OscConfig+0xb0>
 8002ea0:	4b84      	ldr	r3, [pc, #528]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a83      	ldr	r2, [pc, #524]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eaa:	6013      	str	r3, [r2, #0]
 8002eac:	4b81      	ldr	r3, [pc, #516]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a80      	ldr	r2, [pc, #512]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d013      	beq.n	8002ee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7ff f8ba 	bl	8002038 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec8:	f7ff f8b6 	bl	8002038 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	; 0x64
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e1fb      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	4b76      	ldr	r3, [pc, #472]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0xc0>
 8002ee6:	e014      	b.n	8002f12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7ff f8a6 	bl	8002038 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef0:	f7ff f8a2 	bl	8002038 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b64      	cmp	r3, #100	; 0x64
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e1e7      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f02:	4b6c      	ldr	r3, [pc, #432]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0xe8>
 8002f0e:	e000      	b.n	8002f12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d063      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f1e:	4b65      	ldr	r3, [pc, #404]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00b      	beq.n	8002f42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f2a:	4b62      	ldr	r3, [pc, #392]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d11c      	bne.n	8002f70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f36:	4b5f      	ldr	r3, [pc, #380]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d116      	bne.n	8002f70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f42:	4b5c      	ldr	r3, [pc, #368]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d005      	beq.n	8002f5a <HAL_RCC_OscConfig+0x152>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d001      	beq.n	8002f5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e1bb      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5a:	4b56      	ldr	r3, [pc, #344]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4952      	ldr	r1, [pc, #328]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6e:	e03a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d020      	beq.n	8002fba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f78:	4b4f      	ldr	r3, [pc, #316]	; (80030b8 <HAL_RCC_OscConfig+0x2b0>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7e:	f7ff f85b 	bl	8002038 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f86:	f7ff f857 	bl	8002038 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e19c      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f98:	4b46      	ldr	r3, [pc, #280]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa4:	4b43      	ldr	r3, [pc, #268]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4940      	ldr	r1, [pc, #256]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]
 8002fb8:	e015      	b.n	8002fe6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fba:	4b3f      	ldr	r3, [pc, #252]	; (80030b8 <HAL_RCC_OscConfig+0x2b0>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7ff f83a 	bl	8002038 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fc8:	f7ff f836 	bl	8002038 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e17b      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fda:	4b36      	ldr	r3, [pc, #216]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d030      	beq.n	8003054 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d016      	beq.n	8003028 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ffa:	4b30      	ldr	r3, [pc, #192]	; (80030bc <HAL_RCC_OscConfig+0x2b4>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003000:	f7ff f81a 	bl	8002038 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003008:	f7ff f816 	bl	8002038 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e15b      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301a:	4b26      	ldr	r3, [pc, #152]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 800301c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x200>
 8003026:	e015      	b.n	8003054 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003028:	4b24      	ldr	r3, [pc, #144]	; (80030bc <HAL_RCC_OscConfig+0x2b4>)
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302e:	f7ff f803 	bl	8002038 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003036:	f7fe ffff 	bl	8002038 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e144      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003048:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 800304a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f0      	bne.n	8003036 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80a0 	beq.w	80031a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003062:	2300      	movs	r3, #0
 8003064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003066:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10f      	bne.n	8003092 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	4a0e      	ldr	r2, [pc, #56]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 800307c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003080:	6413      	str	r3, [r2, #64]	; 0x40
 8003082:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800308e:	2301      	movs	r3, #1
 8003090:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003092:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_OscConfig+0x2b8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309a:	2b00      	cmp	r3, #0
 800309c:	d121      	bne.n	80030e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800309e:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <HAL_RCC_OscConfig+0x2b8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a07      	ldr	r2, [pc, #28]	; (80030c0 <HAL_RCC_OscConfig+0x2b8>)
 80030a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030aa:	f7fe ffc5 	bl	8002038 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b0:	e011      	b.n	80030d6 <HAL_RCC_OscConfig+0x2ce>
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	42470000 	.word	0x42470000
 80030bc:	42470e80 	.word	0x42470e80
 80030c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c4:	f7fe ffb8 	bl	8002038 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e0fd      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d6:	4b81      	ldr	r3, [pc, #516]	; (80032dc <HAL_RCC_OscConfig+0x4d4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d106      	bne.n	80030f8 <HAL_RCC_OscConfig+0x2f0>
 80030ea:	4b7d      	ldr	r3, [pc, #500]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	4a7c      	ldr	r2, [pc, #496]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6713      	str	r3, [r2, #112]	; 0x70
 80030f6:	e01c      	b.n	8003132 <HAL_RCC_OscConfig+0x32a>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d10c      	bne.n	800311a <HAL_RCC_OscConfig+0x312>
 8003100:	4b77      	ldr	r3, [pc, #476]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	4a76      	ldr	r2, [pc, #472]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003106:	f043 0304 	orr.w	r3, r3, #4
 800310a:	6713      	str	r3, [r2, #112]	; 0x70
 800310c:	4b74      	ldr	r3, [pc, #464]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	4a73      	ldr	r2, [pc, #460]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6713      	str	r3, [r2, #112]	; 0x70
 8003118:	e00b      	b.n	8003132 <HAL_RCC_OscConfig+0x32a>
 800311a:	4b71      	ldr	r3, [pc, #452]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a70      	ldr	r2, [pc, #448]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	6713      	str	r3, [r2, #112]	; 0x70
 8003126:	4b6e      	ldr	r3, [pc, #440]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	4a6d      	ldr	r2, [pc, #436]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 800312c:	f023 0304 	bic.w	r3, r3, #4
 8003130:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d015      	beq.n	8003166 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313a:	f7fe ff7d 	bl	8002038 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003140:	e00a      	b.n	8003158 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fe ff79 	bl	8002038 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e0bc      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003158:	4b61      	ldr	r3, [pc, #388]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ee      	beq.n	8003142 <HAL_RCC_OscConfig+0x33a>
 8003164:	e014      	b.n	8003190 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003166:	f7fe ff67 	bl	8002038 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800316e:	f7fe ff63 	bl	8002038 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f241 3288 	movw	r2, #5000	; 0x1388
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e0a6      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003184:	4b56      	ldr	r3, [pc, #344]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ee      	bne.n	800316e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d105      	bne.n	80031a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003196:	4b52      	ldr	r3, [pc, #328]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	4a51      	ldr	r2, [pc, #324]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 800319c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8092 	beq.w	80032d0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ac:	4b4c      	ldr	r3, [pc, #304]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d05c      	beq.n	8003272 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d141      	bne.n	8003244 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c0:	4b48      	ldr	r3, [pc, #288]	; (80032e4 <HAL_RCC_OscConfig+0x4dc>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fe ff37 	bl	8002038 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ce:	f7fe ff33 	bl	8002038 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e078      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e0:	4b3f      	ldr	r3, [pc, #252]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f0      	bne.n	80031ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	019b      	lsls	r3, r3, #6
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	085b      	lsrs	r3, r3, #1
 8003204:	3b01      	subs	r3, #1
 8003206:	041b      	lsls	r3, r3, #16
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	061b      	lsls	r3, r3, #24
 8003210:	4933      	ldr	r1, [pc, #204]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003212:	4313      	orrs	r3, r2
 8003214:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003216:	4b33      	ldr	r3, [pc, #204]	; (80032e4 <HAL_RCC_OscConfig+0x4dc>)
 8003218:	2201      	movs	r2, #1
 800321a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fe ff0c 	bl	8002038 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003224:	f7fe ff08 	bl	8002038 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e04d      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003236:	4b2a      	ldr	r3, [pc, #168]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x41c>
 8003242:	e045      	b.n	80032d0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003244:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <HAL_RCC_OscConfig+0x4dc>)
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324a:	f7fe fef5 	bl	8002038 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003252:	f7fe fef1 	bl	8002038 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e036      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003264:	4b1e      	ldr	r3, [pc, #120]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1f0      	bne.n	8003252 <HAL_RCC_OscConfig+0x44a>
 8003270:	e02e      	b.n	80032d0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e029      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800327e:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	429a      	cmp	r2, r3
 8003290:	d11c      	bne.n	80032cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d115      	bne.n	80032cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032a6:	4013      	ands	r3, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d10d      	bne.n	80032cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d106      	bne.n	80032cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40007000 	.word	0x40007000
 80032e0:	40023800 	.word	0x40023800
 80032e4:	42470060 	.word	0x42470060

080032e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0cc      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032fc:	4b68      	ldr	r3, [pc, #416]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d90c      	bls.n	8003324 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	4b65      	ldr	r3, [pc, #404]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b63      	ldr	r3, [pc, #396]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0b8      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d020      	beq.n	8003372 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800333c:	4b59      	ldr	r3, [pc, #356]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	4a58      	ldr	r2, [pc, #352]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003346:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003354:	4b53      	ldr	r3, [pc, #332]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4a52      	ldr	r2, [pc, #328]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800335e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003360:	4b50      	ldr	r3, [pc, #320]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	494d      	ldr	r1, [pc, #308]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d044      	beq.n	8003408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d107      	bne.n	8003396 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003386:	4b47      	ldr	r3, [pc, #284]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d119      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e07f      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d003      	beq.n	80033a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d107      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a6:	4b3f      	ldr	r3, [pc, #252]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e06f      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b6:	4b3b      	ldr	r3, [pc, #236]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e067      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033c6:	4b37      	ldr	r3, [pc, #220]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f023 0203 	bic.w	r2, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4934      	ldr	r1, [pc, #208]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033d8:	f7fe fe2e 	bl	8002038 <HAL_GetTick>
 80033dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e0:	f7fe fe2a 	bl	8002038 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e04f      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f6:	4b2b      	ldr	r3, [pc, #172]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 020c 	and.w	r2, r3, #12
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	429a      	cmp	r2, r3
 8003406:	d1eb      	bne.n	80033e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003408:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 030f 	and.w	r3, r3, #15
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d20c      	bcs.n	8003430 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	4b22      	ldr	r3, [pc, #136]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341e:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e032      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800343c:	4b19      	ldr	r3, [pc, #100]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4916      	ldr	r1, [pc, #88]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d009      	beq.n	800346e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800345a:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	490e      	ldr	r1, [pc, #56]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	4313      	orrs	r3, r2
 800346c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800346e:	f000 f821 	bl	80034b4 <HAL_RCC_GetSysClockFreq>
 8003472:	4601      	mov	r1, r0
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003480:	5cd3      	ldrb	r3, [r2, r3]
 8003482:	fa21 f303 	lsr.w	r3, r1, r3
 8003486:	4a09      	ldr	r2, [pc, #36]	; (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800348a:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe fd8e 	bl	8001fb0 <HAL_InitTick>

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40023c00 	.word	0x40023c00
 80034a4:	40023800 	.word	0x40023800
 80034a8:	08005468 	.word	0x08005468
 80034ac:	20000000 	.word	0x20000000
 80034b0:	20000004 	.word	0x20000004

080034b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	607b      	str	r3, [r7, #4]
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	2300      	movs	r3, #0
 80034c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034ca:	4b63      	ldr	r3, [pc, #396]	; (8003658 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d007      	beq.n	80034e6 <HAL_RCC_GetSysClockFreq+0x32>
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d008      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0x38>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f040 80b4 	bne.w	8003648 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034e0:	4b5e      	ldr	r3, [pc, #376]	; (800365c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80034e2:	60bb      	str	r3, [r7, #8]
       break;
 80034e4:	e0b3      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034e6:	4b5e      	ldr	r3, [pc, #376]	; (8003660 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80034e8:	60bb      	str	r3, [r7, #8]
      break;
 80034ea:	e0b0      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034ec:	4b5a      	ldr	r3, [pc, #360]	; (8003658 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034f6:	4b58      	ldr	r3, [pc, #352]	; (8003658 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d04a      	beq.n	8003598 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003502:	4b55      	ldr	r3, [pc, #340]	; (8003658 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	099b      	lsrs	r3, r3, #6
 8003508:	f04f 0400 	mov.w	r4, #0
 800350c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	ea03 0501 	and.w	r5, r3, r1
 8003518:	ea04 0602 	and.w	r6, r4, r2
 800351c:	4629      	mov	r1, r5
 800351e:	4632      	mov	r2, r6
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	f04f 0400 	mov.w	r4, #0
 8003528:	0154      	lsls	r4, r2, #5
 800352a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800352e:	014b      	lsls	r3, r1, #5
 8003530:	4619      	mov	r1, r3
 8003532:	4622      	mov	r2, r4
 8003534:	1b49      	subs	r1, r1, r5
 8003536:	eb62 0206 	sbc.w	r2, r2, r6
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	f04f 0400 	mov.w	r4, #0
 8003542:	0194      	lsls	r4, r2, #6
 8003544:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003548:	018b      	lsls	r3, r1, #6
 800354a:	1a5b      	subs	r3, r3, r1
 800354c:	eb64 0402 	sbc.w	r4, r4, r2
 8003550:	f04f 0100 	mov.w	r1, #0
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	00e2      	lsls	r2, r4, #3
 800355a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800355e:	00d9      	lsls	r1, r3, #3
 8003560:	460b      	mov	r3, r1
 8003562:	4614      	mov	r4, r2
 8003564:	195b      	adds	r3, r3, r5
 8003566:	eb44 0406 	adc.w	r4, r4, r6
 800356a:	f04f 0100 	mov.w	r1, #0
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	0262      	lsls	r2, r4, #9
 8003574:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003578:	0259      	lsls	r1, r3, #9
 800357a:	460b      	mov	r3, r1
 800357c:	4614      	mov	r4, r2
 800357e:	4618      	mov	r0, r3
 8003580:	4621      	mov	r1, r4
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f04f 0400 	mov.w	r4, #0
 8003588:	461a      	mov	r2, r3
 800358a:	4623      	mov	r3, r4
 800358c:	f7fd fa96 	bl	8000abc <__aeabi_uldivmod>
 8003590:	4603      	mov	r3, r0
 8003592:	460c      	mov	r4, r1
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	e049      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003598:	4b2f      	ldr	r3, [pc, #188]	; (8003658 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	099b      	lsrs	r3, r3, #6
 800359e:	f04f 0400 	mov.w	r4, #0
 80035a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	ea03 0501 	and.w	r5, r3, r1
 80035ae:	ea04 0602 	and.w	r6, r4, r2
 80035b2:	4629      	mov	r1, r5
 80035b4:	4632      	mov	r2, r6
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	f04f 0400 	mov.w	r4, #0
 80035be:	0154      	lsls	r4, r2, #5
 80035c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035c4:	014b      	lsls	r3, r1, #5
 80035c6:	4619      	mov	r1, r3
 80035c8:	4622      	mov	r2, r4
 80035ca:	1b49      	subs	r1, r1, r5
 80035cc:	eb62 0206 	sbc.w	r2, r2, r6
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	f04f 0400 	mov.w	r4, #0
 80035d8:	0194      	lsls	r4, r2, #6
 80035da:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035de:	018b      	lsls	r3, r1, #6
 80035e0:	1a5b      	subs	r3, r3, r1
 80035e2:	eb64 0402 	sbc.w	r4, r4, r2
 80035e6:	f04f 0100 	mov.w	r1, #0
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	00e2      	lsls	r2, r4, #3
 80035f0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035f4:	00d9      	lsls	r1, r3, #3
 80035f6:	460b      	mov	r3, r1
 80035f8:	4614      	mov	r4, r2
 80035fa:	195b      	adds	r3, r3, r5
 80035fc:	eb44 0406 	adc.w	r4, r4, r6
 8003600:	f04f 0100 	mov.w	r1, #0
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	02a2      	lsls	r2, r4, #10
 800360a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800360e:	0299      	lsls	r1, r3, #10
 8003610:	460b      	mov	r3, r1
 8003612:	4614      	mov	r4, r2
 8003614:	4618      	mov	r0, r3
 8003616:	4621      	mov	r1, r4
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f04f 0400 	mov.w	r4, #0
 800361e:	461a      	mov	r2, r3
 8003620:	4623      	mov	r3, r4
 8003622:	f7fd fa4b 	bl	8000abc <__aeabi_uldivmod>
 8003626:	4603      	mov	r3, r0
 8003628:	460c      	mov	r4, r1
 800362a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800362c:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	0c1b      	lsrs	r3, r3, #16
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	3301      	adds	r3, #1
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	60bb      	str	r3, [r7, #8]
      break;
 8003646:	e002      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003648:	4b04      	ldr	r3, [pc, #16]	; (800365c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800364a:	60bb      	str	r3, [r7, #8]
      break;
 800364c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800364e:	68bb      	ldr	r3, [r7, #8]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003658:	40023800 	.word	0x40023800
 800365c:	00f42400 	.word	0x00f42400
 8003660:	007a1200 	.word	0x007a1200

08003664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003668:	4b03      	ldr	r3, [pc, #12]	; (8003678 <HAL_RCC_GetHCLKFreq+0x14>)
 800366a:	681b      	ldr	r3, [r3, #0]
}
 800366c:	4618      	mov	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	20000000 	.word	0x20000000

0800367c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003680:	f7ff fff0 	bl	8003664 <HAL_RCC_GetHCLKFreq>
 8003684:	4601      	mov	r1, r0
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	0a9b      	lsrs	r3, r3, #10
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	4a03      	ldr	r2, [pc, #12]	; (80036a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003692:	5cd3      	ldrb	r3, [r2, r3]
 8003694:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40023800 	.word	0x40023800
 80036a0:	08005478 	.word	0x08005478

080036a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036a8:	f7ff ffdc 	bl	8003664 <HAL_RCC_GetHCLKFreq>
 80036ac:	4601      	mov	r1, r0
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	0b5b      	lsrs	r3, r3, #13
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	4a03      	ldr	r2, [pc, #12]	; (80036c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ba:	5cd3      	ldrb	r3, [r2, r3]
 80036bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40023800 	.word	0x40023800
 80036c8:	08005478 	.word	0x08005478

080036cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e01d      	b.n	800371a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fe fa50 	bl	8001b98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3304      	adds	r3, #4
 8003708:	4619      	mov	r1, r3
 800370a:	4610      	mov	r0, r2
 800370c:	f000 fa1e 	bl	8003b4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2202      	movs	r2, #2
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2b06      	cmp	r3, #6
 8003742:	d007      	beq.n	8003754 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e01d      	b.n	80037b8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d106      	bne.n	8003796 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f815 	bl	80037c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2202      	movs	r2, #2
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	4619      	mov	r1, r3
 80037a8:	4610      	mov	r0, r2
 80037aa:	f000 f9cf 	bl	8003b4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2201      	movs	r2, #1
 80037e4:	6839      	ldr	r1, [r7, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fc9a 	bl	8004120 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a15      	ldr	r2, [pc, #84]	; (8003848 <HAL_TIM_PWM_Start+0x74>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <HAL_TIM_PWM_Start+0x2c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a14      	ldr	r2, [pc, #80]	; (800384c <HAL_TIM_PWM_Start+0x78>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d101      	bne.n	8003804 <HAL_TIM_PWM_Start+0x30>
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <HAL_TIM_PWM_Start+0x32>
 8003804:	2300      	movs	r3, #0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003818:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b06      	cmp	r3, #6
 800382a:	d007      	beq.n	800383c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40010000 	.word	0x40010000
 800384c:	40010400 	.word	0x40010400

08003850 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003866:	2302      	movs	r3, #2
 8003868:	e0b4      	b.n	80039d4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2202      	movs	r2, #2
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b0c      	cmp	r3, #12
 800387e:	f200 809f 	bhi.w	80039c0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003882:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003888:	080038bd 	.word	0x080038bd
 800388c:	080039c1 	.word	0x080039c1
 8003890:	080039c1 	.word	0x080039c1
 8003894:	080039c1 	.word	0x080039c1
 8003898:	080038fd 	.word	0x080038fd
 800389c:	080039c1 	.word	0x080039c1
 80038a0:	080039c1 	.word	0x080039c1
 80038a4:	080039c1 	.word	0x080039c1
 80038a8:	0800393f 	.word	0x0800393f
 80038ac:	080039c1 	.word	0x080039c1
 80038b0:	080039c1 	.word	0x080039c1
 80038b4:	080039c1 	.word	0x080039c1
 80038b8:	0800397f 	.word	0x0800397f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 f9e2 	bl	8003c8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0208 	orr.w	r2, r2, #8
 80038d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0204 	bic.w	r2, r2, #4
 80038e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6999      	ldr	r1, [r3, #24]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	619a      	str	r2, [r3, #24]
      break;
 80038fa:	e062      	b.n	80039c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fa32 	bl	8003d6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6999      	ldr	r1, [r3, #24]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	021a      	lsls	r2, r3, #8
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	619a      	str	r2, [r3, #24]
      break;
 800393c:	e041      	b.n	80039c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	4618      	mov	r0, r3
 8003946:	f000 fa87 	bl	8003e58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0208 	orr.w	r2, r2, #8
 8003958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69da      	ldr	r2, [r3, #28]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0204 	bic.w	r2, r2, #4
 8003968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69d9      	ldr	r1, [r3, #28]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	61da      	str	r2, [r3, #28]
      break;
 800397c:	e021      	b.n	80039c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68b9      	ldr	r1, [r7, #8]
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fadb 	bl	8003f40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69da      	ldr	r2, [r3, #28]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69d9      	ldr	r1, [r3, #28]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	021a      	lsls	r2, r3, #8
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	61da      	str	r2, [r3, #28]
      break;
 80039be:	e000      	b.n	80039c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80039c0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_TIM_ConfigClockSource+0x18>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e0a6      	b.n	8003b42 <HAL_TIM_ConfigClockSource+0x166>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d067      	beq.n	8003afc <HAL_TIM_ConfigClockSource+0x120>
 8003a2c:	2b40      	cmp	r3, #64	; 0x40
 8003a2e:	d80b      	bhi.n	8003a48 <HAL_TIM_ConfigClockSource+0x6c>
 8003a30:	2b10      	cmp	r3, #16
 8003a32:	d073      	beq.n	8003b1c <HAL_TIM_ConfigClockSource+0x140>
 8003a34:	2b10      	cmp	r3, #16
 8003a36:	d802      	bhi.n	8003a3e <HAL_TIM_ConfigClockSource+0x62>
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d06f      	beq.n	8003b1c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003a3c:	e078      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	d06c      	beq.n	8003b1c <HAL_TIM_ConfigClockSource+0x140>
 8003a42:	2b30      	cmp	r3, #48	; 0x30
 8003a44:	d06a      	beq.n	8003b1c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003a46:	e073      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a48:	2b70      	cmp	r3, #112	; 0x70
 8003a4a:	d00d      	beq.n	8003a68 <HAL_TIM_ConfigClockSource+0x8c>
 8003a4c:	2b70      	cmp	r3, #112	; 0x70
 8003a4e:	d804      	bhi.n	8003a5a <HAL_TIM_ConfigClockSource+0x7e>
 8003a50:	2b50      	cmp	r3, #80	; 0x50
 8003a52:	d033      	beq.n	8003abc <HAL_TIM_ConfigClockSource+0xe0>
 8003a54:	2b60      	cmp	r3, #96	; 0x60
 8003a56:	d041      	beq.n	8003adc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003a58:	e06a      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5e:	d066      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0x152>
 8003a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a64:	d017      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003a66:	e063      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	6899      	ldr	r1, [r3, #8]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f000 fb32 	bl	80040e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a8a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	609a      	str	r2, [r3, #8]
      break;
 8003a94:	e04c      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	6899      	ldr	r1, [r3, #8]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f000 fb1b 	bl	80040e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ab8:	609a      	str	r2, [r3, #8]
      break;
 8003aba:	e039      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f000 fa8f 	bl	8003fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2150      	movs	r1, #80	; 0x50
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fae8 	bl	80040aa <TIM_ITRx_SetConfig>
      break;
 8003ada:	e029      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	6859      	ldr	r1, [r3, #4]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f000 faae 	bl	800404a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2160      	movs	r1, #96	; 0x60
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fad8 	bl	80040aa <TIM_ITRx_SetConfig>
      break;
 8003afa:	e019      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6818      	ldr	r0, [r3, #0]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f000 fa6f 	bl	8003fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2140      	movs	r1, #64	; 0x40
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 fac8 	bl	80040aa <TIM_ITRx_SetConfig>
      break;
 8003b1a:	e009      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4619      	mov	r1, r3
 8003b26:	4610      	mov	r0, r2
 8003b28:	f000 fabf 	bl	80040aa <TIM_ITRx_SetConfig>
      break;
 8003b2c:	e000      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003b2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a40      	ldr	r2, [pc, #256]	; (8003c60 <TIM_Base_SetConfig+0x114>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d013      	beq.n	8003b8c <TIM_Base_SetConfig+0x40>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6a:	d00f      	beq.n	8003b8c <TIM_Base_SetConfig+0x40>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a3d      	ldr	r2, [pc, #244]	; (8003c64 <TIM_Base_SetConfig+0x118>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00b      	beq.n	8003b8c <TIM_Base_SetConfig+0x40>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a3c      	ldr	r2, [pc, #240]	; (8003c68 <TIM_Base_SetConfig+0x11c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d007      	beq.n	8003b8c <TIM_Base_SetConfig+0x40>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a3b      	ldr	r2, [pc, #236]	; (8003c6c <TIM_Base_SetConfig+0x120>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d003      	beq.n	8003b8c <TIM_Base_SetConfig+0x40>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a3a      	ldr	r2, [pc, #232]	; (8003c70 <TIM_Base_SetConfig+0x124>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d108      	bne.n	8003b9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a2f      	ldr	r2, [pc, #188]	; (8003c60 <TIM_Base_SetConfig+0x114>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d02b      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bac:	d027      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a2c      	ldr	r2, [pc, #176]	; (8003c64 <TIM_Base_SetConfig+0x118>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d023      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a2b      	ldr	r2, [pc, #172]	; (8003c68 <TIM_Base_SetConfig+0x11c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01f      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <TIM_Base_SetConfig+0x120>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d01b      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a29      	ldr	r2, [pc, #164]	; (8003c70 <TIM_Base_SetConfig+0x124>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d017      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a28      	ldr	r2, [pc, #160]	; (8003c74 <TIM_Base_SetConfig+0x128>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d013      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a27      	ldr	r2, [pc, #156]	; (8003c78 <TIM_Base_SetConfig+0x12c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00f      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a26      	ldr	r2, [pc, #152]	; (8003c7c <TIM_Base_SetConfig+0x130>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00b      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a25      	ldr	r2, [pc, #148]	; (8003c80 <TIM_Base_SetConfig+0x134>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d007      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a24      	ldr	r2, [pc, #144]	; (8003c84 <TIM_Base_SetConfig+0x138>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d003      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a23      	ldr	r2, [pc, #140]	; (8003c88 <TIM_Base_SetConfig+0x13c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d108      	bne.n	8003c10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a0a      	ldr	r2, [pc, #40]	; (8003c60 <TIM_Base_SetConfig+0x114>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d003      	beq.n	8003c44 <TIM_Base_SetConfig+0xf8>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a0c      	ldr	r2, [pc, #48]	; (8003c70 <TIM_Base_SetConfig+0x124>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d103      	bne.n	8003c4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	615a      	str	r2, [r3, #20]
}
 8003c52:	bf00      	nop
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40010000 	.word	0x40010000
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800
 8003c6c:	40000c00 	.word	0x40000c00
 8003c70:	40010400 	.word	0x40010400
 8003c74:	40014000 	.word	0x40014000
 8003c78:	40014400 	.word	0x40014400
 8003c7c:	40014800 	.word	0x40014800
 8003c80:	40001800 	.word	0x40001800
 8003c84:	40001c00 	.word	0x40001c00
 8003c88:	40002000 	.word	0x40002000

08003c8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f023 0201 	bic.w	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f023 0302 	bic.w	r3, r3, #2
 8003cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a20      	ldr	r2, [pc, #128]	; (8003d64 <TIM_OC1_SetConfig+0xd8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d003      	beq.n	8003cf0 <TIM_OC1_SetConfig+0x64>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a1f      	ldr	r2, [pc, #124]	; (8003d68 <TIM_OC1_SetConfig+0xdc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d10c      	bne.n	8003d0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f023 0308 	bic.w	r3, r3, #8
 8003cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f023 0304 	bic.w	r3, r3, #4
 8003d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a15      	ldr	r2, [pc, #84]	; (8003d64 <TIM_OC1_SetConfig+0xd8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d003      	beq.n	8003d1a <TIM_OC1_SetConfig+0x8e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a14      	ldr	r2, [pc, #80]	; (8003d68 <TIM_OC1_SetConfig+0xdc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d111      	bne.n	8003d3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	621a      	str	r2, [r3, #32]
}
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40010000 	.word	0x40010000
 8003d68:	40010400 	.word	0x40010400

08003d6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f023 0210 	bic.w	r2, r3, #16
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	021b      	lsls	r3, r3, #8
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f023 0320 	bic.w	r3, r3, #32
 8003db6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a22      	ldr	r2, [pc, #136]	; (8003e50 <TIM_OC2_SetConfig+0xe4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d003      	beq.n	8003dd4 <TIM_OC2_SetConfig+0x68>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a21      	ldr	r2, [pc, #132]	; (8003e54 <TIM_OC2_SetConfig+0xe8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d10d      	bne.n	8003df0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a17      	ldr	r2, [pc, #92]	; (8003e50 <TIM_OC2_SetConfig+0xe4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d003      	beq.n	8003e00 <TIM_OC2_SetConfig+0x94>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a16      	ldr	r2, [pc, #88]	; (8003e54 <TIM_OC2_SetConfig+0xe8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d113      	bne.n	8003e28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40010000 	.word	0x40010000
 8003e54:	40010400 	.word	0x40010400

08003e58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0303 	bic.w	r3, r3, #3
 8003e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a21      	ldr	r2, [pc, #132]	; (8003f38 <TIM_OC3_SetConfig+0xe0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d003      	beq.n	8003ebe <TIM_OC3_SetConfig+0x66>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a20      	ldr	r2, [pc, #128]	; (8003f3c <TIM_OC3_SetConfig+0xe4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d10d      	bne.n	8003eda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a16      	ldr	r2, [pc, #88]	; (8003f38 <TIM_OC3_SetConfig+0xe0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d003      	beq.n	8003eea <TIM_OC3_SetConfig+0x92>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <TIM_OC3_SetConfig+0xe4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d113      	bne.n	8003f12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	621a      	str	r2, [r3, #32]
}
 8003f2c:	bf00      	nop
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	40010400 	.word	0x40010400

08003f40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	031b      	lsls	r3, r3, #12
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a12      	ldr	r2, [pc, #72]	; (8003fe4 <TIM_OC4_SetConfig+0xa4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d003      	beq.n	8003fa8 <TIM_OC4_SetConfig+0x68>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a11      	ldr	r2, [pc, #68]	; (8003fe8 <TIM_OC4_SetConfig+0xa8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d109      	bne.n	8003fbc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	019b      	lsls	r3, r3, #6
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	621a      	str	r2, [r3, #32]
}
 8003fd6:	bf00      	nop
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40010000 	.word	0x40010000
 8003fe8:	40010400 	.word	0x40010400

08003fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f023 0201 	bic.w	r2, r3, #1
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f023 030a 	bic.w	r3, r3, #10
 8004028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	621a      	str	r2, [r3, #32]
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800404a:	b480      	push	{r7}
 800404c:	b087      	sub	sp, #28
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f023 0210 	bic.w	r2, r3, #16
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	031b      	lsls	r3, r3, #12
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004086:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	621a      	str	r2, [r3, #32]
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b085      	sub	sp, #20
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f043 0307 	orr.w	r3, r3, #7
 80040cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	609a      	str	r2, [r3, #8]
}
 80040d4:	bf00      	nop
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	021a      	lsls	r2, r3, #8
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	431a      	orrs	r2, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4313      	orrs	r3, r2
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	609a      	str	r2, [r3, #8]
}
 8004114:	bf00      	nop
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	2201      	movs	r2, #1
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a1a      	ldr	r2, [r3, #32]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	43db      	mvns	r3, r3
 8004142:	401a      	ands	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a1a      	ldr	r2, [r3, #32]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	fa01 f303 	lsl.w	r3, r1, r3
 8004158:	431a      	orrs	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	621a      	str	r2, [r3, #32]
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004180:	2302      	movs	r3, #2
 8004182:	e05a      	b.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a21      	ldr	r2, [pc, #132]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d022      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d0:	d01d      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1d      	ldr	r2, [pc, #116]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d018      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d013      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1a      	ldr	r2, [pc, #104]	; (8004254 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00e      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a18      	ldr	r2, [pc, #96]	; (8004258 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d009      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a17      	ldr	r2, [pc, #92]	; (800425c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d004      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a15      	ldr	r2, [pc, #84]	; (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d10c      	bne.n	8004228 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004214:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	4313      	orrs	r3, r2
 800421e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40010000 	.word	0x40010000
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800
 8004254:	40000c00 	.word	0x40000c00
 8004258:	40010400 	.word	0x40010400
 800425c:	40014000 	.word	0x40014000
 8004260:	40001800 	.word	0x40001800

08004264 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e03f      	b.n	80042f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fd fd34 	bl	8001cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2224      	movs	r2, #36	; 0x24
 8004294:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f90b 	bl	80044c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b088      	sub	sp, #32
 8004302:	af02      	add	r7, sp, #8
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	4613      	mov	r3, r2
 800430c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b20      	cmp	r3, #32
 800431c:	f040 8083 	bne.w	8004426 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <HAL_UART_Transmit+0x2e>
 8004326:	88fb      	ldrh	r3, [r7, #6]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e07b      	b.n	8004428 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_UART_Transmit+0x40>
 800433a:	2302      	movs	r3, #2
 800433c:	e074      	b.n	8004428 <HAL_UART_Transmit+0x12a>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2221      	movs	r2, #33	; 0x21
 8004350:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004354:	f7fd fe70 	bl	8002038 <HAL_GetTick>
 8004358:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	88fa      	ldrh	r2, [r7, #6]
 800435e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	88fa      	ldrh	r2, [r7, #6]
 8004364:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800436e:	e042      	b.n	80043f6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004386:	d122      	bne.n	80043ce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	2200      	movs	r2, #0
 8004390:	2180      	movs	r1, #128	; 0x80
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f84c 	bl	8004430 <UART_WaitOnFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e042      	b.n	8004428 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043b4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d103      	bne.n	80043c6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	3302      	adds	r3, #2
 80043c2:	60bb      	str	r3, [r7, #8]
 80043c4:	e017      	b.n	80043f6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	3301      	adds	r3, #1
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	e013      	b.n	80043f6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2200      	movs	r2, #0
 80043d6:	2180      	movs	r1, #128	; 0x80
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 f829 	bl	8004430 <UART_WaitOnFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e01f      	b.n	8004428 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	60ba      	str	r2, [r7, #8]
 80043ee:	781a      	ldrb	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1b7      	bne.n	8004370 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2200      	movs	r2, #0
 8004408:	2140      	movs	r1, #64	; 0x40
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f810 	bl	8004430 <UART_WaitOnFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e006      	b.n	8004428 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	e000      	b.n	8004428 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004426:	2302      	movs	r3, #2
  }
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	4613      	mov	r3, r2
 800443e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004440:	e02c      	b.n	800449c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004448:	d028      	beq.n	800449c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <UART_WaitOnFlagUntilTimeout+0x30>
 8004450:	f7fd fdf2 	bl	8002038 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	429a      	cmp	r2, r3
 800445e:	d21d      	bcs.n	800449c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800446e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e00f      	b.n	80044bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	4013      	ands	r3, r2
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d0c3      	beq.n	8004442 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c8:	b085      	sub	sp, #20
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004506:	f023 030c 	bic.w	r3, r3, #12
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	68f9      	ldr	r1, [r7, #12]
 8004510:	430b      	orrs	r3, r1
 8004512:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699a      	ldr	r2, [r3, #24]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004532:	f040 818b 	bne.w	800484c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4ac1      	ldr	r2, [pc, #772]	; (8004840 <UART_SetConfig+0x37c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d005      	beq.n	800454c <UART_SetConfig+0x88>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4abf      	ldr	r2, [pc, #764]	; (8004844 <UART_SetConfig+0x380>)
 8004546:	4293      	cmp	r3, r2
 8004548:	f040 80bd 	bne.w	80046c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800454c:	f7ff f8aa 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 8004550:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	461d      	mov	r5, r3
 8004556:	f04f 0600 	mov.w	r6, #0
 800455a:	46a8      	mov	r8, r5
 800455c:	46b1      	mov	r9, r6
 800455e:	eb18 0308 	adds.w	r3, r8, r8
 8004562:	eb49 0409 	adc.w	r4, r9, r9
 8004566:	4698      	mov	r8, r3
 8004568:	46a1      	mov	r9, r4
 800456a:	eb18 0805 	adds.w	r8, r8, r5
 800456e:	eb49 0906 	adc.w	r9, r9, r6
 8004572:	f04f 0100 	mov.w	r1, #0
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800457e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004582:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004586:	4688      	mov	r8, r1
 8004588:	4691      	mov	r9, r2
 800458a:	eb18 0005 	adds.w	r0, r8, r5
 800458e:	eb49 0106 	adc.w	r1, r9, r6
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	461d      	mov	r5, r3
 8004598:	f04f 0600 	mov.w	r6, #0
 800459c:	196b      	adds	r3, r5, r5
 800459e:	eb46 0406 	adc.w	r4, r6, r6
 80045a2:	461a      	mov	r2, r3
 80045a4:	4623      	mov	r3, r4
 80045a6:	f7fc fa89 	bl	8000abc <__aeabi_uldivmod>
 80045aa:	4603      	mov	r3, r0
 80045ac:	460c      	mov	r4, r1
 80045ae:	461a      	mov	r2, r3
 80045b0:	4ba5      	ldr	r3, [pc, #660]	; (8004848 <UART_SetConfig+0x384>)
 80045b2:	fba3 2302 	umull	r2, r3, r3, r2
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	461d      	mov	r5, r3
 80045c0:	f04f 0600 	mov.w	r6, #0
 80045c4:	46a9      	mov	r9, r5
 80045c6:	46b2      	mov	sl, r6
 80045c8:	eb19 0309 	adds.w	r3, r9, r9
 80045cc:	eb4a 040a 	adc.w	r4, sl, sl
 80045d0:	4699      	mov	r9, r3
 80045d2:	46a2      	mov	sl, r4
 80045d4:	eb19 0905 	adds.w	r9, r9, r5
 80045d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80045dc:	f04f 0100 	mov.w	r1, #0
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045f0:	4689      	mov	r9, r1
 80045f2:	4692      	mov	sl, r2
 80045f4:	eb19 0005 	adds.w	r0, r9, r5
 80045f8:	eb4a 0106 	adc.w	r1, sl, r6
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	461d      	mov	r5, r3
 8004602:	f04f 0600 	mov.w	r6, #0
 8004606:	196b      	adds	r3, r5, r5
 8004608:	eb46 0406 	adc.w	r4, r6, r6
 800460c:	461a      	mov	r2, r3
 800460e:	4623      	mov	r3, r4
 8004610:	f7fc fa54 	bl	8000abc <__aeabi_uldivmod>
 8004614:	4603      	mov	r3, r0
 8004616:	460c      	mov	r4, r1
 8004618:	461a      	mov	r2, r3
 800461a:	4b8b      	ldr	r3, [pc, #556]	; (8004848 <UART_SetConfig+0x384>)
 800461c:	fba3 1302 	umull	r1, r3, r3, r2
 8004620:	095b      	lsrs	r3, r3, #5
 8004622:	2164      	movs	r1, #100	; 0x64
 8004624:	fb01 f303 	mul.w	r3, r1, r3
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	3332      	adds	r3, #50	; 0x32
 800462e:	4a86      	ldr	r2, [pc, #536]	; (8004848 <UART_SetConfig+0x384>)
 8004630:	fba2 2303 	umull	r2, r3, r2, r3
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800463c:	4498      	add	r8, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	461d      	mov	r5, r3
 8004642:	f04f 0600 	mov.w	r6, #0
 8004646:	46a9      	mov	r9, r5
 8004648:	46b2      	mov	sl, r6
 800464a:	eb19 0309 	adds.w	r3, r9, r9
 800464e:	eb4a 040a 	adc.w	r4, sl, sl
 8004652:	4699      	mov	r9, r3
 8004654:	46a2      	mov	sl, r4
 8004656:	eb19 0905 	adds.w	r9, r9, r5
 800465a:	eb4a 0a06 	adc.w	sl, sl, r6
 800465e:	f04f 0100 	mov.w	r1, #0
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800466a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800466e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004672:	4689      	mov	r9, r1
 8004674:	4692      	mov	sl, r2
 8004676:	eb19 0005 	adds.w	r0, r9, r5
 800467a:	eb4a 0106 	adc.w	r1, sl, r6
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	461d      	mov	r5, r3
 8004684:	f04f 0600 	mov.w	r6, #0
 8004688:	196b      	adds	r3, r5, r5
 800468a:	eb46 0406 	adc.w	r4, r6, r6
 800468e:	461a      	mov	r2, r3
 8004690:	4623      	mov	r3, r4
 8004692:	f7fc fa13 	bl	8000abc <__aeabi_uldivmod>
 8004696:	4603      	mov	r3, r0
 8004698:	460c      	mov	r4, r1
 800469a:	461a      	mov	r2, r3
 800469c:	4b6a      	ldr	r3, [pc, #424]	; (8004848 <UART_SetConfig+0x384>)
 800469e:	fba3 1302 	umull	r1, r3, r3, r2
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	2164      	movs	r1, #100	; 0x64
 80046a6:	fb01 f303 	mul.w	r3, r1, r3
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	3332      	adds	r3, #50	; 0x32
 80046b0:	4a65      	ldr	r2, [pc, #404]	; (8004848 <UART_SetConfig+0x384>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	f003 0207 	and.w	r2, r3, #7
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4442      	add	r2, r8
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	e26f      	b.n	8004ba6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046c6:	f7fe ffd9 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 80046ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	461d      	mov	r5, r3
 80046d0:	f04f 0600 	mov.w	r6, #0
 80046d4:	46a8      	mov	r8, r5
 80046d6:	46b1      	mov	r9, r6
 80046d8:	eb18 0308 	adds.w	r3, r8, r8
 80046dc:	eb49 0409 	adc.w	r4, r9, r9
 80046e0:	4698      	mov	r8, r3
 80046e2:	46a1      	mov	r9, r4
 80046e4:	eb18 0805 	adds.w	r8, r8, r5
 80046e8:	eb49 0906 	adc.w	r9, r9, r6
 80046ec:	f04f 0100 	mov.w	r1, #0
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80046f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80046fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004700:	4688      	mov	r8, r1
 8004702:	4691      	mov	r9, r2
 8004704:	eb18 0005 	adds.w	r0, r8, r5
 8004708:	eb49 0106 	adc.w	r1, r9, r6
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	461d      	mov	r5, r3
 8004712:	f04f 0600 	mov.w	r6, #0
 8004716:	196b      	adds	r3, r5, r5
 8004718:	eb46 0406 	adc.w	r4, r6, r6
 800471c:	461a      	mov	r2, r3
 800471e:	4623      	mov	r3, r4
 8004720:	f7fc f9cc 	bl	8000abc <__aeabi_uldivmod>
 8004724:	4603      	mov	r3, r0
 8004726:	460c      	mov	r4, r1
 8004728:	461a      	mov	r2, r3
 800472a:	4b47      	ldr	r3, [pc, #284]	; (8004848 <UART_SetConfig+0x384>)
 800472c:	fba3 2302 	umull	r2, r3, r3, r2
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	461d      	mov	r5, r3
 800473a:	f04f 0600 	mov.w	r6, #0
 800473e:	46a9      	mov	r9, r5
 8004740:	46b2      	mov	sl, r6
 8004742:	eb19 0309 	adds.w	r3, r9, r9
 8004746:	eb4a 040a 	adc.w	r4, sl, sl
 800474a:	4699      	mov	r9, r3
 800474c:	46a2      	mov	sl, r4
 800474e:	eb19 0905 	adds.w	r9, r9, r5
 8004752:	eb4a 0a06 	adc.w	sl, sl, r6
 8004756:	f04f 0100 	mov.w	r1, #0
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004762:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004766:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800476a:	4689      	mov	r9, r1
 800476c:	4692      	mov	sl, r2
 800476e:	eb19 0005 	adds.w	r0, r9, r5
 8004772:	eb4a 0106 	adc.w	r1, sl, r6
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	461d      	mov	r5, r3
 800477c:	f04f 0600 	mov.w	r6, #0
 8004780:	196b      	adds	r3, r5, r5
 8004782:	eb46 0406 	adc.w	r4, r6, r6
 8004786:	461a      	mov	r2, r3
 8004788:	4623      	mov	r3, r4
 800478a:	f7fc f997 	bl	8000abc <__aeabi_uldivmod>
 800478e:	4603      	mov	r3, r0
 8004790:	460c      	mov	r4, r1
 8004792:	461a      	mov	r2, r3
 8004794:	4b2c      	ldr	r3, [pc, #176]	; (8004848 <UART_SetConfig+0x384>)
 8004796:	fba3 1302 	umull	r1, r3, r3, r2
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	2164      	movs	r1, #100	; 0x64
 800479e:	fb01 f303 	mul.w	r3, r1, r3
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	3332      	adds	r3, #50	; 0x32
 80047a8:	4a27      	ldr	r2, [pc, #156]	; (8004848 <UART_SetConfig+0x384>)
 80047aa:	fba2 2303 	umull	r2, r3, r2, r3
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047b6:	4498      	add	r8, r3
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	461d      	mov	r5, r3
 80047bc:	f04f 0600 	mov.w	r6, #0
 80047c0:	46a9      	mov	r9, r5
 80047c2:	46b2      	mov	sl, r6
 80047c4:	eb19 0309 	adds.w	r3, r9, r9
 80047c8:	eb4a 040a 	adc.w	r4, sl, sl
 80047cc:	4699      	mov	r9, r3
 80047ce:	46a2      	mov	sl, r4
 80047d0:	eb19 0905 	adds.w	r9, r9, r5
 80047d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80047d8:	f04f 0100 	mov.w	r1, #0
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047ec:	4689      	mov	r9, r1
 80047ee:	4692      	mov	sl, r2
 80047f0:	eb19 0005 	adds.w	r0, r9, r5
 80047f4:	eb4a 0106 	adc.w	r1, sl, r6
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	461d      	mov	r5, r3
 80047fe:	f04f 0600 	mov.w	r6, #0
 8004802:	196b      	adds	r3, r5, r5
 8004804:	eb46 0406 	adc.w	r4, r6, r6
 8004808:	461a      	mov	r2, r3
 800480a:	4623      	mov	r3, r4
 800480c:	f7fc f956 	bl	8000abc <__aeabi_uldivmod>
 8004810:	4603      	mov	r3, r0
 8004812:	460c      	mov	r4, r1
 8004814:	461a      	mov	r2, r3
 8004816:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <UART_SetConfig+0x384>)
 8004818:	fba3 1302 	umull	r1, r3, r3, r2
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	2164      	movs	r1, #100	; 0x64
 8004820:	fb01 f303 	mul.w	r3, r1, r3
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	3332      	adds	r3, #50	; 0x32
 800482a:	4a07      	ldr	r2, [pc, #28]	; (8004848 <UART_SetConfig+0x384>)
 800482c:	fba2 2303 	umull	r2, r3, r2, r3
 8004830:	095b      	lsrs	r3, r3, #5
 8004832:	f003 0207 	and.w	r2, r3, #7
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4442      	add	r2, r8
 800483c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800483e:	e1b2      	b.n	8004ba6 <UART_SetConfig+0x6e2>
 8004840:	40011000 	.word	0x40011000
 8004844:	40011400 	.word	0x40011400
 8004848:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4ad7      	ldr	r2, [pc, #860]	; (8004bb0 <UART_SetConfig+0x6ec>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d005      	beq.n	8004862 <UART_SetConfig+0x39e>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4ad6      	ldr	r2, [pc, #856]	; (8004bb4 <UART_SetConfig+0x6f0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	f040 80d1 	bne.w	8004a04 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004862:	f7fe ff1f 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 8004866:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	469a      	mov	sl, r3
 800486c:	f04f 0b00 	mov.w	fp, #0
 8004870:	46d0      	mov	r8, sl
 8004872:	46d9      	mov	r9, fp
 8004874:	eb18 0308 	adds.w	r3, r8, r8
 8004878:	eb49 0409 	adc.w	r4, r9, r9
 800487c:	4698      	mov	r8, r3
 800487e:	46a1      	mov	r9, r4
 8004880:	eb18 080a 	adds.w	r8, r8, sl
 8004884:	eb49 090b 	adc.w	r9, r9, fp
 8004888:	f04f 0100 	mov.w	r1, #0
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004894:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004898:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800489c:	4688      	mov	r8, r1
 800489e:	4691      	mov	r9, r2
 80048a0:	eb1a 0508 	adds.w	r5, sl, r8
 80048a4:	eb4b 0609 	adc.w	r6, fp, r9
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	4619      	mov	r1, r3
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	f04f 0400 	mov.w	r4, #0
 80048ba:	0094      	lsls	r4, r2, #2
 80048bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048c0:	008b      	lsls	r3, r1, #2
 80048c2:	461a      	mov	r2, r3
 80048c4:	4623      	mov	r3, r4
 80048c6:	4628      	mov	r0, r5
 80048c8:	4631      	mov	r1, r6
 80048ca:	f7fc f8f7 	bl	8000abc <__aeabi_uldivmod>
 80048ce:	4603      	mov	r3, r0
 80048d0:	460c      	mov	r4, r1
 80048d2:	461a      	mov	r2, r3
 80048d4:	4bb8      	ldr	r3, [pc, #736]	; (8004bb8 <UART_SetConfig+0x6f4>)
 80048d6:	fba3 2302 	umull	r2, r3, r3, r2
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	469b      	mov	fp, r3
 80048e4:	f04f 0c00 	mov.w	ip, #0
 80048e8:	46d9      	mov	r9, fp
 80048ea:	46e2      	mov	sl, ip
 80048ec:	eb19 0309 	adds.w	r3, r9, r9
 80048f0:	eb4a 040a 	adc.w	r4, sl, sl
 80048f4:	4699      	mov	r9, r3
 80048f6:	46a2      	mov	sl, r4
 80048f8:	eb19 090b 	adds.w	r9, r9, fp
 80048fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004900:	f04f 0100 	mov.w	r1, #0
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800490c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004910:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004914:	4689      	mov	r9, r1
 8004916:	4692      	mov	sl, r2
 8004918:	eb1b 0509 	adds.w	r5, fp, r9
 800491c:	eb4c 060a 	adc.w	r6, ip, sl
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4619      	mov	r1, r3
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	f04f 0400 	mov.w	r4, #0
 8004932:	0094      	lsls	r4, r2, #2
 8004934:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004938:	008b      	lsls	r3, r1, #2
 800493a:	461a      	mov	r2, r3
 800493c:	4623      	mov	r3, r4
 800493e:	4628      	mov	r0, r5
 8004940:	4631      	mov	r1, r6
 8004942:	f7fc f8bb 	bl	8000abc <__aeabi_uldivmod>
 8004946:	4603      	mov	r3, r0
 8004948:	460c      	mov	r4, r1
 800494a:	461a      	mov	r2, r3
 800494c:	4b9a      	ldr	r3, [pc, #616]	; (8004bb8 <UART_SetConfig+0x6f4>)
 800494e:	fba3 1302 	umull	r1, r3, r3, r2
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	2164      	movs	r1, #100	; 0x64
 8004956:	fb01 f303 	mul.w	r3, r1, r3
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	3332      	adds	r3, #50	; 0x32
 8004960:	4a95      	ldr	r2, [pc, #596]	; (8004bb8 <UART_SetConfig+0x6f4>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800496c:	4498      	add	r8, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	469b      	mov	fp, r3
 8004972:	f04f 0c00 	mov.w	ip, #0
 8004976:	46d9      	mov	r9, fp
 8004978:	46e2      	mov	sl, ip
 800497a:	eb19 0309 	adds.w	r3, r9, r9
 800497e:	eb4a 040a 	adc.w	r4, sl, sl
 8004982:	4699      	mov	r9, r3
 8004984:	46a2      	mov	sl, r4
 8004986:	eb19 090b 	adds.w	r9, r9, fp
 800498a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800498e:	f04f 0100 	mov.w	r1, #0
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800499a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800499e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049a2:	4689      	mov	r9, r1
 80049a4:	4692      	mov	sl, r2
 80049a6:	eb1b 0509 	adds.w	r5, fp, r9
 80049aa:	eb4c 060a 	adc.w	r6, ip, sl
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	4619      	mov	r1, r3
 80049b4:	f04f 0200 	mov.w	r2, #0
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	f04f 0400 	mov.w	r4, #0
 80049c0:	0094      	lsls	r4, r2, #2
 80049c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049c6:	008b      	lsls	r3, r1, #2
 80049c8:	461a      	mov	r2, r3
 80049ca:	4623      	mov	r3, r4
 80049cc:	4628      	mov	r0, r5
 80049ce:	4631      	mov	r1, r6
 80049d0:	f7fc f874 	bl	8000abc <__aeabi_uldivmod>
 80049d4:	4603      	mov	r3, r0
 80049d6:	460c      	mov	r4, r1
 80049d8:	461a      	mov	r2, r3
 80049da:	4b77      	ldr	r3, [pc, #476]	; (8004bb8 <UART_SetConfig+0x6f4>)
 80049dc:	fba3 1302 	umull	r1, r3, r3, r2
 80049e0:	095b      	lsrs	r3, r3, #5
 80049e2:	2164      	movs	r1, #100	; 0x64
 80049e4:	fb01 f303 	mul.w	r3, r1, r3
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	3332      	adds	r3, #50	; 0x32
 80049ee:	4a72      	ldr	r2, [pc, #456]	; (8004bb8 <UART_SetConfig+0x6f4>)
 80049f0:	fba2 2303 	umull	r2, r3, r2, r3
 80049f4:	095b      	lsrs	r3, r3, #5
 80049f6:	f003 020f 	and.w	r2, r3, #15
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4442      	add	r2, r8
 8004a00:	609a      	str	r2, [r3, #8]
 8004a02:	e0d0      	b.n	8004ba6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a04:	f7fe fe3a 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 8004a08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	469a      	mov	sl, r3
 8004a0e:	f04f 0b00 	mov.w	fp, #0
 8004a12:	46d0      	mov	r8, sl
 8004a14:	46d9      	mov	r9, fp
 8004a16:	eb18 0308 	adds.w	r3, r8, r8
 8004a1a:	eb49 0409 	adc.w	r4, r9, r9
 8004a1e:	4698      	mov	r8, r3
 8004a20:	46a1      	mov	r9, r4
 8004a22:	eb18 080a 	adds.w	r8, r8, sl
 8004a26:	eb49 090b 	adc.w	r9, r9, fp
 8004a2a:	f04f 0100 	mov.w	r1, #0
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a3e:	4688      	mov	r8, r1
 8004a40:	4691      	mov	r9, r2
 8004a42:	eb1a 0508 	adds.w	r5, sl, r8
 8004a46:	eb4b 0609 	adc.w	r6, fp, r9
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	f04f 0400 	mov.w	r4, #0
 8004a5c:	0094      	lsls	r4, r2, #2
 8004a5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a62:	008b      	lsls	r3, r1, #2
 8004a64:	461a      	mov	r2, r3
 8004a66:	4623      	mov	r3, r4
 8004a68:	4628      	mov	r0, r5
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	f7fc f826 	bl	8000abc <__aeabi_uldivmod>
 8004a70:	4603      	mov	r3, r0
 8004a72:	460c      	mov	r4, r1
 8004a74:	461a      	mov	r2, r3
 8004a76:	4b50      	ldr	r3, [pc, #320]	; (8004bb8 <UART_SetConfig+0x6f4>)
 8004a78:	fba3 2302 	umull	r2, r3, r3, r2
 8004a7c:	095b      	lsrs	r3, r3, #5
 8004a7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	469b      	mov	fp, r3
 8004a86:	f04f 0c00 	mov.w	ip, #0
 8004a8a:	46d9      	mov	r9, fp
 8004a8c:	46e2      	mov	sl, ip
 8004a8e:	eb19 0309 	adds.w	r3, r9, r9
 8004a92:	eb4a 040a 	adc.w	r4, sl, sl
 8004a96:	4699      	mov	r9, r3
 8004a98:	46a2      	mov	sl, r4
 8004a9a:	eb19 090b 	adds.w	r9, r9, fp
 8004a9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004aa2:	f04f 0100 	mov.w	r1, #0
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ab2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ab6:	4689      	mov	r9, r1
 8004ab8:	4692      	mov	sl, r2
 8004aba:	eb1b 0509 	adds.w	r5, fp, r9
 8004abe:	eb4c 060a 	adc.w	r6, ip, sl
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	f04f 0400 	mov.w	r4, #0
 8004ad4:	0094      	lsls	r4, r2, #2
 8004ad6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ada:	008b      	lsls	r3, r1, #2
 8004adc:	461a      	mov	r2, r3
 8004ade:	4623      	mov	r3, r4
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	4631      	mov	r1, r6
 8004ae4:	f7fb ffea 	bl	8000abc <__aeabi_uldivmod>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	460c      	mov	r4, r1
 8004aec:	461a      	mov	r2, r3
 8004aee:	4b32      	ldr	r3, [pc, #200]	; (8004bb8 <UART_SetConfig+0x6f4>)
 8004af0:	fba3 1302 	umull	r1, r3, r3, r2
 8004af4:	095b      	lsrs	r3, r3, #5
 8004af6:	2164      	movs	r1, #100	; 0x64
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	3332      	adds	r3, #50	; 0x32
 8004b02:	4a2d      	ldr	r2, [pc, #180]	; (8004bb8 <UART_SetConfig+0x6f4>)
 8004b04:	fba2 2303 	umull	r2, r3, r2, r3
 8004b08:	095b      	lsrs	r3, r3, #5
 8004b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0e:	4498      	add	r8, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	469b      	mov	fp, r3
 8004b14:	f04f 0c00 	mov.w	ip, #0
 8004b18:	46d9      	mov	r9, fp
 8004b1a:	46e2      	mov	sl, ip
 8004b1c:	eb19 0309 	adds.w	r3, r9, r9
 8004b20:	eb4a 040a 	adc.w	r4, sl, sl
 8004b24:	4699      	mov	r9, r3
 8004b26:	46a2      	mov	sl, r4
 8004b28:	eb19 090b 	adds.w	r9, r9, fp
 8004b2c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b30:	f04f 0100 	mov.w	r1, #0
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b44:	4689      	mov	r9, r1
 8004b46:	4692      	mov	sl, r2
 8004b48:	eb1b 0509 	adds.w	r5, fp, r9
 8004b4c:	eb4c 060a 	adc.w	r6, ip, sl
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	4619      	mov	r1, r3
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	f04f 0300 	mov.w	r3, #0
 8004b5e:	f04f 0400 	mov.w	r4, #0
 8004b62:	0094      	lsls	r4, r2, #2
 8004b64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b68:	008b      	lsls	r3, r1, #2
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	4623      	mov	r3, r4
 8004b6e:	4628      	mov	r0, r5
 8004b70:	4631      	mov	r1, r6
 8004b72:	f7fb ffa3 	bl	8000abc <__aeabi_uldivmod>
 8004b76:	4603      	mov	r3, r0
 8004b78:	460c      	mov	r4, r1
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	4b0e      	ldr	r3, [pc, #56]	; (8004bb8 <UART_SetConfig+0x6f4>)
 8004b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	2164      	movs	r1, #100	; 0x64
 8004b86:	fb01 f303 	mul.w	r3, r1, r3
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	3332      	adds	r3, #50	; 0x32
 8004b90:	4a09      	ldr	r2, [pc, #36]	; (8004bb8 <UART_SetConfig+0x6f4>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	095b      	lsrs	r3, r3, #5
 8004b98:	f003 020f 	and.w	r2, r3, #15
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4442      	add	r2, r8
 8004ba2:	609a      	str	r2, [r3, #8]
}
 8004ba4:	e7ff      	b.n	8004ba6 <UART_SetConfig+0x6e2>
 8004ba6:	bf00      	nop
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bb0:	40011000 	.word	0x40011000
 8004bb4:	40011400 	.word	0x40011400
 8004bb8:	51eb851f 	.word	0x51eb851f

08004bbc <__errno>:
 8004bbc:	4b01      	ldr	r3, [pc, #4]	; (8004bc4 <__errno+0x8>)
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	2000000c 	.word	0x2000000c

08004bc8 <__libc_init_array>:
 8004bc8:	b570      	push	{r4, r5, r6, lr}
 8004bca:	4e0d      	ldr	r6, [pc, #52]	; (8004c00 <__libc_init_array+0x38>)
 8004bcc:	4c0d      	ldr	r4, [pc, #52]	; (8004c04 <__libc_init_array+0x3c>)
 8004bce:	1ba4      	subs	r4, r4, r6
 8004bd0:	10a4      	asrs	r4, r4, #2
 8004bd2:	2500      	movs	r5, #0
 8004bd4:	42a5      	cmp	r5, r4
 8004bd6:	d109      	bne.n	8004bec <__libc_init_array+0x24>
 8004bd8:	4e0b      	ldr	r6, [pc, #44]	; (8004c08 <__libc_init_array+0x40>)
 8004bda:	4c0c      	ldr	r4, [pc, #48]	; (8004c0c <__libc_init_array+0x44>)
 8004bdc:	f000 fc26 	bl	800542c <_init>
 8004be0:	1ba4      	subs	r4, r4, r6
 8004be2:	10a4      	asrs	r4, r4, #2
 8004be4:	2500      	movs	r5, #0
 8004be6:	42a5      	cmp	r5, r4
 8004be8:	d105      	bne.n	8004bf6 <__libc_init_array+0x2e>
 8004bea:	bd70      	pop	{r4, r5, r6, pc}
 8004bec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bf0:	4798      	blx	r3
 8004bf2:	3501      	adds	r5, #1
 8004bf4:	e7ee      	b.n	8004bd4 <__libc_init_array+0xc>
 8004bf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bfa:	4798      	blx	r3
 8004bfc:	3501      	adds	r5, #1
 8004bfe:	e7f2      	b.n	8004be6 <__libc_init_array+0x1e>
 8004c00:	080054bc 	.word	0x080054bc
 8004c04:	080054bc 	.word	0x080054bc
 8004c08:	080054bc 	.word	0x080054bc
 8004c0c:	080054c0 	.word	0x080054c0

08004c10 <memset>:
 8004c10:	4402      	add	r2, r0
 8004c12:	4603      	mov	r3, r0
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d100      	bne.n	8004c1a <memset+0xa>
 8004c18:	4770      	bx	lr
 8004c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c1e:	e7f9      	b.n	8004c14 <memset+0x4>

08004c20 <siprintf>:
 8004c20:	b40e      	push	{r1, r2, r3}
 8004c22:	b500      	push	{lr}
 8004c24:	b09c      	sub	sp, #112	; 0x70
 8004c26:	ab1d      	add	r3, sp, #116	; 0x74
 8004c28:	9002      	str	r0, [sp, #8]
 8004c2a:	9006      	str	r0, [sp, #24]
 8004c2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c30:	4809      	ldr	r0, [pc, #36]	; (8004c58 <siprintf+0x38>)
 8004c32:	9107      	str	r1, [sp, #28]
 8004c34:	9104      	str	r1, [sp, #16]
 8004c36:	4909      	ldr	r1, [pc, #36]	; (8004c5c <siprintf+0x3c>)
 8004c38:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c3c:	9105      	str	r1, [sp, #20]
 8004c3e:	6800      	ldr	r0, [r0, #0]
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	a902      	add	r1, sp, #8
 8004c44:	f000 f866 	bl	8004d14 <_svfiprintf_r>
 8004c48:	9b02      	ldr	r3, [sp, #8]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	b01c      	add	sp, #112	; 0x70
 8004c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c54:	b003      	add	sp, #12
 8004c56:	4770      	bx	lr
 8004c58:	2000000c 	.word	0x2000000c
 8004c5c:	ffff0208 	.word	0xffff0208

08004c60 <__ssputs_r>:
 8004c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c64:	688e      	ldr	r6, [r1, #8]
 8004c66:	429e      	cmp	r6, r3
 8004c68:	4682      	mov	sl, r0
 8004c6a:	460c      	mov	r4, r1
 8004c6c:	4690      	mov	r8, r2
 8004c6e:	4699      	mov	r9, r3
 8004c70:	d837      	bhi.n	8004ce2 <__ssputs_r+0x82>
 8004c72:	898a      	ldrh	r2, [r1, #12]
 8004c74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c78:	d031      	beq.n	8004cde <__ssputs_r+0x7e>
 8004c7a:	6825      	ldr	r5, [r4, #0]
 8004c7c:	6909      	ldr	r1, [r1, #16]
 8004c7e:	1a6f      	subs	r7, r5, r1
 8004c80:	6965      	ldr	r5, [r4, #20]
 8004c82:	2302      	movs	r3, #2
 8004c84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c88:	fb95 f5f3 	sdiv	r5, r5, r3
 8004c8c:	f109 0301 	add.w	r3, r9, #1
 8004c90:	443b      	add	r3, r7
 8004c92:	429d      	cmp	r5, r3
 8004c94:	bf38      	it	cc
 8004c96:	461d      	movcc	r5, r3
 8004c98:	0553      	lsls	r3, r2, #21
 8004c9a:	d530      	bpl.n	8004cfe <__ssputs_r+0x9e>
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	f000 fb2b 	bl	80052f8 <_malloc_r>
 8004ca2:	4606      	mov	r6, r0
 8004ca4:	b950      	cbnz	r0, 8004cbc <__ssputs_r+0x5c>
 8004ca6:	230c      	movs	r3, #12
 8004ca8:	f8ca 3000 	str.w	r3, [sl]
 8004cac:	89a3      	ldrh	r3, [r4, #12]
 8004cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cb2:	81a3      	strh	r3, [r4, #12]
 8004cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cbc:	463a      	mov	r2, r7
 8004cbe:	6921      	ldr	r1, [r4, #16]
 8004cc0:	f000 faa8 	bl	8005214 <memcpy>
 8004cc4:	89a3      	ldrh	r3, [r4, #12]
 8004cc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cce:	81a3      	strh	r3, [r4, #12]
 8004cd0:	6126      	str	r6, [r4, #16]
 8004cd2:	6165      	str	r5, [r4, #20]
 8004cd4:	443e      	add	r6, r7
 8004cd6:	1bed      	subs	r5, r5, r7
 8004cd8:	6026      	str	r6, [r4, #0]
 8004cda:	60a5      	str	r5, [r4, #8]
 8004cdc:	464e      	mov	r6, r9
 8004cde:	454e      	cmp	r6, r9
 8004ce0:	d900      	bls.n	8004ce4 <__ssputs_r+0x84>
 8004ce2:	464e      	mov	r6, r9
 8004ce4:	4632      	mov	r2, r6
 8004ce6:	4641      	mov	r1, r8
 8004ce8:	6820      	ldr	r0, [r4, #0]
 8004cea:	f000 fa9e 	bl	800522a <memmove>
 8004cee:	68a3      	ldr	r3, [r4, #8]
 8004cf0:	1b9b      	subs	r3, r3, r6
 8004cf2:	60a3      	str	r3, [r4, #8]
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	441e      	add	r6, r3
 8004cf8:	6026      	str	r6, [r4, #0]
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	e7dc      	b.n	8004cb8 <__ssputs_r+0x58>
 8004cfe:	462a      	mov	r2, r5
 8004d00:	f000 fb54 	bl	80053ac <_realloc_r>
 8004d04:	4606      	mov	r6, r0
 8004d06:	2800      	cmp	r0, #0
 8004d08:	d1e2      	bne.n	8004cd0 <__ssputs_r+0x70>
 8004d0a:	6921      	ldr	r1, [r4, #16]
 8004d0c:	4650      	mov	r0, sl
 8004d0e:	f000 faa5 	bl	800525c <_free_r>
 8004d12:	e7c8      	b.n	8004ca6 <__ssputs_r+0x46>

08004d14 <_svfiprintf_r>:
 8004d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d18:	461d      	mov	r5, r3
 8004d1a:	898b      	ldrh	r3, [r1, #12]
 8004d1c:	061f      	lsls	r7, r3, #24
 8004d1e:	b09d      	sub	sp, #116	; 0x74
 8004d20:	4680      	mov	r8, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	4616      	mov	r6, r2
 8004d26:	d50f      	bpl.n	8004d48 <_svfiprintf_r+0x34>
 8004d28:	690b      	ldr	r3, [r1, #16]
 8004d2a:	b96b      	cbnz	r3, 8004d48 <_svfiprintf_r+0x34>
 8004d2c:	2140      	movs	r1, #64	; 0x40
 8004d2e:	f000 fae3 	bl	80052f8 <_malloc_r>
 8004d32:	6020      	str	r0, [r4, #0]
 8004d34:	6120      	str	r0, [r4, #16]
 8004d36:	b928      	cbnz	r0, 8004d44 <_svfiprintf_r+0x30>
 8004d38:	230c      	movs	r3, #12
 8004d3a:	f8c8 3000 	str.w	r3, [r8]
 8004d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d42:	e0c8      	b.n	8004ed6 <_svfiprintf_r+0x1c2>
 8004d44:	2340      	movs	r3, #64	; 0x40
 8004d46:	6163      	str	r3, [r4, #20]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d4c:	2320      	movs	r3, #32
 8004d4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d52:	2330      	movs	r3, #48	; 0x30
 8004d54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d58:	9503      	str	r5, [sp, #12]
 8004d5a:	f04f 0b01 	mov.w	fp, #1
 8004d5e:	4637      	mov	r7, r6
 8004d60:	463d      	mov	r5, r7
 8004d62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004d66:	b10b      	cbz	r3, 8004d6c <_svfiprintf_r+0x58>
 8004d68:	2b25      	cmp	r3, #37	; 0x25
 8004d6a:	d13e      	bne.n	8004dea <_svfiprintf_r+0xd6>
 8004d6c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004d70:	d00b      	beq.n	8004d8a <_svfiprintf_r+0x76>
 8004d72:	4653      	mov	r3, sl
 8004d74:	4632      	mov	r2, r6
 8004d76:	4621      	mov	r1, r4
 8004d78:	4640      	mov	r0, r8
 8004d7a:	f7ff ff71 	bl	8004c60 <__ssputs_r>
 8004d7e:	3001      	adds	r0, #1
 8004d80:	f000 80a4 	beq.w	8004ecc <_svfiprintf_r+0x1b8>
 8004d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d86:	4453      	add	r3, sl
 8004d88:	9309      	str	r3, [sp, #36]	; 0x24
 8004d8a:	783b      	ldrb	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 809d 	beq.w	8004ecc <_svfiprintf_r+0x1b8>
 8004d92:	2300      	movs	r3, #0
 8004d94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d9c:	9304      	str	r3, [sp, #16]
 8004d9e:	9307      	str	r3, [sp, #28]
 8004da0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004da4:	931a      	str	r3, [sp, #104]	; 0x68
 8004da6:	462f      	mov	r7, r5
 8004da8:	2205      	movs	r2, #5
 8004daa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004dae:	4850      	ldr	r0, [pc, #320]	; (8004ef0 <_svfiprintf_r+0x1dc>)
 8004db0:	f7fb fa16 	bl	80001e0 <memchr>
 8004db4:	9b04      	ldr	r3, [sp, #16]
 8004db6:	b9d0      	cbnz	r0, 8004dee <_svfiprintf_r+0xda>
 8004db8:	06d9      	lsls	r1, r3, #27
 8004dba:	bf44      	itt	mi
 8004dbc:	2220      	movmi	r2, #32
 8004dbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004dc2:	071a      	lsls	r2, r3, #28
 8004dc4:	bf44      	itt	mi
 8004dc6:	222b      	movmi	r2, #43	; 0x2b
 8004dc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004dcc:	782a      	ldrb	r2, [r5, #0]
 8004dce:	2a2a      	cmp	r2, #42	; 0x2a
 8004dd0:	d015      	beq.n	8004dfe <_svfiprintf_r+0xea>
 8004dd2:	9a07      	ldr	r2, [sp, #28]
 8004dd4:	462f      	mov	r7, r5
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	250a      	movs	r5, #10
 8004dda:	4639      	mov	r1, r7
 8004ddc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004de0:	3b30      	subs	r3, #48	; 0x30
 8004de2:	2b09      	cmp	r3, #9
 8004de4:	d94d      	bls.n	8004e82 <_svfiprintf_r+0x16e>
 8004de6:	b1b8      	cbz	r0, 8004e18 <_svfiprintf_r+0x104>
 8004de8:	e00f      	b.n	8004e0a <_svfiprintf_r+0xf6>
 8004dea:	462f      	mov	r7, r5
 8004dec:	e7b8      	b.n	8004d60 <_svfiprintf_r+0x4c>
 8004dee:	4a40      	ldr	r2, [pc, #256]	; (8004ef0 <_svfiprintf_r+0x1dc>)
 8004df0:	1a80      	subs	r0, r0, r2
 8004df2:	fa0b f000 	lsl.w	r0, fp, r0
 8004df6:	4318      	orrs	r0, r3
 8004df8:	9004      	str	r0, [sp, #16]
 8004dfa:	463d      	mov	r5, r7
 8004dfc:	e7d3      	b.n	8004da6 <_svfiprintf_r+0x92>
 8004dfe:	9a03      	ldr	r2, [sp, #12]
 8004e00:	1d11      	adds	r1, r2, #4
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	9103      	str	r1, [sp, #12]
 8004e06:	2a00      	cmp	r2, #0
 8004e08:	db01      	blt.n	8004e0e <_svfiprintf_r+0xfa>
 8004e0a:	9207      	str	r2, [sp, #28]
 8004e0c:	e004      	b.n	8004e18 <_svfiprintf_r+0x104>
 8004e0e:	4252      	negs	r2, r2
 8004e10:	f043 0302 	orr.w	r3, r3, #2
 8004e14:	9207      	str	r2, [sp, #28]
 8004e16:	9304      	str	r3, [sp, #16]
 8004e18:	783b      	ldrb	r3, [r7, #0]
 8004e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8004e1c:	d10c      	bne.n	8004e38 <_svfiprintf_r+0x124>
 8004e1e:	787b      	ldrb	r3, [r7, #1]
 8004e20:	2b2a      	cmp	r3, #42	; 0x2a
 8004e22:	d133      	bne.n	8004e8c <_svfiprintf_r+0x178>
 8004e24:	9b03      	ldr	r3, [sp, #12]
 8004e26:	1d1a      	adds	r2, r3, #4
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	9203      	str	r2, [sp, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	bfb8      	it	lt
 8004e30:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e34:	3702      	adds	r7, #2
 8004e36:	9305      	str	r3, [sp, #20]
 8004e38:	4d2e      	ldr	r5, [pc, #184]	; (8004ef4 <_svfiprintf_r+0x1e0>)
 8004e3a:	7839      	ldrb	r1, [r7, #0]
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f7fb f9ce 	bl	80001e0 <memchr>
 8004e44:	b138      	cbz	r0, 8004e56 <_svfiprintf_r+0x142>
 8004e46:	2340      	movs	r3, #64	; 0x40
 8004e48:	1b40      	subs	r0, r0, r5
 8004e4a:	fa03 f000 	lsl.w	r0, r3, r0
 8004e4e:	9b04      	ldr	r3, [sp, #16]
 8004e50:	4303      	orrs	r3, r0
 8004e52:	3701      	adds	r7, #1
 8004e54:	9304      	str	r3, [sp, #16]
 8004e56:	7839      	ldrb	r1, [r7, #0]
 8004e58:	4827      	ldr	r0, [pc, #156]	; (8004ef8 <_svfiprintf_r+0x1e4>)
 8004e5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e5e:	2206      	movs	r2, #6
 8004e60:	1c7e      	adds	r6, r7, #1
 8004e62:	f7fb f9bd 	bl	80001e0 <memchr>
 8004e66:	2800      	cmp	r0, #0
 8004e68:	d038      	beq.n	8004edc <_svfiprintf_r+0x1c8>
 8004e6a:	4b24      	ldr	r3, [pc, #144]	; (8004efc <_svfiprintf_r+0x1e8>)
 8004e6c:	bb13      	cbnz	r3, 8004eb4 <_svfiprintf_r+0x1a0>
 8004e6e:	9b03      	ldr	r3, [sp, #12]
 8004e70:	3307      	adds	r3, #7
 8004e72:	f023 0307 	bic.w	r3, r3, #7
 8004e76:	3308      	adds	r3, #8
 8004e78:	9303      	str	r3, [sp, #12]
 8004e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e7c:	444b      	add	r3, r9
 8004e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e80:	e76d      	b.n	8004d5e <_svfiprintf_r+0x4a>
 8004e82:	fb05 3202 	mla	r2, r5, r2, r3
 8004e86:	2001      	movs	r0, #1
 8004e88:	460f      	mov	r7, r1
 8004e8a:	e7a6      	b.n	8004dda <_svfiprintf_r+0xc6>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	3701      	adds	r7, #1
 8004e90:	9305      	str	r3, [sp, #20]
 8004e92:	4619      	mov	r1, r3
 8004e94:	250a      	movs	r5, #10
 8004e96:	4638      	mov	r0, r7
 8004e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e9c:	3a30      	subs	r2, #48	; 0x30
 8004e9e:	2a09      	cmp	r2, #9
 8004ea0:	d903      	bls.n	8004eaa <_svfiprintf_r+0x196>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0c8      	beq.n	8004e38 <_svfiprintf_r+0x124>
 8004ea6:	9105      	str	r1, [sp, #20]
 8004ea8:	e7c6      	b.n	8004e38 <_svfiprintf_r+0x124>
 8004eaa:	fb05 2101 	mla	r1, r5, r1, r2
 8004eae:	2301      	movs	r3, #1
 8004eb0:	4607      	mov	r7, r0
 8004eb2:	e7f0      	b.n	8004e96 <_svfiprintf_r+0x182>
 8004eb4:	ab03      	add	r3, sp, #12
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	4622      	mov	r2, r4
 8004eba:	4b11      	ldr	r3, [pc, #68]	; (8004f00 <_svfiprintf_r+0x1ec>)
 8004ebc:	a904      	add	r1, sp, #16
 8004ebe:	4640      	mov	r0, r8
 8004ec0:	f3af 8000 	nop.w
 8004ec4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004ec8:	4681      	mov	r9, r0
 8004eca:	d1d6      	bne.n	8004e7a <_svfiprintf_r+0x166>
 8004ecc:	89a3      	ldrh	r3, [r4, #12]
 8004ece:	065b      	lsls	r3, r3, #25
 8004ed0:	f53f af35 	bmi.w	8004d3e <_svfiprintf_r+0x2a>
 8004ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ed6:	b01d      	add	sp, #116	; 0x74
 8004ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004edc:	ab03      	add	r3, sp, #12
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	4622      	mov	r2, r4
 8004ee2:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <_svfiprintf_r+0x1ec>)
 8004ee4:	a904      	add	r1, sp, #16
 8004ee6:	4640      	mov	r0, r8
 8004ee8:	f000 f882 	bl	8004ff0 <_printf_i>
 8004eec:	e7ea      	b.n	8004ec4 <_svfiprintf_r+0x1b0>
 8004eee:	bf00      	nop
 8004ef0:	08005480 	.word	0x08005480
 8004ef4:	08005486 	.word	0x08005486
 8004ef8:	0800548a 	.word	0x0800548a
 8004efc:	00000000 	.word	0x00000000
 8004f00:	08004c61 	.word	0x08004c61

08004f04 <_printf_common>:
 8004f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f08:	4691      	mov	r9, r2
 8004f0a:	461f      	mov	r7, r3
 8004f0c:	688a      	ldr	r2, [r1, #8]
 8004f0e:	690b      	ldr	r3, [r1, #16]
 8004f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f14:	4293      	cmp	r3, r2
 8004f16:	bfb8      	it	lt
 8004f18:	4613      	movlt	r3, r2
 8004f1a:	f8c9 3000 	str.w	r3, [r9]
 8004f1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f22:	4606      	mov	r6, r0
 8004f24:	460c      	mov	r4, r1
 8004f26:	b112      	cbz	r2, 8004f2e <_printf_common+0x2a>
 8004f28:	3301      	adds	r3, #1
 8004f2a:	f8c9 3000 	str.w	r3, [r9]
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	0699      	lsls	r1, r3, #26
 8004f32:	bf42      	ittt	mi
 8004f34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f38:	3302      	addmi	r3, #2
 8004f3a:	f8c9 3000 	strmi.w	r3, [r9]
 8004f3e:	6825      	ldr	r5, [r4, #0]
 8004f40:	f015 0506 	ands.w	r5, r5, #6
 8004f44:	d107      	bne.n	8004f56 <_printf_common+0x52>
 8004f46:	f104 0a19 	add.w	sl, r4, #25
 8004f4a:	68e3      	ldr	r3, [r4, #12]
 8004f4c:	f8d9 2000 	ldr.w	r2, [r9]
 8004f50:	1a9b      	subs	r3, r3, r2
 8004f52:	42ab      	cmp	r3, r5
 8004f54:	dc28      	bgt.n	8004fa8 <_printf_common+0xa4>
 8004f56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f5a:	6822      	ldr	r2, [r4, #0]
 8004f5c:	3300      	adds	r3, #0
 8004f5e:	bf18      	it	ne
 8004f60:	2301      	movne	r3, #1
 8004f62:	0692      	lsls	r2, r2, #26
 8004f64:	d42d      	bmi.n	8004fc2 <_printf_common+0xbe>
 8004f66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f6a:	4639      	mov	r1, r7
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	47c0      	blx	r8
 8004f70:	3001      	adds	r0, #1
 8004f72:	d020      	beq.n	8004fb6 <_printf_common+0xb2>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	68e5      	ldr	r5, [r4, #12]
 8004f78:	f8d9 2000 	ldr.w	r2, [r9]
 8004f7c:	f003 0306 	and.w	r3, r3, #6
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	bf08      	it	eq
 8004f84:	1aad      	subeq	r5, r5, r2
 8004f86:	68a3      	ldr	r3, [r4, #8]
 8004f88:	6922      	ldr	r2, [r4, #16]
 8004f8a:	bf0c      	ite	eq
 8004f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f90:	2500      	movne	r5, #0
 8004f92:	4293      	cmp	r3, r2
 8004f94:	bfc4      	itt	gt
 8004f96:	1a9b      	subgt	r3, r3, r2
 8004f98:	18ed      	addgt	r5, r5, r3
 8004f9a:	f04f 0900 	mov.w	r9, #0
 8004f9e:	341a      	adds	r4, #26
 8004fa0:	454d      	cmp	r5, r9
 8004fa2:	d11a      	bne.n	8004fda <_printf_common+0xd6>
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	e008      	b.n	8004fba <_printf_common+0xb6>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	4652      	mov	r2, sl
 8004fac:	4639      	mov	r1, r7
 8004fae:	4630      	mov	r0, r6
 8004fb0:	47c0      	blx	r8
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	d103      	bne.n	8004fbe <_printf_common+0xba>
 8004fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fbe:	3501      	adds	r5, #1
 8004fc0:	e7c3      	b.n	8004f4a <_printf_common+0x46>
 8004fc2:	18e1      	adds	r1, r4, r3
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	2030      	movs	r0, #48	; 0x30
 8004fc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fcc:	4422      	add	r2, r4
 8004fce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fd2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fd6:	3302      	adds	r3, #2
 8004fd8:	e7c5      	b.n	8004f66 <_printf_common+0x62>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4622      	mov	r2, r4
 8004fde:	4639      	mov	r1, r7
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	47c0      	blx	r8
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d0e6      	beq.n	8004fb6 <_printf_common+0xb2>
 8004fe8:	f109 0901 	add.w	r9, r9, #1
 8004fec:	e7d8      	b.n	8004fa0 <_printf_common+0x9c>
	...

08004ff0 <_printf_i>:
 8004ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ff4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	7e09      	ldrb	r1, [r1, #24]
 8004ffc:	b085      	sub	sp, #20
 8004ffe:	296e      	cmp	r1, #110	; 0x6e
 8005000:	4617      	mov	r7, r2
 8005002:	4606      	mov	r6, r0
 8005004:	4698      	mov	r8, r3
 8005006:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005008:	f000 80b3 	beq.w	8005172 <_printf_i+0x182>
 800500c:	d822      	bhi.n	8005054 <_printf_i+0x64>
 800500e:	2963      	cmp	r1, #99	; 0x63
 8005010:	d036      	beq.n	8005080 <_printf_i+0x90>
 8005012:	d80a      	bhi.n	800502a <_printf_i+0x3a>
 8005014:	2900      	cmp	r1, #0
 8005016:	f000 80b9 	beq.w	800518c <_printf_i+0x19c>
 800501a:	2958      	cmp	r1, #88	; 0x58
 800501c:	f000 8083 	beq.w	8005126 <_printf_i+0x136>
 8005020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005024:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005028:	e032      	b.n	8005090 <_printf_i+0xa0>
 800502a:	2964      	cmp	r1, #100	; 0x64
 800502c:	d001      	beq.n	8005032 <_printf_i+0x42>
 800502e:	2969      	cmp	r1, #105	; 0x69
 8005030:	d1f6      	bne.n	8005020 <_printf_i+0x30>
 8005032:	6820      	ldr	r0, [r4, #0]
 8005034:	6813      	ldr	r3, [r2, #0]
 8005036:	0605      	lsls	r5, r0, #24
 8005038:	f103 0104 	add.w	r1, r3, #4
 800503c:	d52a      	bpl.n	8005094 <_printf_i+0xa4>
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6011      	str	r1, [r2, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	da03      	bge.n	800504e <_printf_i+0x5e>
 8005046:	222d      	movs	r2, #45	; 0x2d
 8005048:	425b      	negs	r3, r3
 800504a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800504e:	486f      	ldr	r0, [pc, #444]	; (800520c <_printf_i+0x21c>)
 8005050:	220a      	movs	r2, #10
 8005052:	e039      	b.n	80050c8 <_printf_i+0xd8>
 8005054:	2973      	cmp	r1, #115	; 0x73
 8005056:	f000 809d 	beq.w	8005194 <_printf_i+0x1a4>
 800505a:	d808      	bhi.n	800506e <_printf_i+0x7e>
 800505c:	296f      	cmp	r1, #111	; 0x6f
 800505e:	d020      	beq.n	80050a2 <_printf_i+0xb2>
 8005060:	2970      	cmp	r1, #112	; 0x70
 8005062:	d1dd      	bne.n	8005020 <_printf_i+0x30>
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	f043 0320 	orr.w	r3, r3, #32
 800506a:	6023      	str	r3, [r4, #0]
 800506c:	e003      	b.n	8005076 <_printf_i+0x86>
 800506e:	2975      	cmp	r1, #117	; 0x75
 8005070:	d017      	beq.n	80050a2 <_printf_i+0xb2>
 8005072:	2978      	cmp	r1, #120	; 0x78
 8005074:	d1d4      	bne.n	8005020 <_printf_i+0x30>
 8005076:	2378      	movs	r3, #120	; 0x78
 8005078:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800507c:	4864      	ldr	r0, [pc, #400]	; (8005210 <_printf_i+0x220>)
 800507e:	e055      	b.n	800512c <_printf_i+0x13c>
 8005080:	6813      	ldr	r3, [r2, #0]
 8005082:	1d19      	adds	r1, r3, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6011      	str	r1, [r2, #0]
 8005088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800508c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005090:	2301      	movs	r3, #1
 8005092:	e08c      	b.n	80051ae <_printf_i+0x1be>
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6011      	str	r1, [r2, #0]
 8005098:	f010 0f40 	tst.w	r0, #64	; 0x40
 800509c:	bf18      	it	ne
 800509e:	b21b      	sxthne	r3, r3
 80050a0:	e7cf      	b.n	8005042 <_printf_i+0x52>
 80050a2:	6813      	ldr	r3, [r2, #0]
 80050a4:	6825      	ldr	r5, [r4, #0]
 80050a6:	1d18      	adds	r0, r3, #4
 80050a8:	6010      	str	r0, [r2, #0]
 80050aa:	0628      	lsls	r0, r5, #24
 80050ac:	d501      	bpl.n	80050b2 <_printf_i+0xc2>
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	e002      	b.n	80050b8 <_printf_i+0xc8>
 80050b2:	0668      	lsls	r0, r5, #25
 80050b4:	d5fb      	bpl.n	80050ae <_printf_i+0xbe>
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	4854      	ldr	r0, [pc, #336]	; (800520c <_printf_i+0x21c>)
 80050ba:	296f      	cmp	r1, #111	; 0x6f
 80050bc:	bf14      	ite	ne
 80050be:	220a      	movne	r2, #10
 80050c0:	2208      	moveq	r2, #8
 80050c2:	2100      	movs	r1, #0
 80050c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050c8:	6865      	ldr	r5, [r4, #4]
 80050ca:	60a5      	str	r5, [r4, #8]
 80050cc:	2d00      	cmp	r5, #0
 80050ce:	f2c0 8095 	blt.w	80051fc <_printf_i+0x20c>
 80050d2:	6821      	ldr	r1, [r4, #0]
 80050d4:	f021 0104 	bic.w	r1, r1, #4
 80050d8:	6021      	str	r1, [r4, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d13d      	bne.n	800515a <_printf_i+0x16a>
 80050de:	2d00      	cmp	r5, #0
 80050e0:	f040 808e 	bne.w	8005200 <_printf_i+0x210>
 80050e4:	4665      	mov	r5, ip
 80050e6:	2a08      	cmp	r2, #8
 80050e8:	d10b      	bne.n	8005102 <_printf_i+0x112>
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	07db      	lsls	r3, r3, #31
 80050ee:	d508      	bpl.n	8005102 <_printf_i+0x112>
 80050f0:	6923      	ldr	r3, [r4, #16]
 80050f2:	6862      	ldr	r2, [r4, #4]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	bfde      	ittt	le
 80050f8:	2330      	movle	r3, #48	; 0x30
 80050fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050fe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005102:	ebac 0305 	sub.w	r3, ip, r5
 8005106:	6123      	str	r3, [r4, #16]
 8005108:	f8cd 8000 	str.w	r8, [sp]
 800510c:	463b      	mov	r3, r7
 800510e:	aa03      	add	r2, sp, #12
 8005110:	4621      	mov	r1, r4
 8005112:	4630      	mov	r0, r6
 8005114:	f7ff fef6 	bl	8004f04 <_printf_common>
 8005118:	3001      	adds	r0, #1
 800511a:	d14d      	bne.n	80051b8 <_printf_i+0x1c8>
 800511c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005120:	b005      	add	sp, #20
 8005122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005126:	4839      	ldr	r0, [pc, #228]	; (800520c <_printf_i+0x21c>)
 8005128:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800512c:	6813      	ldr	r3, [r2, #0]
 800512e:	6821      	ldr	r1, [r4, #0]
 8005130:	1d1d      	adds	r5, r3, #4
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6015      	str	r5, [r2, #0]
 8005136:	060a      	lsls	r2, r1, #24
 8005138:	d50b      	bpl.n	8005152 <_printf_i+0x162>
 800513a:	07ca      	lsls	r2, r1, #31
 800513c:	bf44      	itt	mi
 800513e:	f041 0120 	orrmi.w	r1, r1, #32
 8005142:	6021      	strmi	r1, [r4, #0]
 8005144:	b91b      	cbnz	r3, 800514e <_printf_i+0x15e>
 8005146:	6822      	ldr	r2, [r4, #0]
 8005148:	f022 0220 	bic.w	r2, r2, #32
 800514c:	6022      	str	r2, [r4, #0]
 800514e:	2210      	movs	r2, #16
 8005150:	e7b7      	b.n	80050c2 <_printf_i+0xd2>
 8005152:	064d      	lsls	r5, r1, #25
 8005154:	bf48      	it	mi
 8005156:	b29b      	uxthmi	r3, r3
 8005158:	e7ef      	b.n	800513a <_printf_i+0x14a>
 800515a:	4665      	mov	r5, ip
 800515c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005160:	fb02 3311 	mls	r3, r2, r1, r3
 8005164:	5cc3      	ldrb	r3, [r0, r3]
 8005166:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800516a:	460b      	mov	r3, r1
 800516c:	2900      	cmp	r1, #0
 800516e:	d1f5      	bne.n	800515c <_printf_i+0x16c>
 8005170:	e7b9      	b.n	80050e6 <_printf_i+0xf6>
 8005172:	6813      	ldr	r3, [r2, #0]
 8005174:	6825      	ldr	r5, [r4, #0]
 8005176:	6961      	ldr	r1, [r4, #20]
 8005178:	1d18      	adds	r0, r3, #4
 800517a:	6010      	str	r0, [r2, #0]
 800517c:	0628      	lsls	r0, r5, #24
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	d501      	bpl.n	8005186 <_printf_i+0x196>
 8005182:	6019      	str	r1, [r3, #0]
 8005184:	e002      	b.n	800518c <_printf_i+0x19c>
 8005186:	066a      	lsls	r2, r5, #25
 8005188:	d5fb      	bpl.n	8005182 <_printf_i+0x192>
 800518a:	8019      	strh	r1, [r3, #0]
 800518c:	2300      	movs	r3, #0
 800518e:	6123      	str	r3, [r4, #16]
 8005190:	4665      	mov	r5, ip
 8005192:	e7b9      	b.n	8005108 <_printf_i+0x118>
 8005194:	6813      	ldr	r3, [r2, #0]
 8005196:	1d19      	adds	r1, r3, #4
 8005198:	6011      	str	r1, [r2, #0]
 800519a:	681d      	ldr	r5, [r3, #0]
 800519c:	6862      	ldr	r2, [r4, #4]
 800519e:	2100      	movs	r1, #0
 80051a0:	4628      	mov	r0, r5
 80051a2:	f7fb f81d 	bl	80001e0 <memchr>
 80051a6:	b108      	cbz	r0, 80051ac <_printf_i+0x1bc>
 80051a8:	1b40      	subs	r0, r0, r5
 80051aa:	6060      	str	r0, [r4, #4]
 80051ac:	6863      	ldr	r3, [r4, #4]
 80051ae:	6123      	str	r3, [r4, #16]
 80051b0:	2300      	movs	r3, #0
 80051b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b6:	e7a7      	b.n	8005108 <_printf_i+0x118>
 80051b8:	6923      	ldr	r3, [r4, #16]
 80051ba:	462a      	mov	r2, r5
 80051bc:	4639      	mov	r1, r7
 80051be:	4630      	mov	r0, r6
 80051c0:	47c0      	blx	r8
 80051c2:	3001      	adds	r0, #1
 80051c4:	d0aa      	beq.n	800511c <_printf_i+0x12c>
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	079b      	lsls	r3, r3, #30
 80051ca:	d413      	bmi.n	80051f4 <_printf_i+0x204>
 80051cc:	68e0      	ldr	r0, [r4, #12]
 80051ce:	9b03      	ldr	r3, [sp, #12]
 80051d0:	4298      	cmp	r0, r3
 80051d2:	bfb8      	it	lt
 80051d4:	4618      	movlt	r0, r3
 80051d6:	e7a3      	b.n	8005120 <_printf_i+0x130>
 80051d8:	2301      	movs	r3, #1
 80051da:	464a      	mov	r2, r9
 80051dc:	4639      	mov	r1, r7
 80051de:	4630      	mov	r0, r6
 80051e0:	47c0      	blx	r8
 80051e2:	3001      	adds	r0, #1
 80051e4:	d09a      	beq.n	800511c <_printf_i+0x12c>
 80051e6:	3501      	adds	r5, #1
 80051e8:	68e3      	ldr	r3, [r4, #12]
 80051ea:	9a03      	ldr	r2, [sp, #12]
 80051ec:	1a9b      	subs	r3, r3, r2
 80051ee:	42ab      	cmp	r3, r5
 80051f0:	dcf2      	bgt.n	80051d8 <_printf_i+0x1e8>
 80051f2:	e7eb      	b.n	80051cc <_printf_i+0x1dc>
 80051f4:	2500      	movs	r5, #0
 80051f6:	f104 0919 	add.w	r9, r4, #25
 80051fa:	e7f5      	b.n	80051e8 <_printf_i+0x1f8>
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1ac      	bne.n	800515a <_printf_i+0x16a>
 8005200:	7803      	ldrb	r3, [r0, #0]
 8005202:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005206:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800520a:	e76c      	b.n	80050e6 <_printf_i+0xf6>
 800520c:	08005491 	.word	0x08005491
 8005210:	080054a2 	.word	0x080054a2

08005214 <memcpy>:
 8005214:	b510      	push	{r4, lr}
 8005216:	1e43      	subs	r3, r0, #1
 8005218:	440a      	add	r2, r1
 800521a:	4291      	cmp	r1, r2
 800521c:	d100      	bne.n	8005220 <memcpy+0xc>
 800521e:	bd10      	pop	{r4, pc}
 8005220:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005224:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005228:	e7f7      	b.n	800521a <memcpy+0x6>

0800522a <memmove>:
 800522a:	4288      	cmp	r0, r1
 800522c:	b510      	push	{r4, lr}
 800522e:	eb01 0302 	add.w	r3, r1, r2
 8005232:	d807      	bhi.n	8005244 <memmove+0x1a>
 8005234:	1e42      	subs	r2, r0, #1
 8005236:	4299      	cmp	r1, r3
 8005238:	d00a      	beq.n	8005250 <memmove+0x26>
 800523a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800523e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005242:	e7f8      	b.n	8005236 <memmove+0xc>
 8005244:	4283      	cmp	r3, r0
 8005246:	d9f5      	bls.n	8005234 <memmove+0xa>
 8005248:	1881      	adds	r1, r0, r2
 800524a:	1ad2      	subs	r2, r2, r3
 800524c:	42d3      	cmn	r3, r2
 800524e:	d100      	bne.n	8005252 <memmove+0x28>
 8005250:	bd10      	pop	{r4, pc}
 8005252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005256:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800525a:	e7f7      	b.n	800524c <memmove+0x22>

0800525c <_free_r>:
 800525c:	b538      	push	{r3, r4, r5, lr}
 800525e:	4605      	mov	r5, r0
 8005260:	2900      	cmp	r1, #0
 8005262:	d045      	beq.n	80052f0 <_free_r+0x94>
 8005264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005268:	1f0c      	subs	r4, r1, #4
 800526a:	2b00      	cmp	r3, #0
 800526c:	bfb8      	it	lt
 800526e:	18e4      	addlt	r4, r4, r3
 8005270:	f000 f8d2 	bl	8005418 <__malloc_lock>
 8005274:	4a1f      	ldr	r2, [pc, #124]	; (80052f4 <_free_r+0x98>)
 8005276:	6813      	ldr	r3, [r2, #0]
 8005278:	4610      	mov	r0, r2
 800527a:	b933      	cbnz	r3, 800528a <_free_r+0x2e>
 800527c:	6063      	str	r3, [r4, #4]
 800527e:	6014      	str	r4, [r2, #0]
 8005280:	4628      	mov	r0, r5
 8005282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005286:	f000 b8c8 	b.w	800541a <__malloc_unlock>
 800528a:	42a3      	cmp	r3, r4
 800528c:	d90c      	bls.n	80052a8 <_free_r+0x4c>
 800528e:	6821      	ldr	r1, [r4, #0]
 8005290:	1862      	adds	r2, r4, r1
 8005292:	4293      	cmp	r3, r2
 8005294:	bf04      	itt	eq
 8005296:	681a      	ldreq	r2, [r3, #0]
 8005298:	685b      	ldreq	r3, [r3, #4]
 800529a:	6063      	str	r3, [r4, #4]
 800529c:	bf04      	itt	eq
 800529e:	1852      	addeq	r2, r2, r1
 80052a0:	6022      	streq	r2, [r4, #0]
 80052a2:	6004      	str	r4, [r0, #0]
 80052a4:	e7ec      	b.n	8005280 <_free_r+0x24>
 80052a6:	4613      	mov	r3, r2
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	b10a      	cbz	r2, 80052b0 <_free_r+0x54>
 80052ac:	42a2      	cmp	r2, r4
 80052ae:	d9fa      	bls.n	80052a6 <_free_r+0x4a>
 80052b0:	6819      	ldr	r1, [r3, #0]
 80052b2:	1858      	adds	r0, r3, r1
 80052b4:	42a0      	cmp	r0, r4
 80052b6:	d10b      	bne.n	80052d0 <_free_r+0x74>
 80052b8:	6820      	ldr	r0, [r4, #0]
 80052ba:	4401      	add	r1, r0
 80052bc:	1858      	adds	r0, r3, r1
 80052be:	4282      	cmp	r2, r0
 80052c0:	6019      	str	r1, [r3, #0]
 80052c2:	d1dd      	bne.n	8005280 <_free_r+0x24>
 80052c4:	6810      	ldr	r0, [r2, #0]
 80052c6:	6852      	ldr	r2, [r2, #4]
 80052c8:	605a      	str	r2, [r3, #4]
 80052ca:	4401      	add	r1, r0
 80052cc:	6019      	str	r1, [r3, #0]
 80052ce:	e7d7      	b.n	8005280 <_free_r+0x24>
 80052d0:	d902      	bls.n	80052d8 <_free_r+0x7c>
 80052d2:	230c      	movs	r3, #12
 80052d4:	602b      	str	r3, [r5, #0]
 80052d6:	e7d3      	b.n	8005280 <_free_r+0x24>
 80052d8:	6820      	ldr	r0, [r4, #0]
 80052da:	1821      	adds	r1, r4, r0
 80052dc:	428a      	cmp	r2, r1
 80052de:	bf04      	itt	eq
 80052e0:	6811      	ldreq	r1, [r2, #0]
 80052e2:	6852      	ldreq	r2, [r2, #4]
 80052e4:	6062      	str	r2, [r4, #4]
 80052e6:	bf04      	itt	eq
 80052e8:	1809      	addeq	r1, r1, r0
 80052ea:	6021      	streq	r1, [r4, #0]
 80052ec:	605c      	str	r4, [r3, #4]
 80052ee:	e7c7      	b.n	8005280 <_free_r+0x24>
 80052f0:	bd38      	pop	{r3, r4, r5, pc}
 80052f2:	bf00      	nop
 80052f4:	20000090 	.word	0x20000090

080052f8 <_malloc_r>:
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	1ccd      	adds	r5, r1, #3
 80052fc:	f025 0503 	bic.w	r5, r5, #3
 8005300:	3508      	adds	r5, #8
 8005302:	2d0c      	cmp	r5, #12
 8005304:	bf38      	it	cc
 8005306:	250c      	movcc	r5, #12
 8005308:	2d00      	cmp	r5, #0
 800530a:	4606      	mov	r6, r0
 800530c:	db01      	blt.n	8005312 <_malloc_r+0x1a>
 800530e:	42a9      	cmp	r1, r5
 8005310:	d903      	bls.n	800531a <_malloc_r+0x22>
 8005312:	230c      	movs	r3, #12
 8005314:	6033      	str	r3, [r6, #0]
 8005316:	2000      	movs	r0, #0
 8005318:	bd70      	pop	{r4, r5, r6, pc}
 800531a:	f000 f87d 	bl	8005418 <__malloc_lock>
 800531e:	4a21      	ldr	r2, [pc, #132]	; (80053a4 <_malloc_r+0xac>)
 8005320:	6814      	ldr	r4, [r2, #0]
 8005322:	4621      	mov	r1, r4
 8005324:	b991      	cbnz	r1, 800534c <_malloc_r+0x54>
 8005326:	4c20      	ldr	r4, [pc, #128]	; (80053a8 <_malloc_r+0xb0>)
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	b91b      	cbnz	r3, 8005334 <_malloc_r+0x3c>
 800532c:	4630      	mov	r0, r6
 800532e:	f000 f863 	bl	80053f8 <_sbrk_r>
 8005332:	6020      	str	r0, [r4, #0]
 8005334:	4629      	mov	r1, r5
 8005336:	4630      	mov	r0, r6
 8005338:	f000 f85e 	bl	80053f8 <_sbrk_r>
 800533c:	1c43      	adds	r3, r0, #1
 800533e:	d124      	bne.n	800538a <_malloc_r+0x92>
 8005340:	230c      	movs	r3, #12
 8005342:	6033      	str	r3, [r6, #0]
 8005344:	4630      	mov	r0, r6
 8005346:	f000 f868 	bl	800541a <__malloc_unlock>
 800534a:	e7e4      	b.n	8005316 <_malloc_r+0x1e>
 800534c:	680b      	ldr	r3, [r1, #0]
 800534e:	1b5b      	subs	r3, r3, r5
 8005350:	d418      	bmi.n	8005384 <_malloc_r+0x8c>
 8005352:	2b0b      	cmp	r3, #11
 8005354:	d90f      	bls.n	8005376 <_malloc_r+0x7e>
 8005356:	600b      	str	r3, [r1, #0]
 8005358:	50cd      	str	r5, [r1, r3]
 800535a:	18cc      	adds	r4, r1, r3
 800535c:	4630      	mov	r0, r6
 800535e:	f000 f85c 	bl	800541a <__malloc_unlock>
 8005362:	f104 000b 	add.w	r0, r4, #11
 8005366:	1d23      	adds	r3, r4, #4
 8005368:	f020 0007 	bic.w	r0, r0, #7
 800536c:	1ac3      	subs	r3, r0, r3
 800536e:	d0d3      	beq.n	8005318 <_malloc_r+0x20>
 8005370:	425a      	negs	r2, r3
 8005372:	50e2      	str	r2, [r4, r3]
 8005374:	e7d0      	b.n	8005318 <_malloc_r+0x20>
 8005376:	428c      	cmp	r4, r1
 8005378:	684b      	ldr	r3, [r1, #4]
 800537a:	bf16      	itet	ne
 800537c:	6063      	strne	r3, [r4, #4]
 800537e:	6013      	streq	r3, [r2, #0]
 8005380:	460c      	movne	r4, r1
 8005382:	e7eb      	b.n	800535c <_malloc_r+0x64>
 8005384:	460c      	mov	r4, r1
 8005386:	6849      	ldr	r1, [r1, #4]
 8005388:	e7cc      	b.n	8005324 <_malloc_r+0x2c>
 800538a:	1cc4      	adds	r4, r0, #3
 800538c:	f024 0403 	bic.w	r4, r4, #3
 8005390:	42a0      	cmp	r0, r4
 8005392:	d005      	beq.n	80053a0 <_malloc_r+0xa8>
 8005394:	1a21      	subs	r1, r4, r0
 8005396:	4630      	mov	r0, r6
 8005398:	f000 f82e 	bl	80053f8 <_sbrk_r>
 800539c:	3001      	adds	r0, #1
 800539e:	d0cf      	beq.n	8005340 <_malloc_r+0x48>
 80053a0:	6025      	str	r5, [r4, #0]
 80053a2:	e7db      	b.n	800535c <_malloc_r+0x64>
 80053a4:	20000090 	.word	0x20000090
 80053a8:	20000094 	.word	0x20000094

080053ac <_realloc_r>:
 80053ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ae:	4607      	mov	r7, r0
 80053b0:	4614      	mov	r4, r2
 80053b2:	460e      	mov	r6, r1
 80053b4:	b921      	cbnz	r1, 80053c0 <_realloc_r+0x14>
 80053b6:	4611      	mov	r1, r2
 80053b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80053bc:	f7ff bf9c 	b.w	80052f8 <_malloc_r>
 80053c0:	b922      	cbnz	r2, 80053cc <_realloc_r+0x20>
 80053c2:	f7ff ff4b 	bl	800525c <_free_r>
 80053c6:	4625      	mov	r5, r4
 80053c8:	4628      	mov	r0, r5
 80053ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053cc:	f000 f826 	bl	800541c <_malloc_usable_size_r>
 80053d0:	42a0      	cmp	r0, r4
 80053d2:	d20f      	bcs.n	80053f4 <_realloc_r+0x48>
 80053d4:	4621      	mov	r1, r4
 80053d6:	4638      	mov	r0, r7
 80053d8:	f7ff ff8e 	bl	80052f8 <_malloc_r>
 80053dc:	4605      	mov	r5, r0
 80053de:	2800      	cmp	r0, #0
 80053e0:	d0f2      	beq.n	80053c8 <_realloc_r+0x1c>
 80053e2:	4631      	mov	r1, r6
 80053e4:	4622      	mov	r2, r4
 80053e6:	f7ff ff15 	bl	8005214 <memcpy>
 80053ea:	4631      	mov	r1, r6
 80053ec:	4638      	mov	r0, r7
 80053ee:	f7ff ff35 	bl	800525c <_free_r>
 80053f2:	e7e9      	b.n	80053c8 <_realloc_r+0x1c>
 80053f4:	4635      	mov	r5, r6
 80053f6:	e7e7      	b.n	80053c8 <_realloc_r+0x1c>

080053f8 <_sbrk_r>:
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	4c06      	ldr	r4, [pc, #24]	; (8005414 <_sbrk_r+0x1c>)
 80053fc:	2300      	movs	r3, #0
 80053fe:	4605      	mov	r5, r0
 8005400:	4608      	mov	r0, r1
 8005402:	6023      	str	r3, [r4, #0]
 8005404:	f7fc fd46 	bl	8001e94 <_sbrk>
 8005408:	1c43      	adds	r3, r0, #1
 800540a:	d102      	bne.n	8005412 <_sbrk_r+0x1a>
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	b103      	cbz	r3, 8005412 <_sbrk_r+0x1a>
 8005410:	602b      	str	r3, [r5, #0]
 8005412:	bd38      	pop	{r3, r4, r5, pc}
 8005414:	20000330 	.word	0x20000330

08005418 <__malloc_lock>:
 8005418:	4770      	bx	lr

0800541a <__malloc_unlock>:
 800541a:	4770      	bx	lr

0800541c <_malloc_usable_size_r>:
 800541c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005420:	1f18      	subs	r0, r3, #4
 8005422:	2b00      	cmp	r3, #0
 8005424:	bfbc      	itt	lt
 8005426:	580b      	ldrlt	r3, [r1, r0]
 8005428:	18c0      	addlt	r0, r0, r3
 800542a:	4770      	bx	lr

0800542c <_init>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	bf00      	nop
 8005430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005432:	bc08      	pop	{r3}
 8005434:	469e      	mov	lr, r3
 8005436:	4770      	bx	lr

08005438 <_fini>:
 8005438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543a:	bf00      	nop
 800543c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543e:	bc08      	pop	{r3}
 8005440:	469e      	mov	lr, r3
 8005442:	4770      	bx	lr
