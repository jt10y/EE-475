
test_no_default.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004f98  08004f98  00014f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800502c  0800502c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005034  08005034  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005034  08005034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005038  08005038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800503c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000070  080050ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080050ac  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f161  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e19  00000000  00000000  0002f201  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fe8  00000000  00000000  00031020  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f10  00000000  00000000  00032008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000222f9  00000000  00000000  00032f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bc1f  00000000  00000000  00055211  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d25f0  00000000  00000000  00060e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00133420  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004790  00000000  00000000  0013349c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f80 	.word	0x08004f80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004f80 	.word	0x08004f80

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b098      	sub	sp, #96	; 0x60
 8000584:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f001 f97f 	bl	8001888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f889 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fb0d 	bl	8000bac <MX_GPIO_Init>
  MX_ADC1_Init();
 8000592:	f000 f8ef 	bl	8000774 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000596:	f000 fadf 	bl	8000b58 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 800059a:	f000 f93d 	bl	8000818 <MX_ADC2_Init>
  MX_I2C1_Init();
 800059e:	f000 f9c1 	bl	8000924 <MX_I2C1_Init>
  MX_DAC_Init();
 80005a2:	f000 f98b 	bl	80008bc <MX_DAC_Init>
  MX_TIM3_Init();
 80005a6:	f000 f9eb 	bl	8000980 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005aa:	f000 fa5f 	bl	8000a6c <MX_TIM4_Init>
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Start PWMs
  HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 80005ae:	2100      	movs	r1, #0
 80005b0:	482e      	ldr	r0, [pc, #184]	; (800066c <main+0xec>)
 80005b2:	f002 feb9 	bl	8003328 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start (&htim4, TIM_CHANNEL_2);
 80005b6:	2104      	movs	r1, #4
 80005b8:	482d      	ldr	r0, [pc, #180]	; (8000670 <main+0xf0>)
 80005ba:	f002 feb5 	bl	8003328 <HAL_TIM_PWM_Start>
  while (1)
  {
    // Read ADC value
    ADC_1 = ADC_Read(&hadc1);
 80005be:	482d      	ldr	r0, [pc, #180]	; (8000674 <main+0xf4>)
 80005c0:	f000 fc32 	bl	8000e28 <ADC_Read>
 80005c4:	4603      	mov	r3, r0
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <main+0xf8>)
 80005ca:	801a      	strh	r2, [r3, #0]
    ADC_2 = ADC_Read(&hadc2);
 80005cc:	482b      	ldr	r0, [pc, #172]	; (800067c <main+0xfc>)
 80005ce:	f000 fc2b 	bl	8000e28 <ADC_Read>
 80005d2:	4603      	mov	r3, r0
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <main+0x100>)
 80005d8:	801a      	strh	r2, [r3, #0]

    // Motor controlling logics
    driving();
 80005da:	f000 fc3b 	bl	8000e54 <driving>

    // UART transmit debugging messages
    sprintf(msg_1, "ADC1 = %hu, ADC2 = %hu\r\n", ADC_1, ADC_2);
 80005de:	4b26      	ldr	r3, [pc, #152]	; (8000678 <main+0xf8>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b26      	ldr	r3, [pc, #152]	; (8000680 <main+0x100>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80005ec:	4925      	ldr	r1, [pc, #148]	; (8000684 <main+0x104>)
 80005ee:	f004 f8c1 	bl	8004774 <siprintf>
    sprintf(msg_2, "PWM1 = %hu, PWM2 = %hu\r\n", PWM_1, PWM_2);
 80005f2:	4b25      	ldr	r3, [pc, #148]	; (8000688 <main+0x108>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b24      	ldr	r3, [pc, #144]	; (800068c <main+0x10c>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	f107 0020 	add.w	r0, r7, #32
 8000600:	4923      	ldr	r1, [pc, #140]	; (8000690 <main+0x110>)
 8000602:	f004 f8b7 	bl	8004774 <siprintf>
    sprintf(msg_3, "CASE = %d\r\n\r\n", CASE);
 8000606:	4b23      	ldr	r3, [pc, #140]	; (8000694 <main+0x114>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	463b      	mov	r3, r7
 800060c:	4922      	ldr	r1, [pc, #136]	; (8000698 <main+0x118>)
 800060e:	4618      	mov	r0, r3
 8000610:	f004 f8b0 	bl	8004774 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg_1, strlen(msg_1), HAL_MAX_DELAY);
 8000614:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff fdd9 	bl	80001d0 <strlen>
 800061e:	4603      	mov	r3, r0
 8000620:	b29a      	uxth	r2, r3
 8000622:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800062a:	481c      	ldr	r0, [pc, #112]	; (800069c <main+0x11c>)
 800062c:	f003 fc11 	bl	8003e52 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg_2, strlen(msg_2), HAL_MAX_DELAY);
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff fdcb 	bl	80001d0 <strlen>
 800063a:	4603      	mov	r3, r0
 800063c:	b29a      	uxth	r2, r3
 800063e:	f107 0120 	add.w	r1, r7, #32
 8000642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000646:	4815      	ldr	r0, [pc, #84]	; (800069c <main+0x11c>)
 8000648:	f003 fc03 	bl	8003e52 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg_3, strlen(msg_3), HAL_MAX_DELAY);
 800064c:	463b      	mov	r3, r7
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff fdbe 	bl	80001d0 <strlen>
 8000654:	4603      	mov	r3, r0
 8000656:	b29a      	uxth	r2, r3
 8000658:	4639      	mov	r1, r7
 800065a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800065e:	480f      	ldr	r0, [pc, #60]	; (800069c <main+0x11c>)
 8000660:	f003 fbf7 	bl	8003e52 <HAL_UART_Transmit>
    HAL_Delay(10);
 8000664:	200a      	movs	r0, #10
 8000666:	f001 f981 	bl	800196c <HAL_Delay>
    ADC_1 = ADC_Read(&hadc1);
 800066a:	e7a8      	b.n	80005be <main+0x3e>
 800066c:	20000180 	.word	0x20000180
 8000670:	200000a4 	.word	0x200000a4
 8000674:	200001c0 	.word	0x200001c0
 8000678:	2000008c 	.word	0x2000008c
 800067c:	200000e4 	.word	0x200000e4
 8000680:	2000008e 	.word	0x2000008e
 8000684:	08004f98 	.word	0x08004f98
 8000688:	20000090 	.word	0x20000090
 800068c:	20000092 	.word	0x20000092
 8000690:	08004fb4 	.word	0x08004fb4
 8000694:	2000021c 	.word	0x2000021c
 8000698:	08004fd0 	.word	0x08004fd0
 800069c:	20000220 	.word	0x20000220

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	; 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2230      	movs	r2, #48	; 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f004 f858 	bl	8004764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	4a27      	ldr	r2, [pc, #156]	; (800076c <SystemClock_Config+0xcc>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	; 0x40
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <SystemClock_Config+0xcc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <SystemClock_Config+0xd0>)
 80006ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <SystemClock_Config+0xd0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	2310      	movs	r3, #16
 8000706:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000708:	2302      	movs	r3, #2
 800070a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070c:	2300      	movs	r3, #0
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000710:	2308      	movs	r3, #8
 8000712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000714:	2332      	movs	r3, #50	; 0x32
 8000716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000718:	2304      	movs	r3, #4
 800071a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800071c:	2307      	movs	r3, #7
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f002 f93d 	bl	80029a4 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000730:	f000 fdfe 	bl	8001330 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000740:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fb96 	bl	8002e84 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800075e:	f000 fde7 	bl	8001330 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800077a:	463b      	mov	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_ADC1_Init+0x98>)
 8000788:	4a21      	ldr	r2, [pc, #132]	; (8000810 <MX_ADC1_Init+0x9c>)
 800078a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_ADC1_Init+0x98>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_ADC1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_ADC1_Init+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_ADC1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_ADC1_Init+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_ADC1_Init+0x98>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_ADC1_Init+0x98>)
 80007b4:	4a17      	ldr	r2, [pc, #92]	; (8000814 <MX_ADC1_Init+0xa0>)
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_ADC1_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_ADC1_Init+0x98>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_ADC1_Init+0x98>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_ADC1_Init+0x98>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d2:	480e      	ldr	r0, [pc, #56]	; (800080c <MX_ADC1_Init+0x98>)
 80007d4:	f001 f8ec 	bl	80019b0 <HAL_ADC_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007de:	f000 fda7 	bl	8001330 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80007e2:	230e      	movs	r3, #14
 80007e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_ADC1_Init+0x98>)
 80007f4:	f001 fa78 	bl	8001ce8 <HAL_ADC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007fe:	f000 fd97 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200001c0 	.word	0x200001c0
 8000810:	40012000 	.word	0x40012000
 8000814:	0f000001 	.word	0x0f000001

08000818 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800081e:	463b      	mov	r3, r7
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <MX_ADC2_Init+0x98>)
 800082c:	4a21      	ldr	r2, [pc, #132]	; (80008b4 <MX_ADC2_Init+0x9c>)
 800082e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000830:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <MX_ADC2_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_ADC2_Init+0x98>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <MX_ADC2_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000842:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_ADC2_Init+0x98>)
 8000844:	2200      	movs	r2, #0
 8000846:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_ADC2_Init+0x98>)
 800084a:	2200      	movs	r2, #0
 800084c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_ADC2_Init+0x98>)
 8000852:	2200      	movs	r2, #0
 8000854:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_ADC2_Init+0x98>)
 8000858:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <MX_ADC2_Init+0xa0>)
 800085a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_ADC2_Init+0x98>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_ADC2_Init+0x98>)
 8000864:	2201      	movs	r2, #1
 8000866:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_ADC2_Init+0x98>)
 800086a:	2200      	movs	r2, #0
 800086c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_ADC2_Init+0x98>)
 8000872:	2201      	movs	r2, #1
 8000874:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000876:	480e      	ldr	r0, [pc, #56]	; (80008b0 <MX_ADC2_Init+0x98>)
 8000878:	f001 f89a 	bl	80019b0 <HAL_ADC_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000882:	f000 fd55 	bl	8001330 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000886:	230f      	movs	r3, #15
 8000888:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800088a:	2301      	movs	r3, #1
 800088c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000892:	463b      	mov	r3, r7
 8000894:	4619      	mov	r1, r3
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <MX_ADC2_Init+0x98>)
 8000898:	f001 fa26 	bl	8001ce8 <HAL_ADC_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80008a2:	f000 fd45 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000e4 	.word	0x200000e4
 80008b4:	40012100 	.word	0x40012100
 80008b8:	0f000001 	.word	0x0f000001

080008bc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008c2:	463b      	mov	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_DAC_Init+0x60>)
 80008cc:	4a14      	ldr	r2, [pc, #80]	; (8000920 <MX_DAC_Init+0x64>)
 80008ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008d0:	4812      	ldr	r0, [pc, #72]	; (800091c <MX_DAC_Init+0x60>)
 80008d2:	f001 fd0c 	bl	80022ee <HAL_DAC_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80008dc:	f000 fd28 	bl	8001330 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	2200      	movs	r2, #0
 80008ec:	4619      	mov	r1, r3
 80008ee:	480b      	ldr	r0, [pc, #44]	; (800091c <MX_DAC_Init+0x60>)
 80008f0:	f001 fd1f 	bl	8002332 <HAL_DAC_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80008fa:	f000 fd19 	bl	8001330 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80008fe:	463b      	mov	r3, r7
 8000900:	2210      	movs	r2, #16
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_DAC_Init+0x60>)
 8000906:	f001 fd14 	bl	8002332 <HAL_DAC_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000910:	f000 fd0e 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000208 	.word	0x20000208
 8000920:	40007400 	.word	0x40007400

08000924 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_I2C1_Init+0x50>)
 800092a:	4a13      	ldr	r2, [pc, #76]	; (8000978 <MX_I2C1_Init+0x54>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_I2C1_Init+0x50>)
 8000930:	4a12      	ldr	r2, [pc, #72]	; (800097c <MX_I2C1_Init+0x58>)
 8000932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_I2C1_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_I2C1_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_I2C1_Init+0x50>)
 8000942:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000946:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <MX_I2C1_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_I2C1_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <MX_I2C1_Init+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_I2C1_Init+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_I2C1_Init+0x50>)
 8000962:	f001 fee7 	bl	8002734 <HAL_I2C_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800096c:	f000 fce0 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000012c 	.word	0x2000012c
 8000978:	40005400 	.word	0x40005400
 800097c:	000186a0 	.word	0x000186a0

08000980 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08e      	sub	sp, #56	; 0x38
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000994:	f107 0320 	add.w	r3, r7, #32
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]
 80009ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009b0:	4b2c      	ldr	r3, [pc, #176]	; (8000a64 <MX_TIM3_Init+0xe4>)
 80009b2:	4a2d      	ldr	r2, [pc, #180]	; (8000a68 <MX_TIM3_Init+0xe8>)
 80009b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12;
 80009b6:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <MX_TIM3_Init+0xe4>)
 80009b8:	220c      	movs	r2, #12
 80009ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <MX_TIM3_Init+0xe4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80009c2:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <MX_TIM3_Init+0xe4>)
 80009c4:	2264      	movs	r2, #100	; 0x64
 80009c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <MX_TIM3_Init+0xe4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ce:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <MX_TIM3_Init+0xe4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009d4:	4823      	ldr	r0, [pc, #140]	; (8000a64 <MX_TIM3_Init+0xe4>)
 80009d6:	f002 fc47 	bl	8003268 <HAL_TIM_Base_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80009e0:	f000 fca6 	bl	8001330 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ee:	4619      	mov	r1, r3
 80009f0:	481c      	ldr	r0, [pc, #112]	; (8000a64 <MX_TIM3_Init+0xe4>)
 80009f2:	f002 fd9d 	bl	8003530 <HAL_TIM_ConfigClockSource>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80009fc:	f000 fc98 	bl	8001330 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a00:	4818      	ldr	r0, [pc, #96]	; (8000a64 <MX_TIM3_Init+0xe4>)
 8000a02:	f002 fc5c 	bl	80032be <HAL_TIM_PWM_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000a0c:	f000 fc90 	bl	8001330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a18:	f107 0320 	add.w	r3, r7, #32
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4811      	ldr	r0, [pc, #68]	; (8000a64 <MX_TIM3_Init+0xe4>)
 8000a20:	f003 f94e 	bl	8003cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000a2a:	f000 fc81 	bl	8001330 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2e:	2360      	movs	r3, #96	; 0x60
 8000a30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2200      	movs	r2, #0
 8000a42:	4619      	mov	r1, r3
 8000a44:	4807      	ldr	r0, [pc, #28]	; (8000a64 <MX_TIM3_Init+0xe4>)
 8000a46:	f002 fcad 	bl	80033a4 <HAL_TIM_PWM_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000a50:	f000 fc6e 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a54:	4803      	ldr	r0, [pc, #12]	; (8000a64 <MX_TIM3_Init+0xe4>)
 8000a56:	f000 fdd3 	bl	8001600 <HAL_TIM_MspPostInit>

}
 8000a5a:	bf00      	nop
 8000a5c:	3738      	adds	r7, #56	; 0x38
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000180 	.word	0x20000180
 8000a68:	40000400 	.word	0x40000400

08000a6c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08e      	sub	sp, #56	; 0x38
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a80:	f107 0320 	add.w	r3, r7, #32
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
 8000a98:	615a      	str	r2, [r3, #20]
 8000a9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a9c:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <MX_TIM4_Init+0xe4>)
 8000a9e:	4a2d      	ldr	r2, [pc, #180]	; (8000b54 <MX_TIM4_Init+0xe8>)
 8000aa0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12;
 8000aa2:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <MX_TIM4_Init+0xe4>)
 8000aa4:	220c      	movs	r2, #12
 8000aa6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa8:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <MX_TIM4_Init+0xe4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000aae:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <MX_TIM4_Init+0xe4>)
 8000ab0:	2264      	movs	r2, #100	; 0x64
 8000ab2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab4:	4b26      	ldr	r3, [pc, #152]	; (8000b50 <MX_TIM4_Init+0xe4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aba:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <MX_TIM4_Init+0xe4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ac0:	4823      	ldr	r0, [pc, #140]	; (8000b50 <MX_TIM4_Init+0xe4>)
 8000ac2:	f002 fbd1 	bl	8003268 <HAL_TIM_Base_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000acc:	f000 fc30 	bl	8001330 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ad6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ada:	4619      	mov	r1, r3
 8000adc:	481c      	ldr	r0, [pc, #112]	; (8000b50 <MX_TIM4_Init+0xe4>)
 8000ade:	f002 fd27 	bl	8003530 <HAL_TIM_ConfigClockSource>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000ae8:	f000 fc22 	bl	8001330 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000aec:	4818      	ldr	r0, [pc, #96]	; (8000b50 <MX_TIM4_Init+0xe4>)
 8000aee:	f002 fbe6 	bl	80032be <HAL_TIM_PWM_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000af8:	f000 fc1a 	bl	8001330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b04:	f107 0320 	add.w	r3, r7, #32
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4811      	ldr	r0, [pc, #68]	; (8000b50 <MX_TIM4_Init+0xe4>)
 8000b0c:	f003 f8d8 	bl	8003cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000b16:	f000 fc0b 	bl	8001330 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b1a:	2360      	movs	r3, #96	; 0x60
 8000b1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4807      	ldr	r0, [pc, #28]	; (8000b50 <MX_TIM4_Init+0xe4>)
 8000b32:	f002 fc37 	bl	80033a4 <HAL_TIM_PWM_ConfigChannel>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000b3c:	f000 fbf8 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b40:	4803      	ldr	r0, [pc, #12]	; (8000b50 <MX_TIM4_Init+0xe4>)
 8000b42:	f000 fd5d 	bl	8001600 <HAL_TIM_MspPostInit>

}
 8000b46:	bf00      	nop
 8000b48:	3738      	adds	r7, #56	; 0x38
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200000a4 	.word	0x200000a4
 8000b54:	40000800 	.word	0x40000800

08000b58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <MX_USART2_UART_Init+0x50>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b90:	f003 f912 	bl	8003db8 <HAL_UART_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b9a:	f000 fbc9 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000220 	.word	0x20000220
 8000ba8:	40004400 	.word	0x40004400

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08c      	sub	sp, #48	; 0x30
 8000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
 8000bc6:	4b90      	ldr	r3, [pc, #576]	; (8000e08 <MX_GPIO_Init+0x25c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a8f      	ldr	r2, [pc, #572]	; (8000e08 <MX_GPIO_Init+0x25c>)
 8000bcc:	f043 0310 	orr.w	r3, r3, #16
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b8d      	ldr	r3, [pc, #564]	; (8000e08 <MX_GPIO_Init+0x25c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0310 	and.w	r3, r3, #16
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	4b89      	ldr	r3, [pc, #548]	; (8000e08 <MX_GPIO_Init+0x25c>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a88      	ldr	r2, [pc, #544]	; (8000e08 <MX_GPIO_Init+0x25c>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b86      	ldr	r3, [pc, #536]	; (8000e08 <MX_GPIO_Init+0x25c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b82      	ldr	r3, [pc, #520]	; (8000e08 <MX_GPIO_Init+0x25c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a81      	ldr	r2, [pc, #516]	; (8000e08 <MX_GPIO_Init+0x25c>)
 8000c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b7f      	ldr	r3, [pc, #508]	; (8000e08 <MX_GPIO_Init+0x25c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b7b      	ldr	r3, [pc, #492]	; (8000e08 <MX_GPIO_Init+0x25c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a7a      	ldr	r2, [pc, #488]	; (8000e08 <MX_GPIO_Init+0x25c>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b78      	ldr	r3, [pc, #480]	; (8000e08 <MX_GPIO_Init+0x25c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	4b74      	ldr	r3, [pc, #464]	; (8000e08 <MX_GPIO_Init+0x25c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a73      	ldr	r2, [pc, #460]	; (8000e08 <MX_GPIO_Init+0x25c>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b71      	ldr	r3, [pc, #452]	; (8000e08 <MX_GPIO_Init+0x25c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4b6d      	ldr	r3, [pc, #436]	; (8000e08 <MX_GPIO_Init+0x25c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a6c      	ldr	r2, [pc, #432]	; (8000e08 <MX_GPIO_Init+0x25c>)
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b6a      	ldr	r3, [pc, #424]	; (8000e08 <MX_GPIO_Init+0x25c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0308 	and.w	r3, r3, #8
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	4867      	ldr	r0, [pc, #412]	; (8000e0c <MX_GPIO_Init+0x260>)
 8000c70:	f001 fd46 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2101      	movs	r1, #1
 8000c78:	4865      	ldr	r0, [pc, #404]	; (8000e10 <MX_GPIO_Init+0x264>)
 8000c7a:	f001 fd41 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c84:	4863      	ldr	r0, [pc, #396]	; (8000e14 <MX_GPIO_Init+0x268>)
 8000c86:	f001 fd3b 	bl	8002700 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c8a:	2308      	movs	r3, #8
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	485a      	ldr	r0, [pc, #360]	; (8000e0c <MX_GPIO_Init+0x260>)
 8000ca2:	f001 fb93 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4854      	ldr	r0, [pc, #336]	; (8000e10 <MX_GPIO_Init+0x264>)
 8000cbe:	f001 fb85 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	484c      	ldr	r0, [pc, #304]	; (8000e10 <MX_GPIO_Init+0x264>)
 8000cde:	f001 fb75 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce6:	4b4c      	ldr	r3, [pc, #304]	; (8000e18 <MX_GPIO_Init+0x26c>)
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4849      	ldr	r0, [pc, #292]	; (8000e1c <MX_GPIO_Init+0x270>)
 8000cf6:	f001 fb69 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cfa:	23c0      	movs	r3, #192	; 0xc0
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d0a:	2305      	movs	r3, #5
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	4841      	ldr	r0, [pc, #260]	; (8000e1c <MX_GPIO_Init+0x270>)
 8000d16:	f001 fb59 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d1a:	2304      	movs	r3, #4
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	483c      	ldr	r0, [pc, #240]	; (8000e20 <MX_GPIO_Init+0x274>)
 8000d2e:	f001 fb4d 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d44:	2305      	movs	r3, #5
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4834      	ldr	r0, [pc, #208]	; (8000e20 <MX_GPIO_Init+0x274>)
 8000d50:	f001 fb3c 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000d54:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000d58:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4829      	ldr	r0, [pc, #164]	; (8000e14 <MX_GPIO_Init+0x268>)
 8000d6e:	f001 fb2d 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d72:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d84:	2306      	movs	r3, #6
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4820      	ldr	r0, [pc, #128]	; (8000e10 <MX_GPIO_Init+0x264>)
 8000d90:	f001 fb1c 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	481c      	ldr	r0, [pc, #112]	; (8000e1c <MX_GPIO_Init+0x270>)
 8000daa:	f001 fb0f 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000dae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dc0:	230a      	movs	r3, #10
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4814      	ldr	r0, [pc, #80]	; (8000e1c <MX_GPIO_Init+0x270>)
 8000dcc:	f001 fafe 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000dd0:	2320      	movs	r3, #32
 8000dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	4619      	mov	r1, r3
 8000de2:	480c      	ldr	r0, [pc, #48]	; (8000e14 <MX_GPIO_Init+0x268>)
 8000de4:	f001 faf2 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dec:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <MX_GPIO_Init+0x278>)
 8000dee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4804      	ldr	r0, [pc, #16]	; (8000e0c <MX_GPIO_Init+0x260>)
 8000dfc:	f001 fae6 	bl	80023cc <HAL_GPIO_Init>

}
 8000e00:	bf00      	nop
 8000e02:	3730      	adds	r7, #48	; 0x30
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40020800 	.word	0x40020800
 8000e14:	40020c00 	.word	0x40020c00
 8000e18:	10110000 	.word	0x10110000
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	40020400 	.word	0x40020400
 8000e24:	10120000 	.word	0x10120000

08000e28 <ADC_Read>:
 *  @brief Read ADC value
 *  @param pointer to ADC handler
 *  @retval ADC value
 */
static uint16_t ADC_Read(ADC_HandleTypeDef* handler)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  HAL_ADC_Start(handler);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f000 fe01 	bl	8001a38 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(handler, HAL_MAX_DELAY);
 8000e36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f000 fec2 	bl	8001bc4 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(handler);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 ff43 	bl	8001ccc <HAL_ADC_GetValue>
 8000e46:	4603      	mov	r3, r0
 8000e48:	b29b      	uxth	r3, r3
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <driving>:
 *  @brief Convert ADC readings to driving direction (GPIO)
 *  @param None
 *  @retval None
 */
static void driving(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  if (ADC_1 < (STICK_Y_MID - STICK_MARGIN)) // y is 0
 8000e58:	4b2d      	ldr	r3, [pc, #180]	; (8000f10 <driving+0xbc>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	f240 726d 	movw	r2, #1901	; 0x76d
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d802      	bhi.n	8000e6a <driving+0x16>
  {
  	// Case I, II, or III
  	forward();
 8000e64:	f000 f86c 	bl	8000f40 <forward>
 8000e68:	e025      	b.n	8000eb6 <driving+0x62>
  }
  else if (ADC_1 > (STICK_Y_MID + STICK_MARGIN))
 8000e6a:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <driving+0xbc>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	f640 1262 	movw	r2, #2402	; 0x962
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d902      	bls.n	8000e7c <driving+0x28>
  {
  	// Case VII, VIII, or IX
  	backward();
 8000e76:	f000 f90f 	bl	8001098 <backward>
 8000e7a:	e01c      	b.n	8000eb6 <driving+0x62>
  }
  else
  {
    if (ADC_2 > (STICK_X_MID + STICK_MARGIN))
 8000e7c:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <driving+0xc0>)
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	f640 02eb 	movw	r2, #2283	; 0x8eb
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d905      	bls.n	8000e94 <driving+0x40>
    {
	    // Case IV
    	counterclockwise();
 8000e88:	f000 fa12 	bl	80012b0 <counterclockwise>
    	CASE = 4;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <driving+0xc4>)
 8000e8e:	2204      	movs	r2, #4
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	e010      	b.n	8000eb6 <driving+0x62>
    }
    else if (ADC_2 < (STICK_X_MID - STICK_MARGIN))
 8000e94:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <driving+0xc0>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	f240 62f6 	movw	r2, #1782	; 0x6f6
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d805      	bhi.n	8000eac <driving+0x58>
    {
	    // Case VI
    	clockwise();
 8000ea0:	f000 f9c4 	bl	800122c <clockwise>
    	CASE = 6;
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <driving+0xc4>)
 8000ea6:	2206      	movs	r2, #6
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e004      	b.n	8000eb6 <driving+0x62>
    }
    else
    {
      // Case V
      stop();
 8000eac:	f000 f998 	bl	80011e0 <stop>
      CASE = 5;
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <driving+0xc4>)
 8000eb2:	2205      	movs	r2, #5
 8000eb4:	601a      	str	r2, [r3, #0]
    }
  }
  // updating GPIO value
  HAL_GPIO_WritePin(BRIDGE_GPIO, BRIDGE_PIN_1, BRIDGE_PIN_1_State);
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <driving+0xc8>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec0:	4817      	ldr	r0, [pc, #92]	; (8000f20 <driving+0xcc>)
 8000ec2:	f001 fc1d 	bl	8002700 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BRIDGE_GPIO, BRIDGE_PIN_2, BRIDGE_PIN_2_State);
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <driving+0xd0>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed0:	4813      	ldr	r0, [pc, #76]	; (8000f20 <driving+0xcc>)
 8000ed2:	f001 fc15 	bl	8002700 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BRIDGE_GPIO, BRIDGE_PIN_3, BRIDGE_PIN_3_State);
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <driving+0xd4>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee0:	480f      	ldr	r0, [pc, #60]	; (8000f20 <driving+0xcc>)
 8000ee2:	f001 fc0d 	bl	8002700 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BRIDGE_GPIO, BRIDGE_PIN_4, BRIDGE_PIN_4_State);
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <driving+0xd8>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef0:	480b      	ldr	r0, [pc, #44]	; (8000f20 <driving+0xcc>)
 8000ef2:	f001 fc05 	bl	8002700 <HAL_GPIO_WritePin>
  // updating PWM value
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_1);
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <driving+0xdc>)
 8000ef8:	881a      	ldrh	r2, [r3, #0]
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <driving+0xe0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, PWM_2);
 8000f00:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <driving+0xe4>)
 8000f02:	881a      	ldrh	r2, [r3, #0]
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <driving+0xe8>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000008c 	.word	0x2000008c
 8000f14:	2000008e 	.word	0x2000008e
 8000f18:	2000021c 	.word	0x2000021c
 8000f1c:	20000094 	.word	0x20000094
 8000f20:	40020c00 	.word	0x40020c00
 8000f24:	20000095 	.word	0x20000095
 8000f28:	20000096 	.word	0x20000096
 8000f2c:	20000097 	.word	0x20000097
 8000f30:	20000090 	.word	0x20000090
 8000f34:	20000180 	.word	0x20000180
 8000f38:	20000092 	.word	0x20000092
 8000f3c:	200000a4 	.word	0x200000a4

08000f40 <forward>:
 * 	@brief Driving control case I, IV, VII: forward and/or turn
 * 	@param None
 * 	@retval None
 */
static void forward()
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
	// motor direction
	BRIDGE_PIN_1_State = GPIO_PIN_SET;
 8000f46:	4b47      	ldr	r3, [pc, #284]	; (8001064 <forward+0x124>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]
	BRIDGE_PIN_2_State = GPIO_PIN_RESET;
 8000f4c:	4b46      	ldr	r3, [pc, #280]	; (8001068 <forward+0x128>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
	BRIDGE_PIN_3_State = GPIO_PIN_SET;
 8000f52:	4b46      	ldr	r3, [pc, #280]	; (800106c <forward+0x12c>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
	BRIDGE_PIN_4_State = GPIO_PIN_RESET;
 8000f58:	4b45      	ldr	r3, [pc, #276]	; (8001070 <forward+0x130>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
	// PWM Mapping
	float PosY_Percent =
	    (float)(STICK_Y_MID - ADC_1) / STICK_Y_MID * PWM_DUTY_MAX;
 8000f5e:	4b45      	ldr	r3, [pc, #276]	; (8001074 <forward+0x134>)
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	f5c3 6306 	rsb	r3, r3, #2144	; 0x860
 8000f66:	3308      	adds	r3, #8
 8000f68:	ee07 3a90 	vmov	s15, r3
 8000f6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f70:	eddf 6a41 	vldr	s13, [pc, #260]	; 8001078 <forward+0x138>
 8000f74:	eec7 7a26 	vdiv.f32	s15, s14, s13
	float PosY_Percent =
 8000f78:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800107c <forward+0x13c>
 8000f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f80:	edc7 7a01 	vstr	s15, [r7, #4]
	if (ADC_2 > (STICK_X_MID + STICK_MARGIN))
 8000f84:	4b3e      	ldr	r3, [pc, #248]	; (8001080 <forward+0x140>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	f640 02eb 	movw	r2, #2283	; 0x8eb
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d927      	bls.n	8000fe0 <forward+0xa0>
	{
	  // Case I
    PWM_2 = PosY_Percent;
 8000f90:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f98:	ee17 3a90 	vmov	r3, s15
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	4b39      	ldr	r3, [pc, #228]	; (8001084 <forward+0x144>)
 8000fa0:	801a      	strh	r2, [r3, #0]
    PWM_1 = (float)(ADC_MAX - ADC_2) / (ADC_MAX - STICK_X_MID) * PWM_2;
 8000fa2:	4b37      	ldr	r3, [pc, #220]	; (8001080 <forward+0x140>)
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb2:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001088 <forward+0x148>
 8000fb6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fba:	4b32      	ldr	r3, [pc, #200]	; (8001084 <forward+0x144>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fce:	ee17 3a90 	vmov	r3, s15
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	; (800108c <forward+0x14c>)
 8000fd6:	801a      	strh	r2, [r3, #0]
    CASE = 1;
 8000fd8:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <forward+0x150>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]
	  // Case II
	  PWM_1 = PosY_Percent;
	  PWM_2 = PWM_1;
	  CASE = 2;
	}
}
 8000fde:	e03b      	b.n	8001058 <forward+0x118>
	else if (ADC_2 < (STICK_X_MID - STICK_MARGIN))
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <forward+0x140>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	f240 62f6 	movw	r2, #1782	; 0x6f6
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d825      	bhi.n	8001038 <forward+0xf8>
	  PWM_1 = PosY_Percent;
 8000fec:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ff4:	ee17 3a90 	vmov	r3, s15
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	4b24      	ldr	r3, [pc, #144]	; (800108c <forward+0x14c>)
 8000ffc:	801a      	strh	r2, [r3, #0]
    PWM_2 = (float)ADC_2 / STICK_X_MID * PWM_1;
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <forward+0x140>)
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800100a:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001094 <forward+0x154>
 800100e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001012:	4b1e      	ldr	r3, [pc, #120]	; (800108c <forward+0x14c>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001026:	ee17 3a90 	vmov	r3, s15
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <forward+0x144>)
 800102e:	801a      	strh	r2, [r3, #0]
    CASE = 3;
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <forward+0x150>)
 8001032:	2203      	movs	r2, #3
 8001034:	601a      	str	r2, [r3, #0]
}
 8001036:	e00f      	b.n	8001058 <forward+0x118>
	  PWM_1 = PosY_Percent;
 8001038:	edd7 7a01 	vldr	s15, [r7, #4]
 800103c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001040:	ee17 3a90 	vmov	r3, s15
 8001044:	b29a      	uxth	r2, r3
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <forward+0x14c>)
 8001048:	801a      	strh	r2, [r3, #0]
	  PWM_2 = PWM_1;
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <forward+0x14c>)
 800104c:	881a      	ldrh	r2, [r3, #0]
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <forward+0x144>)
 8001050:	801a      	strh	r2, [r3, #0]
	  CASE = 2;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <forward+0x150>)
 8001054:	2202      	movs	r2, #2
 8001056:	601a      	str	r2, [r3, #0]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	20000094 	.word	0x20000094
 8001068:	20000095 	.word	0x20000095
 800106c:	20000096 	.word	0x20000096
 8001070:	20000097 	.word	0x20000097
 8001074:	2000008c 	.word	0x2000008c
 8001078:	45068000 	.word	0x45068000
 800107c:	42c80000 	.word	0x42c80000
 8001080:	2000008e 	.word	0x2000008e
 8001084:	20000092 	.word	0x20000092
 8001088:	4500f000 	.word	0x4500f000
 800108c:	20000090 	.word	0x20000090
 8001090:	2000021c 	.word	0x2000021c
 8001094:	44fe2000 	.word	0x44fe2000

08001098 <backward>:
 * 	@brief Driving control case III, VI, IX: backward and/or turn
 * 	@param None
 * 	@retval None
 */
static void backward()
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
	// motor direction
	BRIDGE_PIN_1_State = GPIO_PIN_RESET;
 800109e:	4b43      	ldr	r3, [pc, #268]	; (80011ac <backward+0x114>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_2_State = GPIO_PIN_SET;
 80010a4:	4b42      	ldr	r3, [pc, #264]	; (80011b0 <backward+0x118>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_3_State = GPIO_PIN_RESET;
 80010aa:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <backward+0x11c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_4_State = GPIO_PIN_SET;
 80010b0:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <backward+0x120>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
	// PWM Mapping
	float NegY_Percent =
	    (float)(ADC_1 - STICK_Y_MID) / (ADC_MAX - STICK_Y_MID) * PWM_DUTY_MAX;
 80010b6:	4b41      	ldr	r3, [pc, #260]	; (80011bc <backward+0x124>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 80010be:	ee07 3a90 	vmov	s15, r3
 80010c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c6:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80011c0 <backward+0x128>
 80010ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
	float NegY_Percent =
 80010ce:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80011c4 <backward+0x12c>
 80010d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d6:	edc7 7a01 	vstr	s15, [r7, #4]
  if (ADC_2 > (STICK_X_MID + STICK_MARGIN))
 80010da:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <backward+0x130>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	f640 02eb 	movw	r2, #2283	; 0x8eb
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d923      	bls.n	800112e <backward+0x96>
  {
    // Case VII
    PWM_2 = NegY_Percent;
 80010e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ee:	ee17 3a90 	vmov	r3, s15
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	4b35      	ldr	r3, [pc, #212]	; (80011cc <backward+0x134>)
 80010f6:	801a      	strh	r2, [r3, #0]
    PWM_1 = (float)(ADC_MAX - ADC_2) / (ADC_MAX - STICK_X_MID) * PWM_DUTY_MAX;
 80010f8:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <backward+0x130>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001100:	ee07 3a90 	vmov	s15, r3
 8001104:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001108:	eddf 6a31 	vldr	s13, [pc, #196]	; 80011d0 <backward+0x138>
 800110c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001110:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80011c4 <backward+0x12c>
 8001114:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800111c:	ee17 3a90 	vmov	r3, s15
 8001120:	b29a      	uxth	r2, r3
 8001122:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <backward+0x13c>)
 8001124:	801a      	strh	r2, [r3, #0]
    CASE = 7;
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <backward+0x140>)
 8001128:	2207      	movs	r2, #7
 800112a:	601a      	str	r2, [r3, #0]
    // Case VIII
    PWM_1 = NegY_Percent;
    PWM_2 = PWM_1;
    CASE = 8;
  }
}
 800112c:	e037      	b.n	800119e <backward+0x106>
  else if (ADC_2 < (STICK_X_MID - STICK_MARGIN))
 800112e:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <backward+0x130>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	f240 62f6 	movw	r2, #1782	; 0x6f6
 8001136:	4293      	cmp	r3, r2
 8001138:	d821      	bhi.n	800117e <backward+0xe6>
    PWM_1 = NegY_Percent;
 800113a:	edd7 7a01 	vldr	s15, [r7, #4]
 800113e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001142:	ee17 3a90 	vmov	r3, s15
 8001146:	b29a      	uxth	r2, r3
 8001148:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <backward+0x13c>)
 800114a:	801a      	strh	r2, [r3, #0]
    PWM_2 = (float)ADC_2 / STICK_X_MID * PWM_DUTY_MAX;
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <backward+0x130>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	ee07 3a90 	vmov	s15, r3
 8001154:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001158:	eddf 6a20 	vldr	s13, [pc, #128]	; 80011dc <backward+0x144>
 800115c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001160:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80011c4 <backward+0x12c>
 8001164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800116c:	ee17 3a90 	vmov	r3, s15
 8001170:	b29a      	uxth	r2, r3
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <backward+0x134>)
 8001174:	801a      	strh	r2, [r3, #0]
    CASE = 9;
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <backward+0x140>)
 8001178:	2209      	movs	r2, #9
 800117a:	601a      	str	r2, [r3, #0]
}
 800117c:	e00f      	b.n	800119e <backward+0x106>
    PWM_1 = NegY_Percent;
 800117e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001186:	ee17 3a90 	vmov	r3, s15
 800118a:	b29a      	uxth	r2, r3
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <backward+0x13c>)
 800118e:	801a      	strh	r2, [r3, #0]
    PWM_2 = PWM_1;
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <backward+0x13c>)
 8001192:	881a      	ldrh	r2, [r3, #0]
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <backward+0x134>)
 8001196:	801a      	strh	r2, [r3, #0]
    CASE = 8;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <backward+0x140>)
 800119a:	2208      	movs	r2, #8
 800119c:	601a      	str	r2, [r3, #0]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000094 	.word	0x20000094
 80011b0:	20000095 	.word	0x20000095
 80011b4:	20000096 	.word	0x20000096
 80011b8:	20000097 	.word	0x20000097
 80011bc:	2000008c 	.word	0x2000008c
 80011c0:	44f30000 	.word	0x44f30000
 80011c4:	42c80000 	.word	0x42c80000
 80011c8:	2000008e 	.word	0x2000008e
 80011cc:	20000092 	.word	0x20000092
 80011d0:	4500f000 	.word	0x4500f000
 80011d4:	20000090 	.word	0x20000090
 80011d8:	2000021c 	.word	0x2000021c
 80011dc:	44fe2000 	.word	0x44fe2000

080011e0 <stop>:
 *  @brief Driving control case V: stop
 *  @param None
 *  @retval None
 */
static void stop()
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	// motor direction
	BRIDGE_PIN_1_State = GPIO_PIN_RESET;
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <stop+0x34>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_2_State = GPIO_PIN_RESET;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <stop+0x38>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_3_State = GPIO_PIN_RESET;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <stop+0x3c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_4_State = GPIO_PIN_RESET;
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <stop+0x40>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
	// PWM mapping
	PWM_1 = 0;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <stop+0x44>)
 80011fe:	2200      	movs	r2, #0
 8001200:	801a      	strh	r2, [r3, #0]
	PWM_2 = 0;
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <stop+0x48>)
 8001204:	2200      	movs	r2, #0
 8001206:	801a      	strh	r2, [r3, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000094 	.word	0x20000094
 8001218:	20000095 	.word	0x20000095
 800121c:	20000096 	.word	0x20000096
 8001220:	20000097 	.word	0x20000097
 8001224:	20000090 	.word	0x20000090
 8001228:	20000092 	.word	0x20000092

0800122c <clockwise>:
 *  @brief Driving control case VII: rotate clockwise
 *  @param None
 *  @retval None
 */
static void clockwise()
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
	// motor direction
	BRIDGE_PIN_1_State = GPIO_PIN_SET;
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <clockwise+0x60>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_2_State = GPIO_PIN_RESET;
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <clockwise+0x64>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_3_State = GPIO_PIN_RESET;
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <clockwise+0x68>)
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_4_State = GPIO_PIN_SET;
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <clockwise+0x6c>)
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
	// PWM mapping
	PWM_1 = (float)(STICK_Y_MID - ADC_2) / STICK_Y_MID * PWM_DUTY_MAX;
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <clockwise+0x70>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	f5c3 6306 	rsb	r3, r3, #2144	; 0x860
 8001250:	3308      	adds	r3, #8
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800125a:	eddf 6a11 	vldr	s13, [pc, #68]	; 80012a0 <clockwise+0x74>
 800125e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001262:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80012a4 <clockwise+0x78>
 8001266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800126a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800126e:	ee17 3a90 	vmov	r3, s15
 8001272:	b29a      	uxth	r2, r3
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <clockwise+0x7c>)
 8001276:	801a      	strh	r2, [r3, #0]
	PWM_2 = PWM_1;
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <clockwise+0x7c>)
 800127a:	881a      	ldrh	r2, [r3, #0]
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <clockwise+0x80>)
 800127e:	801a      	strh	r2, [r3, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000094 	.word	0x20000094
 8001290:	20000095 	.word	0x20000095
 8001294:	20000096 	.word	0x20000096
 8001298:	20000097 	.word	0x20000097
 800129c:	2000008e 	.word	0x2000008e
 80012a0:	45068000 	.word	0x45068000
 80012a4:	42c80000 	.word	0x42c80000
 80012a8:	20000090 	.word	0x20000090
 80012ac:	20000092 	.word	0x20000092

080012b0 <counterclockwise>:
 *  @brief Driving control case II: rotate counter-clockwise
 *  @param None
 *  @retval None
 */
static void counterclockwise()
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
	// motor direction
	BRIDGE_PIN_1_State = GPIO_PIN_RESET;
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <counterclockwise+0x5c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_2_State = GPIO_PIN_SET;
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <counterclockwise+0x60>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_3_State = GPIO_PIN_SET;
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <counterclockwise+0x64>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_4_State = GPIO_PIN_RESET;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <counterclockwise+0x68>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
	// PWM mapping
	PWM_1 = (float)(ADC_2 - STICK_Y_MID) / (ADC_MAX - STICK_Y_MID) * PWM_DUTY_MAX;
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <counterclockwise+0x6c>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 80012d4:	ee07 3a90 	vmov	s15, r3
 80012d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012dc:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001320 <counterclockwise+0x70>
 80012e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001324 <counterclockwise+0x74>
 80012e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f0:	ee17 3a90 	vmov	r3, s15
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <counterclockwise+0x78>)
 80012f8:	801a      	strh	r2, [r3, #0]
	PWM_2 = PWM_1;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <counterclockwise+0x78>)
 80012fc:	881a      	ldrh	r2, [r3, #0]
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <counterclockwise+0x7c>)
 8001300:	801a      	strh	r2, [r3, #0]
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	20000094 	.word	0x20000094
 8001310:	20000095 	.word	0x20000095
 8001314:	20000096 	.word	0x20000096
 8001318:	20000097 	.word	0x20000097
 800131c:	2000008e 	.word	0x2000008e
 8001320:	44f30000 	.word	0x44f30000
 8001324:	42c80000 	.word	0x42c80000
 8001328:	20000090 	.word	0x20000090
 800132c:	20000092 	.word	0x20000092

08001330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <HAL_MspInit+0x4c>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	4a0f      	ldr	r2, [pc, #60]	; (800138c <HAL_MspInit+0x4c>)
 8001350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001354:	6453      	str	r3, [r2, #68]	; 0x44
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_MspInit+0x4c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_MspInit+0x4c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a08      	ldr	r2, [pc, #32]	; (800138c <HAL_MspInit+0x4c>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_MspInit+0x4c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800

08001390 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a2e      	ldr	r2, [pc, #184]	; (8001468 <HAL_ADC_MspInit+0xd8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d128      	bne.n	8001404 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	4b2d      	ldr	r3, [pc, #180]	; (800146c <HAL_ADC_MspInit+0xdc>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a2c      	ldr	r2, [pc, #176]	; (800146c <HAL_ADC_MspInit+0xdc>)
 80013bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b2a      	ldr	r3, [pc, #168]	; (800146c <HAL_ADC_MspInit+0xdc>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ca:	61bb      	str	r3, [r7, #24]
 80013cc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <HAL_ADC_MspInit+0xdc>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a25      	ldr	r2, [pc, #148]	; (800146c <HAL_ADC_MspInit+0xdc>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b23      	ldr	r3, [pc, #140]	; (800146c <HAL_ADC_MspInit+0xdc>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PC4     ------> ADC1_IN14 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013ea:	2310      	movs	r3, #16
 80013ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ee:	2303      	movs	r3, #3
 80013f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	4619      	mov	r1, r3
 80013fc:	481c      	ldr	r0, [pc, #112]	; (8001470 <HAL_ADC_MspInit+0xe0>)
 80013fe:	f000 ffe5 	bl	80023cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001402:	e02c      	b.n	800145e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a1a      	ldr	r2, [pc, #104]	; (8001474 <HAL_ADC_MspInit+0xe4>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d127      	bne.n	800145e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <HAL_ADC_MspInit+0xdc>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	4a15      	ldr	r2, [pc, #84]	; (800146c <HAL_ADC_MspInit+0xdc>)
 8001418:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800141c:	6453      	str	r3, [r2, #68]	; 0x44
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <HAL_ADC_MspInit+0xdc>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_ADC_MspInit+0xdc>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_ADC_MspInit+0xdc>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_ADC_MspInit+0xdc>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001446:	2320      	movs	r3, #32
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800144a:	2303      	movs	r3, #3
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <HAL_ADC_MspInit+0xe0>)
 800145a:	f000 ffb7 	bl	80023cc <HAL_GPIO_Init>
}
 800145e:	bf00      	nop
 8001460:	3730      	adds	r7, #48	; 0x30
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40012000 	.word	0x40012000
 800146c:	40023800 	.word	0x40023800
 8001470:	40020800 	.word	0x40020800
 8001474:	40012100 	.word	0x40012100

08001478 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <HAL_DAC_MspInit+0x7c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d127      	bne.n	80014ea <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <HAL_DAC_MspInit+0x80>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a15      	ldr	r2, [pc, #84]	; (80014f8 <HAL_DAC_MspInit+0x80>)
 80014a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <HAL_DAC_MspInit+0x80>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <HAL_DAC_MspInit+0x80>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <HAL_DAC_MspInit+0x80>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_DAC_MspInit+0x80>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014d2:	2330      	movs	r3, #48	; 0x30
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d6:	2303      	movs	r3, #3
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <HAL_DAC_MspInit+0x84>)
 80014e6:	f000 ff71 	bl	80023cc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	; 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40007400 	.word	0x40007400
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020000 	.word	0x40020000

08001500 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a19      	ldr	r2, [pc, #100]	; (8001584 <HAL_I2C_MspInit+0x84>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d12c      	bne.n	800157c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_I2C_MspInit+0x88>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a17      	ldr	r2, [pc, #92]	; (8001588 <HAL_I2C_MspInit+0x88>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_I2C_MspInit+0x88>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800153e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001544:	2312      	movs	r3, #18
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001548:	2301      	movs	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001550:	2304      	movs	r3, #4
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	480c      	ldr	r0, [pc, #48]	; (800158c <HAL_I2C_MspInit+0x8c>)
 800155c:	f000 ff36 	bl	80023cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_I2C_MspInit+0x88>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_I2C_MspInit+0x88>)
 800156a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800156e:	6413      	str	r3, [r2, #64]	; 0x40
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_I2C_MspInit+0x88>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	; 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40005400 	.word	0x40005400
 8001588:	40023800 	.word	0x40023800
 800158c:	40020400 	.word	0x40020400

08001590 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a15      	ldr	r2, [pc, #84]	; (80015f4 <HAL_TIM_Base_MspInit+0x64>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d10e      	bne.n	80015c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HAL_TIM_Base_MspInit+0x68>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <HAL_TIM_Base_MspInit+0x68>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_TIM_Base_MspInit+0x68>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015be:	e012      	b.n	80015e6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <HAL_TIM_Base_MspInit+0x6c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d10d      	bne.n	80015e6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_TIM_Base_MspInit+0x68>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <HAL_TIM_Base_MspInit+0x68>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	6413      	str	r3, [r2, #64]	; 0x40
 80015da:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <HAL_TIM_Base_MspInit+0x68>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
}
 80015e6:	bf00      	nop
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40000400 	.word	0x40000400
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40000800 	.word	0x40000800

08001600 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a24      	ldr	r2, [pc, #144]	; (80016b0 <HAL_TIM_MspPostInit+0xb0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d11e      	bne.n	8001660 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <HAL_TIM_MspPostInit+0xb4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a22      	ldr	r2, [pc, #136]	; (80016b4 <HAL_TIM_MspPostInit+0xb4>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_TIM_MspPostInit+0xb4>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800163e:	2340      	movs	r3, #64	; 0x40
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800164e:	2302      	movs	r3, #2
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	4817      	ldr	r0, [pc, #92]	; (80016b8 <HAL_TIM_MspPostInit+0xb8>)
 800165a:	f000 feb7 	bl	80023cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800165e:	e022      	b.n	80016a6 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a15      	ldr	r2, [pc, #84]	; (80016bc <HAL_TIM_MspPostInit+0xbc>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d11d      	bne.n	80016a6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_TIM_MspPostInit+0xb4>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a10      	ldr	r2, [pc, #64]	; (80016b4 <HAL_TIM_MspPostInit+0xb4>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_TIM_MspPostInit+0xb4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001696:	2302      	movs	r3, #2
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	4807      	ldr	r0, [pc, #28]	; (80016c0 <HAL_TIM_MspPostInit+0xc0>)
 80016a2:	f000 fe93 	bl	80023cc <HAL_GPIO_Init>
}
 80016a6:	bf00      	nop
 80016a8:	3728      	adds	r7, #40	; 0x28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40000400 	.word	0x40000400
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020800 	.word	0x40020800
 80016bc:	40000800 	.word	0x40000800
 80016c0:	40020400 	.word	0x40020400

080016c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a19      	ldr	r2, [pc, #100]	; (8001748 <HAL_UART_MspInit+0x84>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d12b      	bne.n	800173e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <HAL_UART_MspInit+0x88>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a17      	ldr	r2, [pc, #92]	; (800174c <HAL_UART_MspInit+0x88>)
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_UART_MspInit+0x88>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <HAL_UART_MspInit+0x88>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a10      	ldr	r2, [pc, #64]	; (800174c <HAL_UART_MspInit+0x88>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_UART_MspInit+0x88>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800171e:	230c      	movs	r3, #12
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172a:	2303      	movs	r3, #3
 800172c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800172e:	2307      	movs	r3, #7
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <HAL_UART_MspInit+0x8c>)
 800173a:	f000 fe47 	bl	80023cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800173e:	bf00      	nop
 8001740:	3728      	adds	r7, #40	; 0x28
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40004400 	.word	0x40004400
 800174c:	40023800 	.word	0x40023800
 8001750:	40020000 	.word	0x40020000

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <HardFault_Handler+0x4>

08001768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <MemManage_Handler+0x4>

0800176e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <BusFault_Handler+0x4>

08001774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <UsageFault_Handler+0x4>

0800177a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a8:	f000 f8c0 	bl	800192c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <_sbrk+0x50>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x16>
		heap_end = &end;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <_sbrk+0x50>)
 80017c2:	4a10      	ldr	r2, [pc, #64]	; (8001804 <_sbrk+0x54>)
 80017c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <_sbrk+0x50>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <_sbrk+0x50>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4413      	add	r3, r2
 80017d4:	466a      	mov	r2, sp
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d907      	bls.n	80017ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80017da:	f002 ff99 	bl	8004710 <__errno>
 80017de:	4602      	mov	r2, r0
 80017e0:	230c      	movs	r3, #12
 80017e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017e8:	e006      	b.n	80017f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <_sbrk+0x50>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a03      	ldr	r2, [pc, #12]	; (8001800 <_sbrk+0x50>)
 80017f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000098 	.word	0x20000098
 8001804:	20000268 	.word	0x20000268

08001808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <SystemInit+0x28>)
 800180e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001812:	4a07      	ldr	r2, [pc, #28]	; (8001830 <SystemInit+0x28>)
 8001814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <SystemInit+0x28>)
 800181e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001822:	609a      	str	r2, [r3, #8]
#endif
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800186c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001838:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800183a:	e003      	b.n	8001844 <LoopCopyDataInit>

0800183c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800183e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001840:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001842:	3104      	adds	r1, #4

08001844 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001844:	480b      	ldr	r0, [pc, #44]	; (8001874 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001848:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800184a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800184c:	d3f6      	bcc.n	800183c <CopyDataInit>
  ldr  r2, =_sbss
 800184e:	4a0b      	ldr	r2, [pc, #44]	; (800187c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001850:	e002      	b.n	8001858 <LoopFillZerobss>

08001852 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001852:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001854:	f842 3b04 	str.w	r3, [r2], #4

08001858 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800185a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800185c:	d3f9      	bcc.n	8001852 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800185e:	f7ff ffd3 	bl	8001808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001862:	f002 ff5b 	bl	800471c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001866:	f7fe fe8b 	bl	8000580 <main>
  bx  lr    
 800186a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800186c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001870:	0800503c 	.word	0x0800503c
  ldr  r0, =_sdata
 8001874:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001878:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800187c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001880:	20000268 	.word	0x20000268

08001884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <ADC_IRQHandler>
	...

08001888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_Init+0x40>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <HAL_Init+0x40>)
 8001892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <HAL_Init+0x40>)
 800189e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_Init+0x40>)
 80018aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b0:	2003      	movs	r0, #3
 80018b2:	f000 fce9 	bl	8002288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f000 f808 	bl	80018cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018bc:	f7ff fd40 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023c00 	.word	0x40023c00

080018cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_InitTick+0x54>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_InitTick+0x58>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fcf3 	bl	80022d6 <HAL_SYSTICK_Config>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00e      	b.n	8001918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b0f      	cmp	r3, #15
 80018fe:	d80a      	bhi.n	8001916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001900:	2200      	movs	r2, #0
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001908:	f000 fcc9 	bl	800229e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800190c:	4a06      	ldr	r2, [pc, #24]	; (8001928 <HAL_InitTick+0x5c>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	e000      	b.n	8001918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000000 	.word	0x20000000
 8001924:	20000008 	.word	0x20000008
 8001928:	20000004 	.word	0x20000004

0800192c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_IncTick+0x20>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_IncTick+0x24>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4413      	add	r3, r2
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <HAL_IncTick+0x24>)
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000008 	.word	0x20000008
 8001950:	20000260 	.word	0x20000260

08001954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_GetTick+0x14>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000260 	.word	0x20000260

0800196c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff ffee 	bl	8001954 <HAL_GetTick>
 8001978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001984:	d005      	beq.n	8001992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_Delay+0x40>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001992:	bf00      	nop
 8001994:	f7ff ffde 	bl	8001954 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d8f7      	bhi.n	8001994 <HAL_Delay+0x28>
  {
  }
}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000008 	.word	0x20000008

080019b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e033      	b.n	8001a2e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff fcde 	bl	8001390 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d118      	bne.n	8001a20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019f6:	f023 0302 	bic.w	r3, r3, #2
 80019fa:	f043 0202 	orr.w	r2, r3, #2
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 fa92 	bl	8001f2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f023 0303 	bic.w	r3, r3, #3
 8001a16:	f043 0201 	orr.w	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a1e:	e001      	b.n	8001a24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADC_Start+0x1a>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e0a5      	b.n	8001b9e <HAL_ADC_Start+0x166>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d018      	beq.n	8001a9a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0201 	orr.w	r2, r2, #1
 8001a76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a78:	4b4c      	ldr	r3, [pc, #304]	; (8001bac <HAL_ADC_Start+0x174>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a4c      	ldr	r2, [pc, #304]	; (8001bb0 <HAL_ADC_Start+0x178>)
 8001a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a82:	0c9a      	lsrs	r2, r3, #18
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a8c:	e002      	b.n	8001a94 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	3b01      	subs	r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f9      	bne.n	8001a8e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d179      	bne.n	8001b9c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ad2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae6:	d106      	bne.n	8001af6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aec:	f023 0206 	bic.w	r2, r3, #6
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	645a      	str	r2, [r3, #68]	; 0x44
 8001af4:	e002      	b.n	8001afc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b04:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HAL_ADC_Start+0x17c>)
 8001b06:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b10:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d12a      	bne.n	8001b74 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a25      	ldr	r2, [pc, #148]	; (8001bb8 <HAL_ADC_Start+0x180>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d015      	beq.n	8001b54 <HAL_ADC_Start+0x11c>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a23      	ldr	r2, [pc, #140]	; (8001bbc <HAL_ADC_Start+0x184>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d105      	bne.n	8001b3e <HAL_ADC_Start+0x106>
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_ADC_Start+0x17c>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00a      	beq.n	8001b54 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <HAL_ADC_Start+0x188>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d129      	bne.n	8001b9c <HAL_ADC_Start+0x164>
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <HAL_ADC_Start+0x17c>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	2b0f      	cmp	r3, #15
 8001b52:	d823      	bhi.n	8001b9c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d11c      	bne.n	8001b9c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	e013      	b.n	8001b9c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <HAL_ADC_Start+0x180>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d10e      	bne.n	8001b9c <HAL_ADC_Start+0x164>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d107      	bne.n	8001b9c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b9a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	431bde83 	.word	0x431bde83
 8001bb4:	40012300 	.word	0x40012300
 8001bb8:	40012000 	.word	0x40012000
 8001bbc:	40012100 	.word	0x40012100
 8001bc0:	40012200 	.word	0x40012200

08001bc4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be0:	d113      	bne.n	8001c0a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bf0:	d10b      	bne.n	8001c0a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f043 0220 	orr.w	r2, r3, #32
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e05c      	b.n	8001cc4 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001c0a:	f7ff fea3 	bl	8001954 <HAL_GetTick>
 8001c0e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c10:	e01a      	b.n	8001c48 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c18:	d016      	beq.n	8001c48 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <HAL_ADC_PollForConversion+0x6c>
 8001c20:	f7ff fe98 	bl	8001954 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d20b      	bcs.n	8001c48 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	f043 0204 	orr.w	r2, r3, #4
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e03d      	b.n	8001cc4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d1dd      	bne.n	8001c12 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f06f 0212 	mvn.w	r2, #18
 8001c5e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d123      	bne.n	8001cc2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d11f      	bne.n	8001cc2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d006      	beq.n	8001c9e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d111      	bne.n	8001cc2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d105      	bne.n	8001cc2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f043 0201 	orr.w	r2, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x1c>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e105      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x228>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b09      	cmp	r3, #9
 8001d12:	d925      	bls.n	8001d60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68d9      	ldr	r1, [r3, #12]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	4613      	mov	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4413      	add	r3, r2
 8001d28:	3b1e      	subs	r3, #30
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43da      	mvns	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	400a      	ands	r2, r1
 8001d38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68d9      	ldr	r1, [r3, #12]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4403      	add	r3, r0
 8001d52:	3b1e      	subs	r3, #30
 8001d54:	409a      	lsls	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	e022      	b.n	8001da6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6919      	ldr	r1, [r3, #16]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	2207      	movs	r2, #7
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	400a      	ands	r2, r1
 8001d82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6919      	ldr	r1, [r3, #16]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	4618      	mov	r0, r3
 8001d96:	4603      	mov	r3, r0
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4403      	add	r3, r0
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b06      	cmp	r3, #6
 8001dac:	d824      	bhi.n	8001df8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3b05      	subs	r3, #5
 8001dc0:	221f      	movs	r2, #31
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	400a      	ands	r2, r1
 8001dce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	3b05      	subs	r3, #5
 8001dea:	fa00 f203 	lsl.w	r2, r0, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	635a      	str	r2, [r3, #52]	; 0x34
 8001df6:	e04c      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b0c      	cmp	r3, #12
 8001dfe:	d824      	bhi.n	8001e4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	3b23      	subs	r3, #35	; 0x23
 8001e12:	221f      	movs	r2, #31
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43da      	mvns	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	400a      	ands	r2, r1
 8001e20:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	3b23      	subs	r3, #35	; 0x23
 8001e3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	631a      	str	r2, [r3, #48]	; 0x30
 8001e48:	e023      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	3b41      	subs	r3, #65	; 0x41
 8001e5c:	221f      	movs	r2, #31
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	400a      	ands	r2, r1
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	3b41      	subs	r3, #65	; 0x41
 8001e86:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e92:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <HAL_ADC_ConfigChannel+0x234>)
 8001e94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a21      	ldr	r2, [pc, #132]	; (8001f20 <HAL_ADC_ConfigChannel+0x238>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d109      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x1cc>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b12      	cmp	r3, #18
 8001ea6:	d105      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a19      	ldr	r2, [pc, #100]	; (8001f20 <HAL_ADC_ConfigChannel+0x238>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d123      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x21e>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d003      	beq.n	8001ece <HAL_ADC_ConfigChannel+0x1e6>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b11      	cmp	r3, #17
 8001ecc:	d11b      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b10      	cmp	r3, #16
 8001ee0:	d111      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <HAL_ADC_ConfigChannel+0x23c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a10      	ldr	r2, [pc, #64]	; (8001f28 <HAL_ADC_ConfigChannel+0x240>)
 8001ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eec:	0c9a      	lsrs	r2, r3, #18
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ef8:	e002      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f9      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40012300 	.word	0x40012300
 8001f20:	40012000 	.word	0x40012000
 8001f24:	20000000 	.word	0x20000000
 8001f28:	431bde83 	.word	0x431bde83

08001f2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f34:	4b79      	ldr	r3, [pc, #484]	; (800211c <ADC_Init+0x1f0>)
 8001f36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	021a      	lsls	r2, r3, #8
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6859      	ldr	r1, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6899      	ldr	r1, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbe:	4a58      	ldr	r2, [pc, #352]	; (8002120 <ADC_Init+0x1f4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d022      	beq.n	800200a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6899      	ldr	r1, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ff4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6899      	ldr	r1, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	e00f      	b.n	800202a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002018:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002028:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0202 	bic.w	r2, r2, #2
 8002038:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6899      	ldr	r1, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7e1b      	ldrb	r3, [r3, #24]
 8002044:	005a      	lsls	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d01b      	beq.n	8002090 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002066:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002076:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6859      	ldr	r1, [r3, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	3b01      	subs	r3, #1
 8002084:	035a      	lsls	r2, r3, #13
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	e007      	b.n	80020a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800209e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	051a      	lsls	r2, r3, #20
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6899      	ldr	r1, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020e2:	025a      	lsls	r2, r3, #9
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6899      	ldr	r1, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	029a      	lsls	r2, r3, #10
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	609a      	str	r2, [r3, #8]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	40012300 	.word	0x40012300
 8002120:	0f000001 	.word	0x0f000001

08002124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800214c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002156:	4a04      	ldr	r2, [pc, #16]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60d3      	str	r3, [r2, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	6039      	str	r1, [r7, #0]
 8002192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	2b00      	cmp	r3, #0
 800219a:	db0a      	blt.n	80021b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	490c      	ldr	r1, [pc, #48]	; (80021d4 <__NVIC_SetPriority+0x4c>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	0112      	lsls	r2, r2, #4
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	440b      	add	r3, r1
 80021ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b0:	e00a      	b.n	80021c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4908      	ldr	r1, [pc, #32]	; (80021d8 <__NVIC_SetPriority+0x50>)
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	3b04      	subs	r3, #4
 80021c0:	0112      	lsls	r2, r2, #4
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	440b      	add	r3, r1
 80021c6:	761a      	strb	r2, [r3, #24]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000e100 	.word	0xe000e100
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f1c3 0307 	rsb	r3, r3, #7
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	bf28      	it	cs
 80021fa:	2304      	movcs	r3, #4
 80021fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3304      	adds	r3, #4
 8002202:	2b06      	cmp	r3, #6
 8002204:	d902      	bls.n	800220c <NVIC_EncodePriority+0x30>
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3b03      	subs	r3, #3
 800220a:	e000      	b.n	800220e <NVIC_EncodePriority+0x32>
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43da      	mvns	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	401a      	ands	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002224:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa01 f303 	lsl.w	r3, r1, r3
 800222e:	43d9      	mvns	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	4313      	orrs	r3, r2
         );
}
 8002236:	4618      	mov	r0, r3
 8002238:	3724      	adds	r7, #36	; 0x24
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3b01      	subs	r3, #1
 8002250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002254:	d301      	bcc.n	800225a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002256:	2301      	movs	r3, #1
 8002258:	e00f      	b.n	800227a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <SysTick_Config+0x40>)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3b01      	subs	r3, #1
 8002260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002262:	210f      	movs	r1, #15
 8002264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002268:	f7ff ff8e 	bl	8002188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <SysTick_Config+0x40>)
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002272:	4b04      	ldr	r3, [pc, #16]	; (8002284 <SysTick_Config+0x40>)
 8002274:	2207      	movs	r2, #7
 8002276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	e000e010 	.word	0xe000e010

08002288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ff47 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800229e:	b580      	push	{r7, lr}
 80022a0:	b086      	sub	sp, #24
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	4603      	mov	r3, r0
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
 80022aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b0:	f7ff ff5c 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	6978      	ldr	r0, [r7, #20]
 80022bc:	f7ff ff8e 	bl	80021dc <NVIC_EncodePriority>
 80022c0:	4602      	mov	r2, r0
 80022c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff5d 	bl	8002188 <__NVIC_SetPriority>
}
 80022ce:	bf00      	nop
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ffb0 	bl	8002244 <SysTick_Config>
 80022e4:	4603      	mov	r3, r0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e014      	b.n	800232a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	791b      	ldrb	r3, [r3, #4]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d105      	bne.n	8002316 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff f8b1 	bl	8001478 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2202      	movs	r2, #2
 800231a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002332:	b480      	push	{r7}
 8002334:	b087      	sub	sp, #28
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	795b      	ldrb	r3, [r3, #5]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_DAC_ConfigChannel+0x20>
 800234e:	2302      	movs	r3, #2
 8002350:	e036      	b.n	80023c0 <HAL_DAC_ConfigChannel+0x8e>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2202      	movs	r2, #2
 800235c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002366:	f640 72fe 	movw	r2, #4094	; 0xffe
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4013      	ands	r3, r2
 8002376:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	4313      	orrs	r3, r2
 8002390:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6819      	ldr	r1, [r3, #0]
 80023a0:	22c0      	movs	r2, #192	; 0xc0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43da      	mvns	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	400a      	ands	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	371c      	adds	r7, #28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023de:	2300      	movs	r3, #0
 80023e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	e16b      	b.n	80026c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023e8:	2201      	movs	r2, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	429a      	cmp	r2, r3
 8002402:	f040 815a 	bne.w	80026ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d00b      	beq.n	8002426 <HAL_GPIO_Init+0x5a>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d007      	beq.n	8002426 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800241a:	2b11      	cmp	r3, #17
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b12      	cmp	r3, #18
 8002424:	d130      	bne.n	8002488 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	2203      	movs	r2, #3
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800245c:	2201      	movs	r2, #1
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f003 0201 	and.w	r2, r3, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	2203      	movs	r2, #3
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0xfc>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b12      	cmp	r3, #18
 80024c6:	d123      	bne.n	8002510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	08da      	lsrs	r2, r3, #3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3208      	adds	r2, #8
 80024d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	220f      	movs	r2, #15
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	08da      	lsrs	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3208      	adds	r2, #8
 800250a:	69b9      	ldr	r1, [r7, #24]
 800250c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	2203      	movs	r2, #3
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0203 	and.w	r2, r3, #3
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80b4 	beq.w	80026ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b5f      	ldr	r3, [pc, #380]	; (80026d4 <HAL_GPIO_Init+0x308>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	4a5e      	ldr	r2, [pc, #376]	; (80026d4 <HAL_GPIO_Init+0x308>)
 800255c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002560:	6453      	str	r3, [r2, #68]	; 0x44
 8002562:	4b5c      	ldr	r3, [pc, #368]	; (80026d4 <HAL_GPIO_Init+0x308>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800256e:	4a5a      	ldr	r2, [pc, #360]	; (80026d8 <HAL_GPIO_Init+0x30c>)
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	089b      	lsrs	r3, r3, #2
 8002574:	3302      	adds	r3, #2
 8002576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	220f      	movs	r2, #15
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a51      	ldr	r2, [pc, #324]	; (80026dc <HAL_GPIO_Init+0x310>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d02b      	beq.n	80025f2 <HAL_GPIO_Init+0x226>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a50      	ldr	r2, [pc, #320]	; (80026e0 <HAL_GPIO_Init+0x314>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d025      	beq.n	80025ee <HAL_GPIO_Init+0x222>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4f      	ldr	r2, [pc, #316]	; (80026e4 <HAL_GPIO_Init+0x318>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d01f      	beq.n	80025ea <HAL_GPIO_Init+0x21e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4e      	ldr	r2, [pc, #312]	; (80026e8 <HAL_GPIO_Init+0x31c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d019      	beq.n	80025e6 <HAL_GPIO_Init+0x21a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a4d      	ldr	r2, [pc, #308]	; (80026ec <HAL_GPIO_Init+0x320>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d013      	beq.n	80025e2 <HAL_GPIO_Init+0x216>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a4c      	ldr	r2, [pc, #304]	; (80026f0 <HAL_GPIO_Init+0x324>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00d      	beq.n	80025de <HAL_GPIO_Init+0x212>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a4b      	ldr	r2, [pc, #300]	; (80026f4 <HAL_GPIO_Init+0x328>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d007      	beq.n	80025da <HAL_GPIO_Init+0x20e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4a      	ldr	r2, [pc, #296]	; (80026f8 <HAL_GPIO_Init+0x32c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d101      	bne.n	80025d6 <HAL_GPIO_Init+0x20a>
 80025d2:	2307      	movs	r3, #7
 80025d4:	e00e      	b.n	80025f4 <HAL_GPIO_Init+0x228>
 80025d6:	2308      	movs	r3, #8
 80025d8:	e00c      	b.n	80025f4 <HAL_GPIO_Init+0x228>
 80025da:	2306      	movs	r3, #6
 80025dc:	e00a      	b.n	80025f4 <HAL_GPIO_Init+0x228>
 80025de:	2305      	movs	r3, #5
 80025e0:	e008      	b.n	80025f4 <HAL_GPIO_Init+0x228>
 80025e2:	2304      	movs	r3, #4
 80025e4:	e006      	b.n	80025f4 <HAL_GPIO_Init+0x228>
 80025e6:	2303      	movs	r3, #3
 80025e8:	e004      	b.n	80025f4 <HAL_GPIO_Init+0x228>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e002      	b.n	80025f4 <HAL_GPIO_Init+0x228>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <HAL_GPIO_Init+0x228>
 80025f2:	2300      	movs	r3, #0
 80025f4:	69fa      	ldr	r2, [r7, #28]
 80025f6:	f002 0203 	and.w	r2, r2, #3
 80025fa:	0092      	lsls	r2, r2, #2
 80025fc:	4093      	lsls	r3, r2
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002604:	4934      	ldr	r1, [pc, #208]	; (80026d8 <HAL_GPIO_Init+0x30c>)
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	3302      	adds	r3, #2
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002612:	4b3a      	ldr	r3, [pc, #232]	; (80026fc <HAL_GPIO_Init+0x330>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002636:	4a31      	ldr	r2, [pc, #196]	; (80026fc <HAL_GPIO_Init+0x330>)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800263c:	4b2f      	ldr	r3, [pc, #188]	; (80026fc <HAL_GPIO_Init+0x330>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002660:	4a26      	ldr	r2, [pc, #152]	; (80026fc <HAL_GPIO_Init+0x330>)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002666:	4b25      	ldr	r3, [pc, #148]	; (80026fc <HAL_GPIO_Init+0x330>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800268a:	4a1c      	ldr	r2, [pc, #112]	; (80026fc <HAL_GPIO_Init+0x330>)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002690:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <HAL_GPIO_Init+0x330>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b4:	4a11      	ldr	r2, [pc, #68]	; (80026fc <HAL_GPIO_Init+0x330>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3301      	adds	r3, #1
 80026be:	61fb      	str	r3, [r7, #28]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	2b0f      	cmp	r3, #15
 80026c4:	f67f ae90 	bls.w	80023e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026c8:	bf00      	nop
 80026ca:	3724      	adds	r7, #36	; 0x24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40013800 	.word	0x40013800
 80026dc:	40020000 	.word	0x40020000
 80026e0:	40020400 	.word	0x40020400
 80026e4:	40020800 	.word	0x40020800
 80026e8:	40020c00 	.word	0x40020c00
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40021400 	.word	0x40021400
 80026f4:	40021800 	.word	0x40021800
 80026f8:	40021c00 	.word	0x40021c00
 80026fc:	40013c00 	.word	0x40013c00

08002700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
 800270c:	4613      	mov	r3, r2
 800270e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002710:	787b      	ldrb	r3, [r7, #1]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002716:	887a      	ldrh	r2, [r7, #2]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800271c:	e003      	b.n	8002726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800271e:	887b      	ldrh	r3, [r7, #2]
 8002720:	041a      	lsls	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	619a      	str	r2, [r3, #24]
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e11f      	b.n	8002986 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fe fed0 	bl	8001500 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2224      	movs	r2, #36	; 0x24
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0201 	bic.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002786:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002796:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002798:	f000 fd3e 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 800279c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4a7b      	ldr	r2, [pc, #492]	; (8002990 <HAL_I2C_Init+0x25c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d807      	bhi.n	80027b8 <HAL_I2C_Init+0x84>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4a7a      	ldr	r2, [pc, #488]	; (8002994 <HAL_I2C_Init+0x260>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	bf94      	ite	ls
 80027b0:	2301      	movls	r3, #1
 80027b2:	2300      	movhi	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	e006      	b.n	80027c6 <HAL_I2C_Init+0x92>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4a77      	ldr	r2, [pc, #476]	; (8002998 <HAL_I2C_Init+0x264>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	bf94      	ite	ls
 80027c0:	2301      	movls	r3, #1
 80027c2:	2300      	movhi	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e0db      	b.n	8002986 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4a72      	ldr	r2, [pc, #456]	; (800299c <HAL_I2C_Init+0x268>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	0c9b      	lsrs	r3, r3, #18
 80027d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4a64      	ldr	r2, [pc, #400]	; (8002990 <HAL_I2C_Init+0x25c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d802      	bhi.n	8002808 <HAL_I2C_Init+0xd4>
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	3301      	adds	r3, #1
 8002806:	e009      	b.n	800281c <HAL_I2C_Init+0xe8>
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800280e:	fb02 f303 	mul.w	r3, r2, r3
 8002812:	4a63      	ldr	r2, [pc, #396]	; (80029a0 <HAL_I2C_Init+0x26c>)
 8002814:	fba2 2303 	umull	r2, r3, r2, r3
 8002818:	099b      	lsrs	r3, r3, #6
 800281a:	3301      	adds	r3, #1
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	430b      	orrs	r3, r1
 8002822:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800282e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4956      	ldr	r1, [pc, #344]	; (8002990 <HAL_I2C_Init+0x25c>)
 8002838:	428b      	cmp	r3, r1
 800283a:	d80d      	bhi.n	8002858 <HAL_I2C_Init+0x124>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1e59      	subs	r1, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	fbb1 f3f3 	udiv	r3, r1, r3
 800284a:	3301      	adds	r3, #1
 800284c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002850:	2b04      	cmp	r3, #4
 8002852:	bf38      	it	cc
 8002854:	2304      	movcc	r3, #4
 8002856:	e04f      	b.n	80028f8 <HAL_I2C_Init+0x1c4>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d111      	bne.n	8002884 <HAL_I2C_Init+0x150>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1e58      	subs	r0, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6859      	ldr	r1, [r3, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	440b      	add	r3, r1
 800286e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002872:	3301      	adds	r3, #1
 8002874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	e012      	b.n	80028aa <HAL_I2C_Init+0x176>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1e58      	subs	r0, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	0099      	lsls	r1, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	fbb0 f3f3 	udiv	r3, r0, r3
 800289a:	3301      	adds	r3, #1
 800289c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_I2C_Init+0x17e>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e022      	b.n	80028f8 <HAL_I2C_Init+0x1c4>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10e      	bne.n	80028d8 <HAL_I2C_Init+0x1a4>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1e58      	subs	r0, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6859      	ldr	r1, [r3, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	440b      	add	r3, r1
 80028c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028cc:	3301      	adds	r3, #1
 80028ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d6:	e00f      	b.n	80028f8 <HAL_I2C_Init+0x1c4>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1e58      	subs	r0, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	0099      	lsls	r1, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	6809      	ldr	r1, [r1, #0]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002926:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6911      	ldr	r1, [r2, #16]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68d2      	ldr	r2, [r2, #12]
 8002932:	4311      	orrs	r1, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	430b      	orrs	r3, r1
 800293a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	000186a0 	.word	0x000186a0
 8002994:	001e847f 	.word	0x001e847f
 8002998:	003d08ff 	.word	0x003d08ff
 800299c:	431bde83 	.word	0x431bde83
 80029a0:	10624dd3 	.word	0x10624dd3

080029a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e25b      	b.n	8002e6e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d075      	beq.n	8002aae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029c2:	4ba3      	ldr	r3, [pc, #652]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d00c      	beq.n	80029e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ce:	4ba0      	ldr	r3, [pc, #640]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d112      	bne.n	8002a00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029da:	4b9d      	ldr	r3, [pc, #628]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029e6:	d10b      	bne.n	8002a00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e8:	4b99      	ldr	r3, [pc, #612]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d05b      	beq.n	8002aac <HAL_RCC_OscConfig+0x108>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d157      	bne.n	8002aac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e236      	b.n	8002e6e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a08:	d106      	bne.n	8002a18 <HAL_RCC_OscConfig+0x74>
 8002a0a:	4b91      	ldr	r3, [pc, #580]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a90      	ldr	r2, [pc, #576]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e01d      	b.n	8002a54 <HAL_RCC_OscConfig+0xb0>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x98>
 8002a22:	4b8b      	ldr	r3, [pc, #556]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a8a      	ldr	r2, [pc, #552]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	4b88      	ldr	r3, [pc, #544]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a87      	ldr	r2, [pc, #540]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCC_OscConfig+0xb0>
 8002a3c:	4b84      	ldr	r3, [pc, #528]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a83      	ldr	r2, [pc, #524]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	4b81      	ldr	r3, [pc, #516]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a80      	ldr	r2, [pc, #512]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d013      	beq.n	8002a84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7fe ff7a 	bl	8001954 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a64:	f7fe ff76 	bl	8001954 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e1fb      	b.n	8002e6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	4b76      	ldr	r3, [pc, #472]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0xc0>
 8002a82:	e014      	b.n	8002aae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe ff66 	bl	8001954 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7fe ff62 	bl	8001954 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e1e7      	b.n	8002e6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	4b6c      	ldr	r3, [pc, #432]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0xe8>
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d063      	beq.n	8002b82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aba:	4b65      	ldr	r3, [pc, #404]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ac6:	4b62      	ldr	r3, [pc, #392]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d11c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad2:	4b5f      	ldr	r3, [pc, #380]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d116      	bne.n	8002b0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ade:	4b5c      	ldr	r3, [pc, #368]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_RCC_OscConfig+0x152>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d001      	beq.n	8002af6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e1bb      	b.n	8002e6e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	4b56      	ldr	r3, [pc, #344]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4952      	ldr	r1, [pc, #328]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	e03a      	b.n	8002b82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b14:	4b4f      	ldr	r3, [pc, #316]	; (8002c54 <HAL_RCC_OscConfig+0x2b0>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7fe ff1b 	bl	8001954 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b22:	f7fe ff17 	bl	8001954 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e19c      	b.n	8002e6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	4b46      	ldr	r3, [pc, #280]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b40:	4b43      	ldr	r3, [pc, #268]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4940      	ldr	r1, [pc, #256]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]
 8002b54:	e015      	b.n	8002b82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b56:	4b3f      	ldr	r3, [pc, #252]	; (8002c54 <HAL_RCC_OscConfig+0x2b0>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fefa 	bl	8001954 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b64:	f7fe fef6 	bl	8001954 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e17b      	b.n	8002e6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d030      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d016      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b96:	4b30      	ldr	r3, [pc, #192]	; (8002c58 <HAL_RCC_OscConfig+0x2b4>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9c:	f7fe feda 	bl	8001954 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba4:	f7fe fed6 	bl	8001954 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e15b      	b.n	8002e6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x200>
 8002bc2:	e015      	b.n	8002bf0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc4:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <HAL_RCC_OscConfig+0x2b4>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bca:	f7fe fec3 	bl	8001954 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd2:	f7fe febf 	bl	8001954 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e144      	b.n	8002e6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be4:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f0      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80a0 	beq.w	8002d3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c02:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10f      	bne.n	8002c2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_RCC_OscConfig+0x2b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d121      	bne.n	8002c7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <HAL_RCC_OscConfig+0x2b8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a07      	ldr	r2, [pc, #28]	; (8002c5c <HAL_RCC_OscConfig+0x2b8>)
 8002c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c46:	f7fe fe85 	bl	8001954 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4c:	e011      	b.n	8002c72 <HAL_RCC_OscConfig+0x2ce>
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800
 8002c54:	42470000 	.word	0x42470000
 8002c58:	42470e80 	.word	0x42470e80
 8002c5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c60:	f7fe fe78 	bl	8001954 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e0fd      	b.n	8002e6e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c72:	4b81      	ldr	r3, [pc, #516]	; (8002e78 <HAL_RCC_OscConfig+0x4d4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d106      	bne.n	8002c94 <HAL_RCC_OscConfig+0x2f0>
 8002c86:	4b7d      	ldr	r3, [pc, #500]	; (8002e7c <HAL_RCC_OscConfig+0x4d8>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	4a7c      	ldr	r2, [pc, #496]	; (8002e7c <HAL_RCC_OscConfig+0x4d8>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	6713      	str	r3, [r2, #112]	; 0x70
 8002c92:	e01c      	b.n	8002cce <HAL_RCC_OscConfig+0x32a>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d10c      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x312>
 8002c9c:	4b77      	ldr	r3, [pc, #476]	; (8002e7c <HAL_RCC_OscConfig+0x4d8>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	4a76      	ldr	r2, [pc, #472]	; (8002e7c <HAL_RCC_OscConfig+0x4d8>)
 8002ca2:	f043 0304 	orr.w	r3, r3, #4
 8002ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca8:	4b74      	ldr	r3, [pc, #464]	; (8002e7c <HAL_RCC_OscConfig+0x4d8>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	4a73      	ldr	r2, [pc, #460]	; (8002e7c <HAL_RCC_OscConfig+0x4d8>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb4:	e00b      	b.n	8002cce <HAL_RCC_OscConfig+0x32a>
 8002cb6:	4b71      	ldr	r3, [pc, #452]	; (8002e7c <HAL_RCC_OscConfig+0x4d8>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	4a70      	ldr	r2, [pc, #448]	; (8002e7c <HAL_RCC_OscConfig+0x4d8>)
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc2:	4b6e      	ldr	r3, [pc, #440]	; (8002e7c <HAL_RCC_OscConfig+0x4d8>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	4a6d      	ldr	r2, [pc, #436]	; (8002e7c <HAL_RCC_OscConfig+0x4d8>)
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d015      	beq.n	8002d02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd6:	f7fe fe3d 	bl	8001954 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7fe fe39 	bl	8001954 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e0bc      	b.n	8002e6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf4:	4b61      	ldr	r3, [pc, #388]	; (8002e7c <HAL_RCC_OscConfig+0x4d8>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ee      	beq.n	8002cde <HAL_RCC_OscConfig+0x33a>
 8002d00:	e014      	b.n	8002d2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d02:	f7fe fe27 	bl	8001954 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7fe fe23 	bl	8001954 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e0a6      	b.n	8002e6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d20:	4b56      	ldr	r3, [pc, #344]	; (8002e7c <HAL_RCC_OscConfig+0x4d8>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ee      	bne.n	8002d0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d105      	bne.n	8002d3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d32:	4b52      	ldr	r3, [pc, #328]	; (8002e7c <HAL_RCC_OscConfig+0x4d8>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	4a51      	ldr	r2, [pc, #324]	; (8002e7c <HAL_RCC_OscConfig+0x4d8>)
 8002d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8092 	beq.w	8002e6c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d48:	4b4c      	ldr	r3, [pc, #304]	; (8002e7c <HAL_RCC_OscConfig+0x4d8>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d05c      	beq.n	8002e0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d141      	bne.n	8002de0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5c:	4b48      	ldr	r3, [pc, #288]	; (8002e80 <HAL_RCC_OscConfig+0x4dc>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d62:	f7fe fdf7 	bl	8001954 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6a:	f7fe fdf3 	bl	8001954 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e078      	b.n	8002e6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7c:	4b3f      	ldr	r3, [pc, #252]	; (8002e7c <HAL_RCC_OscConfig+0x4d8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f0      	bne.n	8002d6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69da      	ldr	r2, [r3, #28]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	019b      	lsls	r3, r3, #6
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	085b      	lsrs	r3, r3, #1
 8002da0:	3b01      	subs	r3, #1
 8002da2:	041b      	lsls	r3, r3, #16
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	061b      	lsls	r3, r3, #24
 8002dac:	4933      	ldr	r1, [pc, #204]	; (8002e7c <HAL_RCC_OscConfig+0x4d8>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db2:	4b33      	ldr	r3, [pc, #204]	; (8002e80 <HAL_RCC_OscConfig+0x4dc>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7fe fdcc 	bl	8001954 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7fe fdc8 	bl	8001954 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e04d      	b.n	8002e6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd2:	4b2a      	ldr	r3, [pc, #168]	; (8002e7c <HAL_RCC_OscConfig+0x4d8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x41c>
 8002dde:	e045      	b.n	8002e6c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de0:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <HAL_RCC_OscConfig+0x4dc>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de6:	f7fe fdb5 	bl	8001954 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dee:	f7fe fdb1 	bl	8001954 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e036      	b.n	8002e6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e00:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <HAL_RCC_OscConfig+0x4d8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f0      	bne.n	8002dee <HAL_RCC_OscConfig+0x44a>
 8002e0c:	e02e      	b.n	8002e6c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e029      	b.n	8002e6e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e1a:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <HAL_RCC_OscConfig+0x4d8>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d11c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d115      	bne.n	8002e68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e42:	4013      	ands	r3, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d10d      	bne.n	8002e68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d106      	bne.n	8002e68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	42470060 	.word	0x42470060

08002e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0cc      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e98:	4b68      	ldr	r3, [pc, #416]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d90c      	bls.n	8002ec0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea6:	4b65      	ldr	r3, [pc, #404]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eae:	4b63      	ldr	r3, [pc, #396]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0b8      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed8:	4b59      	ldr	r3, [pc, #356]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	4a58      	ldr	r2, [pc, #352]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ee2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef0:	4b53      	ldr	r3, [pc, #332]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	4a52      	ldr	r2, [pc, #328]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002efc:	4b50      	ldr	r3, [pc, #320]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	494d      	ldr	r1, [pc, #308]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d044      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	4b47      	ldr	r3, [pc, #284]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d119      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e07f      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d003      	beq.n	8002f42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d107      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f42:	4b3f      	ldr	r3, [pc, #252]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d109      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e06f      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f52:	4b3b      	ldr	r3, [pc, #236]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e067      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f62:	4b37      	ldr	r3, [pc, #220]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f023 0203 	bic.w	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4934      	ldr	r1, [pc, #208]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f74:	f7fe fcee 	bl	8001954 <HAL_GetTick>
 8002f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f7c:	f7fe fcea 	bl	8001954 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e04f      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f92:	4b2b      	ldr	r3, [pc, #172]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 020c 	and.w	r2, r3, #12
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d1eb      	bne.n	8002f7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b25      	ldr	r3, [pc, #148]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d20c      	bcs.n	8002fcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b22      	ldr	r3, [pc, #136]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b20      	ldr	r3, [pc, #128]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e032      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	4916      	ldr	r1, [pc, #88]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	490e      	ldr	r1, [pc, #56]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	4313      	orrs	r3, r2
 8003008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800300a:	f000 f821 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 800300e:	4601      	mov	r1, r0
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <HAL_RCC_ClockConfig+0x1c0>)
 800301c:	5cd3      	ldrb	r3, [r2, r3]
 800301e:	fa21 f303 	lsr.w	r3, r1, r3
 8003022:	4a09      	ldr	r2, [pc, #36]	; (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003026:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_RCC_ClockConfig+0x1c8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe fc4e 	bl	80018cc <HAL_InitTick>

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40023c00 	.word	0x40023c00
 8003040:	40023800 	.word	0x40023800
 8003044:	08004fe0 	.word	0x08004fe0
 8003048:	20000000 	.word	0x20000000
 800304c:	20000004 	.word	0x20000004

08003050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	607b      	str	r3, [r7, #4]
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	2300      	movs	r3, #0
 8003060:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003066:	4b63      	ldr	r3, [pc, #396]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b04      	cmp	r3, #4
 8003070:	d007      	beq.n	8003082 <HAL_RCC_GetSysClockFreq+0x32>
 8003072:	2b08      	cmp	r3, #8
 8003074:	d008      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x38>
 8003076:	2b00      	cmp	r3, #0
 8003078:	f040 80b4 	bne.w	80031e4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800307c:	4b5e      	ldr	r3, [pc, #376]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800307e:	60bb      	str	r3, [r7, #8]
       break;
 8003080:	e0b3      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003082:	4b5e      	ldr	r3, [pc, #376]	; (80031fc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003084:	60bb      	str	r3, [r7, #8]
      break;
 8003086:	e0b0      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003088:	4b5a      	ldr	r3, [pc, #360]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003090:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003092:	4b58      	ldr	r3, [pc, #352]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d04a      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800309e:	4b55      	ldr	r3, [pc, #340]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	099b      	lsrs	r3, r3, #6
 80030a4:	f04f 0400 	mov.w	r4, #0
 80030a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	ea03 0501 	and.w	r5, r3, r1
 80030b4:	ea04 0602 	and.w	r6, r4, r2
 80030b8:	4629      	mov	r1, r5
 80030ba:	4632      	mov	r2, r6
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	f04f 0400 	mov.w	r4, #0
 80030c4:	0154      	lsls	r4, r2, #5
 80030c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030ca:	014b      	lsls	r3, r1, #5
 80030cc:	4619      	mov	r1, r3
 80030ce:	4622      	mov	r2, r4
 80030d0:	1b49      	subs	r1, r1, r5
 80030d2:	eb62 0206 	sbc.w	r2, r2, r6
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	f04f 0400 	mov.w	r4, #0
 80030de:	0194      	lsls	r4, r2, #6
 80030e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030e4:	018b      	lsls	r3, r1, #6
 80030e6:	1a5b      	subs	r3, r3, r1
 80030e8:	eb64 0402 	sbc.w	r4, r4, r2
 80030ec:	f04f 0100 	mov.w	r1, #0
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	00e2      	lsls	r2, r4, #3
 80030f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030fa:	00d9      	lsls	r1, r3, #3
 80030fc:	460b      	mov	r3, r1
 80030fe:	4614      	mov	r4, r2
 8003100:	195b      	adds	r3, r3, r5
 8003102:	eb44 0406 	adc.w	r4, r4, r6
 8003106:	f04f 0100 	mov.w	r1, #0
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	0262      	lsls	r2, r4, #9
 8003110:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003114:	0259      	lsls	r1, r3, #9
 8003116:	460b      	mov	r3, r1
 8003118:	4614      	mov	r4, r2
 800311a:	4618      	mov	r0, r3
 800311c:	4621      	mov	r1, r4
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f04f 0400 	mov.w	r4, #0
 8003124:	461a      	mov	r2, r3
 8003126:	4623      	mov	r3, r4
 8003128:	f7fd f8aa 	bl	8000280 <__aeabi_uldivmod>
 800312c:	4603      	mov	r3, r0
 800312e:	460c      	mov	r4, r1
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	e049      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003134:	4b2f      	ldr	r3, [pc, #188]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	099b      	lsrs	r3, r3, #6
 800313a:	f04f 0400 	mov.w	r4, #0
 800313e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	ea03 0501 	and.w	r5, r3, r1
 800314a:	ea04 0602 	and.w	r6, r4, r2
 800314e:	4629      	mov	r1, r5
 8003150:	4632      	mov	r2, r6
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	f04f 0400 	mov.w	r4, #0
 800315a:	0154      	lsls	r4, r2, #5
 800315c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003160:	014b      	lsls	r3, r1, #5
 8003162:	4619      	mov	r1, r3
 8003164:	4622      	mov	r2, r4
 8003166:	1b49      	subs	r1, r1, r5
 8003168:	eb62 0206 	sbc.w	r2, r2, r6
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	f04f 0400 	mov.w	r4, #0
 8003174:	0194      	lsls	r4, r2, #6
 8003176:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800317a:	018b      	lsls	r3, r1, #6
 800317c:	1a5b      	subs	r3, r3, r1
 800317e:	eb64 0402 	sbc.w	r4, r4, r2
 8003182:	f04f 0100 	mov.w	r1, #0
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	00e2      	lsls	r2, r4, #3
 800318c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003190:	00d9      	lsls	r1, r3, #3
 8003192:	460b      	mov	r3, r1
 8003194:	4614      	mov	r4, r2
 8003196:	195b      	adds	r3, r3, r5
 8003198:	eb44 0406 	adc.w	r4, r4, r6
 800319c:	f04f 0100 	mov.w	r1, #0
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	02a2      	lsls	r2, r4, #10
 80031a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80031aa:	0299      	lsls	r1, r3, #10
 80031ac:	460b      	mov	r3, r1
 80031ae:	4614      	mov	r4, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	4621      	mov	r1, r4
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f04f 0400 	mov.w	r4, #0
 80031ba:	461a      	mov	r2, r3
 80031bc:	4623      	mov	r3, r4
 80031be:	f7fd f85f 	bl	8000280 <__aeabi_uldivmod>
 80031c2:	4603      	mov	r3, r0
 80031c4:	460c      	mov	r4, r1
 80031c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	0c1b      	lsrs	r3, r3, #16
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	3301      	adds	r3, #1
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e0:	60bb      	str	r3, [r7, #8]
      break;
 80031e2:	e002      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80031e6:	60bb      	str	r3, [r7, #8]
      break;
 80031e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ea:	68bb      	ldr	r3, [r7, #8]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031f4:	40023800 	.word	0x40023800
 80031f8:	00f42400 	.word	0x00f42400
 80031fc:	007a1200 	.word	0x007a1200

08003200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003204:	4b03      	ldr	r3, [pc, #12]	; (8003214 <HAL_RCC_GetHCLKFreq+0x14>)
 8003206:	681b      	ldr	r3, [r3, #0]
}
 8003208:	4618      	mov	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000000 	.word	0x20000000

08003218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800321c:	f7ff fff0 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 8003220:	4601      	mov	r1, r0
 8003222:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	0a9b      	lsrs	r3, r3, #10
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	4a03      	ldr	r2, [pc, #12]	; (800323c <HAL_RCC_GetPCLK1Freq+0x24>)
 800322e:	5cd3      	ldrb	r3, [r2, r3]
 8003230:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40023800 	.word	0x40023800
 800323c:	08004ff0 	.word	0x08004ff0

08003240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003244:	f7ff ffdc 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 8003248:	4601      	mov	r1, r0
 800324a:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	0b5b      	lsrs	r3, r3, #13
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4a03      	ldr	r2, [pc, #12]	; (8003264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003256:	5cd3      	ldrb	r3, [r2, r3]
 8003258:	fa21 f303 	lsr.w	r3, r1, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40023800 	.word	0x40023800
 8003264:	08004ff0 	.word	0x08004ff0

08003268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e01d      	b.n	80032b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fe f97e 	bl	8001590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3304      	adds	r3, #4
 80032a4:	4619      	mov	r1, r3
 80032a6:	4610      	mov	r0, r2
 80032a8:	f000 f9fa 	bl	80036a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b082      	sub	sp, #8
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e01d      	b.n	800330c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d106      	bne.n	80032ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f815 	bl	8003314 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2202      	movs	r2, #2
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3304      	adds	r3, #4
 80032fa:	4619      	mov	r1, r3
 80032fc:	4610      	mov	r0, r2
 80032fe:	f000 f9cf 	bl	80036a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2201      	movs	r2, #1
 8003338:	6839      	ldr	r1, [r7, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fc9a 	bl	8003c74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a15      	ldr	r2, [pc, #84]	; (800339c <HAL_TIM_PWM_Start+0x74>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d004      	beq.n	8003354 <HAL_TIM_PWM_Start+0x2c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a14      	ldr	r2, [pc, #80]	; (80033a0 <HAL_TIM_PWM_Start+0x78>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d101      	bne.n	8003358 <HAL_TIM_PWM_Start+0x30>
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <HAL_TIM_PWM_Start+0x32>
 8003358:	2300      	movs	r3, #0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d007      	beq.n	800336e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800336c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b06      	cmp	r3, #6
 800337e:	d007      	beq.n	8003390 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40010000 	.word	0x40010000
 80033a0:	40010400 	.word	0x40010400

080033a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e0b4      	b.n	8003528 <HAL_TIM_PWM_ConfigChannel+0x184>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2202      	movs	r2, #2
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b0c      	cmp	r3, #12
 80033d2:	f200 809f 	bhi.w	8003514 <HAL_TIM_PWM_ConfigChannel+0x170>
 80033d6:	a201      	add	r2, pc, #4	; (adr r2, 80033dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80033d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033dc:	08003411 	.word	0x08003411
 80033e0:	08003515 	.word	0x08003515
 80033e4:	08003515 	.word	0x08003515
 80033e8:	08003515 	.word	0x08003515
 80033ec:	08003451 	.word	0x08003451
 80033f0:	08003515 	.word	0x08003515
 80033f4:	08003515 	.word	0x08003515
 80033f8:	08003515 	.word	0x08003515
 80033fc:	08003493 	.word	0x08003493
 8003400:	08003515 	.word	0x08003515
 8003404:	08003515 	.word	0x08003515
 8003408:	08003515 	.word	0x08003515
 800340c:	080034d3 	.word	0x080034d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f9e2 	bl	80037e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699a      	ldr	r2, [r3, #24]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0208 	orr.w	r2, r2, #8
 800342a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0204 	bic.w	r2, r2, #4
 800343a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6999      	ldr	r1, [r3, #24]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	691a      	ldr	r2, [r3, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	619a      	str	r2, [r3, #24]
      break;
 800344e:	e062      	b.n	8003516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fa32 	bl	80038c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699a      	ldr	r2, [r3, #24]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800346a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699a      	ldr	r2, [r3, #24]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6999      	ldr	r1, [r3, #24]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	021a      	lsls	r2, r3, #8
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	619a      	str	r2, [r3, #24]
      break;
 8003490:	e041      	b.n	8003516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68b9      	ldr	r1, [r7, #8]
 8003498:	4618      	mov	r0, r3
 800349a:	f000 fa87 	bl	80039ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69da      	ldr	r2, [r3, #28]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f042 0208 	orr.w	r2, r2, #8
 80034ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69da      	ldr	r2, [r3, #28]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0204 	bic.w	r2, r2, #4
 80034bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	69d9      	ldr	r1, [r3, #28]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	61da      	str	r2, [r3, #28]
      break;
 80034d0:	e021      	b.n	8003516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68b9      	ldr	r1, [r7, #8]
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fadb 	bl	8003a94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69da      	ldr	r2, [r3, #28]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69da      	ldr	r2, [r3, #28]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69d9      	ldr	r1, [r3, #28]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	021a      	lsls	r2, r3, #8
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	61da      	str	r2, [r3, #28]
      break;
 8003512:	e000      	b.n	8003516 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003514:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_TIM_ConfigClockSource+0x18>
 8003544:	2302      	movs	r3, #2
 8003546:	e0a6      	b.n	8003696 <HAL_TIM_ConfigClockSource+0x166>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003566:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800356e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b40      	cmp	r3, #64	; 0x40
 800357e:	d067      	beq.n	8003650 <HAL_TIM_ConfigClockSource+0x120>
 8003580:	2b40      	cmp	r3, #64	; 0x40
 8003582:	d80b      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x6c>
 8003584:	2b10      	cmp	r3, #16
 8003586:	d073      	beq.n	8003670 <HAL_TIM_ConfigClockSource+0x140>
 8003588:	2b10      	cmp	r3, #16
 800358a:	d802      	bhi.n	8003592 <HAL_TIM_ConfigClockSource+0x62>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d06f      	beq.n	8003670 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003590:	e078      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003592:	2b20      	cmp	r3, #32
 8003594:	d06c      	beq.n	8003670 <HAL_TIM_ConfigClockSource+0x140>
 8003596:	2b30      	cmp	r3, #48	; 0x30
 8003598:	d06a      	beq.n	8003670 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800359a:	e073      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800359c:	2b70      	cmp	r3, #112	; 0x70
 800359e:	d00d      	beq.n	80035bc <HAL_TIM_ConfigClockSource+0x8c>
 80035a0:	2b70      	cmp	r3, #112	; 0x70
 80035a2:	d804      	bhi.n	80035ae <HAL_TIM_ConfigClockSource+0x7e>
 80035a4:	2b50      	cmp	r3, #80	; 0x50
 80035a6:	d033      	beq.n	8003610 <HAL_TIM_ConfigClockSource+0xe0>
 80035a8:	2b60      	cmp	r3, #96	; 0x60
 80035aa:	d041      	beq.n	8003630 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80035ac:	e06a      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b2:	d066      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0x152>
 80035b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035b8:	d017      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0xba>
      break;
 80035ba:	e063      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	6899      	ldr	r1, [r3, #8]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f000 fb32 	bl	8003c34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	609a      	str	r2, [r3, #8]
      break;
 80035e8:	e04c      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6899      	ldr	r1, [r3, #8]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f000 fb1b 	bl	8003c34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800360c:	609a      	str	r2, [r3, #8]
      break;
 800360e:	e039      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6818      	ldr	r0, [r3, #0]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	6859      	ldr	r1, [r3, #4]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	461a      	mov	r2, r3
 800361e:	f000 fa8f 	bl	8003b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2150      	movs	r1, #80	; 0x50
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fae8 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 800362e:	e029      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	6859      	ldr	r1, [r3, #4]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	461a      	mov	r2, r3
 800363e:	f000 faae 	bl	8003b9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2160      	movs	r1, #96	; 0x60
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fad8 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 800364e:	e019      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	461a      	mov	r2, r3
 800365e:	f000 fa6f 	bl	8003b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2140      	movs	r1, #64	; 0x40
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fac8 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 800366e:	e009      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4619      	mov	r1, r3
 800367a:	4610      	mov	r0, r2
 800367c:	f000 fabf 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 8003680:	e000      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003682:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a40      	ldr	r2, [pc, #256]	; (80037b4 <TIM_Base_SetConfig+0x114>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d013      	beq.n	80036e0 <TIM_Base_SetConfig+0x40>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036be:	d00f      	beq.n	80036e0 <TIM_Base_SetConfig+0x40>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a3d      	ldr	r2, [pc, #244]	; (80037b8 <TIM_Base_SetConfig+0x118>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00b      	beq.n	80036e0 <TIM_Base_SetConfig+0x40>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a3c      	ldr	r2, [pc, #240]	; (80037bc <TIM_Base_SetConfig+0x11c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d007      	beq.n	80036e0 <TIM_Base_SetConfig+0x40>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a3b      	ldr	r2, [pc, #236]	; (80037c0 <TIM_Base_SetConfig+0x120>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d003      	beq.n	80036e0 <TIM_Base_SetConfig+0x40>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a3a      	ldr	r2, [pc, #232]	; (80037c4 <TIM_Base_SetConfig+0x124>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d108      	bne.n	80036f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a2f      	ldr	r2, [pc, #188]	; (80037b4 <TIM_Base_SetConfig+0x114>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d02b      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003700:	d027      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a2c      	ldr	r2, [pc, #176]	; (80037b8 <TIM_Base_SetConfig+0x118>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d023      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a2b      	ldr	r2, [pc, #172]	; (80037bc <TIM_Base_SetConfig+0x11c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d01f      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a2a      	ldr	r2, [pc, #168]	; (80037c0 <TIM_Base_SetConfig+0x120>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01b      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a29      	ldr	r2, [pc, #164]	; (80037c4 <TIM_Base_SetConfig+0x124>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d017      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a28      	ldr	r2, [pc, #160]	; (80037c8 <TIM_Base_SetConfig+0x128>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a27      	ldr	r2, [pc, #156]	; (80037cc <TIM_Base_SetConfig+0x12c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00f      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a26      	ldr	r2, [pc, #152]	; (80037d0 <TIM_Base_SetConfig+0x130>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00b      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a25      	ldr	r2, [pc, #148]	; (80037d4 <TIM_Base_SetConfig+0x134>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d007      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a24      	ldr	r2, [pc, #144]	; (80037d8 <TIM_Base_SetConfig+0x138>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d003      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a23      	ldr	r2, [pc, #140]	; (80037dc <TIM_Base_SetConfig+0x13c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d108      	bne.n	8003764 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4313      	orrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <TIM_Base_SetConfig+0x114>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d003      	beq.n	8003798 <TIM_Base_SetConfig+0xf8>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a0c      	ldr	r2, [pc, #48]	; (80037c4 <TIM_Base_SetConfig+0x124>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d103      	bne.n	80037a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	615a      	str	r2, [r3, #20]
}
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40010000 	.word	0x40010000
 80037b8:	40000400 	.word	0x40000400
 80037bc:	40000800 	.word	0x40000800
 80037c0:	40000c00 	.word	0x40000c00
 80037c4:	40010400 	.word	0x40010400
 80037c8:	40014000 	.word	0x40014000
 80037cc:	40014400 	.word	0x40014400
 80037d0:	40014800 	.word	0x40014800
 80037d4:	40001800 	.word	0x40001800
 80037d8:	40001c00 	.word	0x40001c00
 80037dc:	40002000 	.word	0x40002000

080037e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	f023 0201 	bic.w	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0303 	bic.w	r3, r3, #3
 8003816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f023 0302 	bic.w	r3, r3, #2
 8003828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a20      	ldr	r2, [pc, #128]	; (80038b8 <TIM_OC1_SetConfig+0xd8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d003      	beq.n	8003844 <TIM_OC1_SetConfig+0x64>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a1f      	ldr	r2, [pc, #124]	; (80038bc <TIM_OC1_SetConfig+0xdc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d10c      	bne.n	800385e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f023 0308 	bic.w	r3, r3, #8
 800384a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f023 0304 	bic.w	r3, r3, #4
 800385c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a15      	ldr	r2, [pc, #84]	; (80038b8 <TIM_OC1_SetConfig+0xd8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d003      	beq.n	800386e <TIM_OC1_SetConfig+0x8e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a14      	ldr	r2, [pc, #80]	; (80038bc <TIM_OC1_SetConfig+0xdc>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d111      	bne.n	8003892 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800387c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	621a      	str	r2, [r3, #32]
}
 80038ac:	bf00      	nop
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	40010000 	.word	0x40010000
 80038bc:	40010400 	.word	0x40010400

080038c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	f023 0210 	bic.w	r2, r3, #16
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f023 0320 	bic.w	r3, r3, #32
 800390a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	4313      	orrs	r3, r2
 8003916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a22      	ldr	r2, [pc, #136]	; (80039a4 <TIM_OC2_SetConfig+0xe4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_OC2_SetConfig+0x68>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a21      	ldr	r2, [pc, #132]	; (80039a8 <TIM_OC2_SetConfig+0xe8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d10d      	bne.n	8003944 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800392e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003942:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a17      	ldr	r2, [pc, #92]	; (80039a4 <TIM_OC2_SetConfig+0xe4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d003      	beq.n	8003954 <TIM_OC2_SetConfig+0x94>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a16      	ldr	r2, [pc, #88]	; (80039a8 <TIM_OC2_SetConfig+0xe8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d113      	bne.n	800397c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800395a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003962:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40010000 	.word	0x40010000
 80039a8:	40010400 	.word	0x40010400

080039ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0303 	bic.w	r3, r3, #3
 80039e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a21      	ldr	r2, [pc, #132]	; (8003a8c <TIM_OC3_SetConfig+0xe0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_OC3_SetConfig+0x66>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a20      	ldr	r2, [pc, #128]	; (8003a90 <TIM_OC3_SetConfig+0xe4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d10d      	bne.n	8003a2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a16      	ldr	r2, [pc, #88]	; (8003a8c <TIM_OC3_SetConfig+0xe0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d003      	beq.n	8003a3e <TIM_OC3_SetConfig+0x92>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a15      	ldr	r2, [pc, #84]	; (8003a90 <TIM_OC3_SetConfig+0xe4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d113      	bne.n	8003a66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	621a      	str	r2, [r3, #32]
}
 8003a80:	bf00      	nop
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	40010400 	.word	0x40010400

08003a94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	021b      	lsls	r3, r3, #8
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	031b      	lsls	r3, r3, #12
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a12      	ldr	r2, [pc, #72]	; (8003b38 <TIM_OC4_SetConfig+0xa4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d003      	beq.n	8003afc <TIM_OC4_SetConfig+0x68>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a11      	ldr	r2, [pc, #68]	; (8003b3c <TIM_OC4_SetConfig+0xa8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d109      	bne.n	8003b10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	019b      	lsls	r3, r3, #6
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	621a      	str	r2, [r3, #32]
}
 8003b2a:	bf00      	nop
 8003b2c:	371c      	adds	r7, #28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40010000 	.word	0x40010000
 8003b3c:	40010400 	.word	0x40010400

08003b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	f023 0201 	bic.w	r2, r3, #1
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f023 030a 	bic.w	r3, r3, #10
 8003b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	621a      	str	r2, [r3, #32]
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b087      	sub	sp, #28
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	f023 0210 	bic.w	r2, r3, #16
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	031b      	lsls	r3, r3, #12
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	621a      	str	r2, [r3, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b085      	sub	sp, #20
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f043 0307 	orr.w	r3, r3, #7
 8003c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	609a      	str	r2, [r3, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	021a      	lsls	r2, r3, #8
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	609a      	str	r2, [r3, #8]
}
 8003c68:	bf00      	nop
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	2201      	movs	r2, #1
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1a      	ldr	r2, [r3, #32]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	43db      	mvns	r3, r3
 8003c96:	401a      	ands	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a1a      	ldr	r2, [r3, #32]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cac:	431a      	orrs	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	621a      	str	r2, [r3, #32]
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e05a      	b.n	8003d8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a21      	ldr	r2, [pc, #132]	; (8003d9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d022      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d24:	d01d      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1d      	ldr	r2, [pc, #116]	; (8003da0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d018      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a1b      	ldr	r2, [pc, #108]	; (8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d013      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1a      	ldr	r2, [pc, #104]	; (8003da8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00e      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a18      	ldr	r2, [pc, #96]	; (8003dac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d009      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a17      	ldr	r2, [pc, #92]	; (8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d004      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a15      	ldr	r2, [pc, #84]	; (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d10c      	bne.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40010000 	.word	0x40010000
 8003da0:	40000400 	.word	0x40000400
 8003da4:	40000800 	.word	0x40000800
 8003da8:	40000c00 	.word	0x40000c00
 8003dac:	40010400 	.word	0x40010400
 8003db0:	40014000 	.word	0x40014000
 8003db4:	40001800 	.word	0x40001800

08003db8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e03f      	b.n	8003e4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fd fc70 	bl	80016c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2224      	movs	r2, #36	; 0x24
 8003de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f90b 	bl	8004018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695a      	ldr	r2, [r3, #20]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b088      	sub	sp, #32
 8003e56:	af02      	add	r7, sp, #8
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	603b      	str	r3, [r7, #0]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	f040 8083 	bne.w	8003f7a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_UART_Transmit+0x2e>
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e07b      	b.n	8003f7c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_UART_Transmit+0x40>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e074      	b.n	8003f7c <HAL_UART_Transmit+0x12a>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2221      	movs	r2, #33	; 0x21
 8003ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003ea8:	f7fd fd54 	bl	8001954 <HAL_GetTick>
 8003eac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	88fa      	ldrh	r2, [r7, #6]
 8003eb2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	88fa      	ldrh	r2, [r7, #6]
 8003eb8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003ec2:	e042      	b.n	8003f4a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eda:	d122      	bne.n	8003f22 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2180      	movs	r1, #128	; 0x80
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f84c 	bl	8003f84 <UART_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e042      	b.n	8003f7c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f08:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	3302      	adds	r3, #2
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	e017      	b.n	8003f4a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	e013      	b.n	8003f4a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 f829 	bl	8003f84 <UART_WaitOnFlagUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e01f      	b.n	8003f7c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	60ba      	str	r2, [r7, #8]
 8003f42:	781a      	ldrb	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1b7      	bne.n	8003ec4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2140      	movs	r1, #64	; 0x40
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f810 	bl	8003f84 <UART_WaitOnFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e006      	b.n	8003f7c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e000      	b.n	8003f7c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003f7a:	2302      	movs	r3, #2
  }
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	4613      	mov	r3, r2
 8003f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f94:	e02c      	b.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f9c:	d028      	beq.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fa4:	f7fd fcd6 	bl	8001954 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d21d      	bcs.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fc2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0201 	bic.w	r2, r2, #1
 8003fd2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e00f      	b.n	8004010 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	bf0c      	ite	eq
 8004000:	2301      	moveq	r3, #1
 8004002:	2300      	movne	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	79fb      	ldrb	r3, [r7, #7]
 800400a:	429a      	cmp	r2, r3
 800400c:	d0c3      	beq.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800405a:	f023 030c 	bic.w	r3, r3, #12
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	68f9      	ldr	r1, [r7, #12]
 8004064:	430b      	orrs	r3, r1
 8004066:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004086:	f040 818b 	bne.w	80043a0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4ac1      	ldr	r2, [pc, #772]	; (8004394 <UART_SetConfig+0x37c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d005      	beq.n	80040a0 <UART_SetConfig+0x88>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4abf      	ldr	r2, [pc, #764]	; (8004398 <UART_SetConfig+0x380>)
 800409a:	4293      	cmp	r3, r2
 800409c:	f040 80bd 	bne.w	800421a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040a0:	f7ff f8ce 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 80040a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	461d      	mov	r5, r3
 80040aa:	f04f 0600 	mov.w	r6, #0
 80040ae:	46a8      	mov	r8, r5
 80040b0:	46b1      	mov	r9, r6
 80040b2:	eb18 0308 	adds.w	r3, r8, r8
 80040b6:	eb49 0409 	adc.w	r4, r9, r9
 80040ba:	4698      	mov	r8, r3
 80040bc:	46a1      	mov	r9, r4
 80040be:	eb18 0805 	adds.w	r8, r8, r5
 80040c2:	eb49 0906 	adc.w	r9, r9, r6
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040da:	4688      	mov	r8, r1
 80040dc:	4691      	mov	r9, r2
 80040de:	eb18 0005 	adds.w	r0, r8, r5
 80040e2:	eb49 0106 	adc.w	r1, r9, r6
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	461d      	mov	r5, r3
 80040ec:	f04f 0600 	mov.w	r6, #0
 80040f0:	196b      	adds	r3, r5, r5
 80040f2:	eb46 0406 	adc.w	r4, r6, r6
 80040f6:	461a      	mov	r2, r3
 80040f8:	4623      	mov	r3, r4
 80040fa:	f7fc f8c1 	bl	8000280 <__aeabi_uldivmod>
 80040fe:	4603      	mov	r3, r0
 8004100:	460c      	mov	r4, r1
 8004102:	461a      	mov	r2, r3
 8004104:	4ba5      	ldr	r3, [pc, #660]	; (800439c <UART_SetConfig+0x384>)
 8004106:	fba3 2302 	umull	r2, r3, r3, r2
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	461d      	mov	r5, r3
 8004114:	f04f 0600 	mov.w	r6, #0
 8004118:	46a9      	mov	r9, r5
 800411a:	46b2      	mov	sl, r6
 800411c:	eb19 0309 	adds.w	r3, r9, r9
 8004120:	eb4a 040a 	adc.w	r4, sl, sl
 8004124:	4699      	mov	r9, r3
 8004126:	46a2      	mov	sl, r4
 8004128:	eb19 0905 	adds.w	r9, r9, r5
 800412c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004130:	f04f 0100 	mov.w	r1, #0
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800413c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004140:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004144:	4689      	mov	r9, r1
 8004146:	4692      	mov	sl, r2
 8004148:	eb19 0005 	adds.w	r0, r9, r5
 800414c:	eb4a 0106 	adc.w	r1, sl, r6
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	461d      	mov	r5, r3
 8004156:	f04f 0600 	mov.w	r6, #0
 800415a:	196b      	adds	r3, r5, r5
 800415c:	eb46 0406 	adc.w	r4, r6, r6
 8004160:	461a      	mov	r2, r3
 8004162:	4623      	mov	r3, r4
 8004164:	f7fc f88c 	bl	8000280 <__aeabi_uldivmod>
 8004168:	4603      	mov	r3, r0
 800416a:	460c      	mov	r4, r1
 800416c:	461a      	mov	r2, r3
 800416e:	4b8b      	ldr	r3, [pc, #556]	; (800439c <UART_SetConfig+0x384>)
 8004170:	fba3 1302 	umull	r1, r3, r3, r2
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	2164      	movs	r1, #100	; 0x64
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	3332      	adds	r3, #50	; 0x32
 8004182:	4a86      	ldr	r2, [pc, #536]	; (800439c <UART_SetConfig+0x384>)
 8004184:	fba2 2303 	umull	r2, r3, r2, r3
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004190:	4498      	add	r8, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	461d      	mov	r5, r3
 8004196:	f04f 0600 	mov.w	r6, #0
 800419a:	46a9      	mov	r9, r5
 800419c:	46b2      	mov	sl, r6
 800419e:	eb19 0309 	adds.w	r3, r9, r9
 80041a2:	eb4a 040a 	adc.w	r4, sl, sl
 80041a6:	4699      	mov	r9, r3
 80041a8:	46a2      	mov	sl, r4
 80041aa:	eb19 0905 	adds.w	r9, r9, r5
 80041ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80041b2:	f04f 0100 	mov.w	r1, #0
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041c6:	4689      	mov	r9, r1
 80041c8:	4692      	mov	sl, r2
 80041ca:	eb19 0005 	adds.w	r0, r9, r5
 80041ce:	eb4a 0106 	adc.w	r1, sl, r6
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	461d      	mov	r5, r3
 80041d8:	f04f 0600 	mov.w	r6, #0
 80041dc:	196b      	adds	r3, r5, r5
 80041de:	eb46 0406 	adc.w	r4, r6, r6
 80041e2:	461a      	mov	r2, r3
 80041e4:	4623      	mov	r3, r4
 80041e6:	f7fc f84b 	bl	8000280 <__aeabi_uldivmod>
 80041ea:	4603      	mov	r3, r0
 80041ec:	460c      	mov	r4, r1
 80041ee:	461a      	mov	r2, r3
 80041f0:	4b6a      	ldr	r3, [pc, #424]	; (800439c <UART_SetConfig+0x384>)
 80041f2:	fba3 1302 	umull	r1, r3, r3, r2
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	2164      	movs	r1, #100	; 0x64
 80041fa:	fb01 f303 	mul.w	r3, r1, r3
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	3332      	adds	r3, #50	; 0x32
 8004204:	4a65      	ldr	r2, [pc, #404]	; (800439c <UART_SetConfig+0x384>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	f003 0207 	and.w	r2, r3, #7
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4442      	add	r2, r8
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	e26f      	b.n	80046fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800421a:	f7fe fffd 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 800421e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	461d      	mov	r5, r3
 8004224:	f04f 0600 	mov.w	r6, #0
 8004228:	46a8      	mov	r8, r5
 800422a:	46b1      	mov	r9, r6
 800422c:	eb18 0308 	adds.w	r3, r8, r8
 8004230:	eb49 0409 	adc.w	r4, r9, r9
 8004234:	4698      	mov	r8, r3
 8004236:	46a1      	mov	r9, r4
 8004238:	eb18 0805 	adds.w	r8, r8, r5
 800423c:	eb49 0906 	adc.w	r9, r9, r6
 8004240:	f04f 0100 	mov.w	r1, #0
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800424c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004250:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004254:	4688      	mov	r8, r1
 8004256:	4691      	mov	r9, r2
 8004258:	eb18 0005 	adds.w	r0, r8, r5
 800425c:	eb49 0106 	adc.w	r1, r9, r6
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	461d      	mov	r5, r3
 8004266:	f04f 0600 	mov.w	r6, #0
 800426a:	196b      	adds	r3, r5, r5
 800426c:	eb46 0406 	adc.w	r4, r6, r6
 8004270:	461a      	mov	r2, r3
 8004272:	4623      	mov	r3, r4
 8004274:	f7fc f804 	bl	8000280 <__aeabi_uldivmod>
 8004278:	4603      	mov	r3, r0
 800427a:	460c      	mov	r4, r1
 800427c:	461a      	mov	r2, r3
 800427e:	4b47      	ldr	r3, [pc, #284]	; (800439c <UART_SetConfig+0x384>)
 8004280:	fba3 2302 	umull	r2, r3, r3, r2
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	461d      	mov	r5, r3
 800428e:	f04f 0600 	mov.w	r6, #0
 8004292:	46a9      	mov	r9, r5
 8004294:	46b2      	mov	sl, r6
 8004296:	eb19 0309 	adds.w	r3, r9, r9
 800429a:	eb4a 040a 	adc.w	r4, sl, sl
 800429e:	4699      	mov	r9, r3
 80042a0:	46a2      	mov	sl, r4
 80042a2:	eb19 0905 	adds.w	r9, r9, r5
 80042a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80042aa:	f04f 0100 	mov.w	r1, #0
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042be:	4689      	mov	r9, r1
 80042c0:	4692      	mov	sl, r2
 80042c2:	eb19 0005 	adds.w	r0, r9, r5
 80042c6:	eb4a 0106 	adc.w	r1, sl, r6
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	461d      	mov	r5, r3
 80042d0:	f04f 0600 	mov.w	r6, #0
 80042d4:	196b      	adds	r3, r5, r5
 80042d6:	eb46 0406 	adc.w	r4, r6, r6
 80042da:	461a      	mov	r2, r3
 80042dc:	4623      	mov	r3, r4
 80042de:	f7fb ffcf 	bl	8000280 <__aeabi_uldivmod>
 80042e2:	4603      	mov	r3, r0
 80042e4:	460c      	mov	r4, r1
 80042e6:	461a      	mov	r2, r3
 80042e8:	4b2c      	ldr	r3, [pc, #176]	; (800439c <UART_SetConfig+0x384>)
 80042ea:	fba3 1302 	umull	r1, r3, r3, r2
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	2164      	movs	r1, #100	; 0x64
 80042f2:	fb01 f303 	mul.w	r3, r1, r3
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	3332      	adds	r3, #50	; 0x32
 80042fc:	4a27      	ldr	r2, [pc, #156]	; (800439c <UART_SetConfig+0x384>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800430a:	4498      	add	r8, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	461d      	mov	r5, r3
 8004310:	f04f 0600 	mov.w	r6, #0
 8004314:	46a9      	mov	r9, r5
 8004316:	46b2      	mov	sl, r6
 8004318:	eb19 0309 	adds.w	r3, r9, r9
 800431c:	eb4a 040a 	adc.w	r4, sl, sl
 8004320:	4699      	mov	r9, r3
 8004322:	46a2      	mov	sl, r4
 8004324:	eb19 0905 	adds.w	r9, r9, r5
 8004328:	eb4a 0a06 	adc.w	sl, sl, r6
 800432c:	f04f 0100 	mov.w	r1, #0
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004338:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800433c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004340:	4689      	mov	r9, r1
 8004342:	4692      	mov	sl, r2
 8004344:	eb19 0005 	adds.w	r0, r9, r5
 8004348:	eb4a 0106 	adc.w	r1, sl, r6
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	461d      	mov	r5, r3
 8004352:	f04f 0600 	mov.w	r6, #0
 8004356:	196b      	adds	r3, r5, r5
 8004358:	eb46 0406 	adc.w	r4, r6, r6
 800435c:	461a      	mov	r2, r3
 800435e:	4623      	mov	r3, r4
 8004360:	f7fb ff8e 	bl	8000280 <__aeabi_uldivmod>
 8004364:	4603      	mov	r3, r0
 8004366:	460c      	mov	r4, r1
 8004368:	461a      	mov	r2, r3
 800436a:	4b0c      	ldr	r3, [pc, #48]	; (800439c <UART_SetConfig+0x384>)
 800436c:	fba3 1302 	umull	r1, r3, r3, r2
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	2164      	movs	r1, #100	; 0x64
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	3332      	adds	r3, #50	; 0x32
 800437e:	4a07      	ldr	r2, [pc, #28]	; (800439c <UART_SetConfig+0x384>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	f003 0207 	and.w	r2, r3, #7
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4442      	add	r2, r8
 8004390:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004392:	e1b2      	b.n	80046fa <UART_SetConfig+0x6e2>
 8004394:	40011000 	.word	0x40011000
 8004398:	40011400 	.word	0x40011400
 800439c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4ad7      	ldr	r2, [pc, #860]	; (8004704 <UART_SetConfig+0x6ec>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d005      	beq.n	80043b6 <UART_SetConfig+0x39e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4ad6      	ldr	r2, [pc, #856]	; (8004708 <UART_SetConfig+0x6f0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	f040 80d1 	bne.w	8004558 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80043b6:	f7fe ff43 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 80043ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	469a      	mov	sl, r3
 80043c0:	f04f 0b00 	mov.w	fp, #0
 80043c4:	46d0      	mov	r8, sl
 80043c6:	46d9      	mov	r9, fp
 80043c8:	eb18 0308 	adds.w	r3, r8, r8
 80043cc:	eb49 0409 	adc.w	r4, r9, r9
 80043d0:	4698      	mov	r8, r3
 80043d2:	46a1      	mov	r9, r4
 80043d4:	eb18 080a 	adds.w	r8, r8, sl
 80043d8:	eb49 090b 	adc.w	r9, r9, fp
 80043dc:	f04f 0100 	mov.w	r1, #0
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043f0:	4688      	mov	r8, r1
 80043f2:	4691      	mov	r9, r2
 80043f4:	eb1a 0508 	adds.w	r5, sl, r8
 80043f8:	eb4b 0609 	adc.w	r6, fp, r9
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	4619      	mov	r1, r3
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	f04f 0400 	mov.w	r4, #0
 800440e:	0094      	lsls	r4, r2, #2
 8004410:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004414:	008b      	lsls	r3, r1, #2
 8004416:	461a      	mov	r2, r3
 8004418:	4623      	mov	r3, r4
 800441a:	4628      	mov	r0, r5
 800441c:	4631      	mov	r1, r6
 800441e:	f7fb ff2f 	bl	8000280 <__aeabi_uldivmod>
 8004422:	4603      	mov	r3, r0
 8004424:	460c      	mov	r4, r1
 8004426:	461a      	mov	r2, r3
 8004428:	4bb8      	ldr	r3, [pc, #736]	; (800470c <UART_SetConfig+0x6f4>)
 800442a:	fba3 2302 	umull	r2, r3, r3, r2
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	469b      	mov	fp, r3
 8004438:	f04f 0c00 	mov.w	ip, #0
 800443c:	46d9      	mov	r9, fp
 800443e:	46e2      	mov	sl, ip
 8004440:	eb19 0309 	adds.w	r3, r9, r9
 8004444:	eb4a 040a 	adc.w	r4, sl, sl
 8004448:	4699      	mov	r9, r3
 800444a:	46a2      	mov	sl, r4
 800444c:	eb19 090b 	adds.w	r9, r9, fp
 8004450:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004454:	f04f 0100 	mov.w	r1, #0
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004460:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004464:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004468:	4689      	mov	r9, r1
 800446a:	4692      	mov	sl, r2
 800446c:	eb1b 0509 	adds.w	r5, fp, r9
 8004470:	eb4c 060a 	adc.w	r6, ip, sl
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4619      	mov	r1, r3
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	f04f 0400 	mov.w	r4, #0
 8004486:	0094      	lsls	r4, r2, #2
 8004488:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800448c:	008b      	lsls	r3, r1, #2
 800448e:	461a      	mov	r2, r3
 8004490:	4623      	mov	r3, r4
 8004492:	4628      	mov	r0, r5
 8004494:	4631      	mov	r1, r6
 8004496:	f7fb fef3 	bl	8000280 <__aeabi_uldivmod>
 800449a:	4603      	mov	r3, r0
 800449c:	460c      	mov	r4, r1
 800449e:	461a      	mov	r2, r3
 80044a0:	4b9a      	ldr	r3, [pc, #616]	; (800470c <UART_SetConfig+0x6f4>)
 80044a2:	fba3 1302 	umull	r1, r3, r3, r2
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	2164      	movs	r1, #100	; 0x64
 80044aa:	fb01 f303 	mul.w	r3, r1, r3
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	3332      	adds	r3, #50	; 0x32
 80044b4:	4a95      	ldr	r2, [pc, #596]	; (800470c <UART_SetConfig+0x6f4>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044c0:	4498      	add	r8, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	469b      	mov	fp, r3
 80044c6:	f04f 0c00 	mov.w	ip, #0
 80044ca:	46d9      	mov	r9, fp
 80044cc:	46e2      	mov	sl, ip
 80044ce:	eb19 0309 	adds.w	r3, r9, r9
 80044d2:	eb4a 040a 	adc.w	r4, sl, sl
 80044d6:	4699      	mov	r9, r3
 80044d8:	46a2      	mov	sl, r4
 80044da:	eb19 090b 	adds.w	r9, r9, fp
 80044de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044e2:	f04f 0100 	mov.w	r1, #0
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044f6:	4689      	mov	r9, r1
 80044f8:	4692      	mov	sl, r2
 80044fa:	eb1b 0509 	adds.w	r5, fp, r9
 80044fe:	eb4c 060a 	adc.w	r6, ip, sl
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	4619      	mov	r1, r3
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	f04f 0400 	mov.w	r4, #0
 8004514:	0094      	lsls	r4, r2, #2
 8004516:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800451a:	008b      	lsls	r3, r1, #2
 800451c:	461a      	mov	r2, r3
 800451e:	4623      	mov	r3, r4
 8004520:	4628      	mov	r0, r5
 8004522:	4631      	mov	r1, r6
 8004524:	f7fb feac 	bl	8000280 <__aeabi_uldivmod>
 8004528:	4603      	mov	r3, r0
 800452a:	460c      	mov	r4, r1
 800452c:	461a      	mov	r2, r3
 800452e:	4b77      	ldr	r3, [pc, #476]	; (800470c <UART_SetConfig+0x6f4>)
 8004530:	fba3 1302 	umull	r1, r3, r3, r2
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	2164      	movs	r1, #100	; 0x64
 8004538:	fb01 f303 	mul.w	r3, r1, r3
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	3332      	adds	r3, #50	; 0x32
 8004542:	4a72      	ldr	r2, [pc, #456]	; (800470c <UART_SetConfig+0x6f4>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	095b      	lsrs	r3, r3, #5
 800454a:	f003 020f 	and.w	r2, r3, #15
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4442      	add	r2, r8
 8004554:	609a      	str	r2, [r3, #8]
 8004556:	e0d0      	b.n	80046fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004558:	f7fe fe5e 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 800455c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	469a      	mov	sl, r3
 8004562:	f04f 0b00 	mov.w	fp, #0
 8004566:	46d0      	mov	r8, sl
 8004568:	46d9      	mov	r9, fp
 800456a:	eb18 0308 	adds.w	r3, r8, r8
 800456e:	eb49 0409 	adc.w	r4, r9, r9
 8004572:	4698      	mov	r8, r3
 8004574:	46a1      	mov	r9, r4
 8004576:	eb18 080a 	adds.w	r8, r8, sl
 800457a:	eb49 090b 	adc.w	r9, r9, fp
 800457e:	f04f 0100 	mov.w	r1, #0
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800458a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800458e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004592:	4688      	mov	r8, r1
 8004594:	4691      	mov	r9, r2
 8004596:	eb1a 0508 	adds.w	r5, sl, r8
 800459a:	eb4b 0609 	adc.w	r6, fp, r9
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4619      	mov	r1, r3
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	f04f 0400 	mov.w	r4, #0
 80045b0:	0094      	lsls	r4, r2, #2
 80045b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045b6:	008b      	lsls	r3, r1, #2
 80045b8:	461a      	mov	r2, r3
 80045ba:	4623      	mov	r3, r4
 80045bc:	4628      	mov	r0, r5
 80045be:	4631      	mov	r1, r6
 80045c0:	f7fb fe5e 	bl	8000280 <__aeabi_uldivmod>
 80045c4:	4603      	mov	r3, r0
 80045c6:	460c      	mov	r4, r1
 80045c8:	461a      	mov	r2, r3
 80045ca:	4b50      	ldr	r3, [pc, #320]	; (800470c <UART_SetConfig+0x6f4>)
 80045cc:	fba3 2302 	umull	r2, r3, r3, r2
 80045d0:	095b      	lsrs	r3, r3, #5
 80045d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	469b      	mov	fp, r3
 80045da:	f04f 0c00 	mov.w	ip, #0
 80045de:	46d9      	mov	r9, fp
 80045e0:	46e2      	mov	sl, ip
 80045e2:	eb19 0309 	adds.w	r3, r9, r9
 80045e6:	eb4a 040a 	adc.w	r4, sl, sl
 80045ea:	4699      	mov	r9, r3
 80045ec:	46a2      	mov	sl, r4
 80045ee:	eb19 090b 	adds.w	r9, r9, fp
 80045f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045f6:	f04f 0100 	mov.w	r1, #0
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004602:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004606:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800460a:	4689      	mov	r9, r1
 800460c:	4692      	mov	sl, r2
 800460e:	eb1b 0509 	adds.w	r5, fp, r9
 8004612:	eb4c 060a 	adc.w	r6, ip, sl
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	4619      	mov	r1, r3
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	f04f 0400 	mov.w	r4, #0
 8004628:	0094      	lsls	r4, r2, #2
 800462a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800462e:	008b      	lsls	r3, r1, #2
 8004630:	461a      	mov	r2, r3
 8004632:	4623      	mov	r3, r4
 8004634:	4628      	mov	r0, r5
 8004636:	4631      	mov	r1, r6
 8004638:	f7fb fe22 	bl	8000280 <__aeabi_uldivmod>
 800463c:	4603      	mov	r3, r0
 800463e:	460c      	mov	r4, r1
 8004640:	461a      	mov	r2, r3
 8004642:	4b32      	ldr	r3, [pc, #200]	; (800470c <UART_SetConfig+0x6f4>)
 8004644:	fba3 1302 	umull	r1, r3, r3, r2
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	2164      	movs	r1, #100	; 0x64
 800464c:	fb01 f303 	mul.w	r3, r1, r3
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	3332      	adds	r3, #50	; 0x32
 8004656:	4a2d      	ldr	r2, [pc, #180]	; (800470c <UART_SetConfig+0x6f4>)
 8004658:	fba2 2303 	umull	r2, r3, r2, r3
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004662:	4498      	add	r8, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	469b      	mov	fp, r3
 8004668:	f04f 0c00 	mov.w	ip, #0
 800466c:	46d9      	mov	r9, fp
 800466e:	46e2      	mov	sl, ip
 8004670:	eb19 0309 	adds.w	r3, r9, r9
 8004674:	eb4a 040a 	adc.w	r4, sl, sl
 8004678:	4699      	mov	r9, r3
 800467a:	46a2      	mov	sl, r4
 800467c:	eb19 090b 	adds.w	r9, r9, fp
 8004680:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004684:	f04f 0100 	mov.w	r1, #0
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004690:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004694:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004698:	4689      	mov	r9, r1
 800469a:	4692      	mov	sl, r2
 800469c:	eb1b 0509 	adds.w	r5, fp, r9
 80046a0:	eb4c 060a 	adc.w	r6, ip, sl
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	4619      	mov	r1, r3
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	f04f 0400 	mov.w	r4, #0
 80046b6:	0094      	lsls	r4, r2, #2
 80046b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046bc:	008b      	lsls	r3, r1, #2
 80046be:	461a      	mov	r2, r3
 80046c0:	4623      	mov	r3, r4
 80046c2:	4628      	mov	r0, r5
 80046c4:	4631      	mov	r1, r6
 80046c6:	f7fb fddb 	bl	8000280 <__aeabi_uldivmod>
 80046ca:	4603      	mov	r3, r0
 80046cc:	460c      	mov	r4, r1
 80046ce:	461a      	mov	r2, r3
 80046d0:	4b0e      	ldr	r3, [pc, #56]	; (800470c <UART_SetConfig+0x6f4>)
 80046d2:	fba3 1302 	umull	r1, r3, r3, r2
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	2164      	movs	r1, #100	; 0x64
 80046da:	fb01 f303 	mul.w	r3, r1, r3
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	3332      	adds	r3, #50	; 0x32
 80046e4:	4a09      	ldr	r2, [pc, #36]	; (800470c <UART_SetConfig+0x6f4>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	f003 020f 	and.w	r2, r3, #15
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4442      	add	r2, r8
 80046f6:	609a      	str	r2, [r3, #8]
}
 80046f8:	e7ff      	b.n	80046fa <UART_SetConfig+0x6e2>
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004704:	40011000 	.word	0x40011000
 8004708:	40011400 	.word	0x40011400
 800470c:	51eb851f 	.word	0x51eb851f

08004710 <__errno>:
 8004710:	4b01      	ldr	r3, [pc, #4]	; (8004718 <__errno+0x8>)
 8004712:	6818      	ldr	r0, [r3, #0]
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	2000000c 	.word	0x2000000c

0800471c <__libc_init_array>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	4e0d      	ldr	r6, [pc, #52]	; (8004754 <__libc_init_array+0x38>)
 8004720:	4c0d      	ldr	r4, [pc, #52]	; (8004758 <__libc_init_array+0x3c>)
 8004722:	1ba4      	subs	r4, r4, r6
 8004724:	10a4      	asrs	r4, r4, #2
 8004726:	2500      	movs	r5, #0
 8004728:	42a5      	cmp	r5, r4
 800472a:	d109      	bne.n	8004740 <__libc_init_array+0x24>
 800472c:	4e0b      	ldr	r6, [pc, #44]	; (800475c <__libc_init_array+0x40>)
 800472e:	4c0c      	ldr	r4, [pc, #48]	; (8004760 <__libc_init_array+0x44>)
 8004730:	f000 fc26 	bl	8004f80 <_init>
 8004734:	1ba4      	subs	r4, r4, r6
 8004736:	10a4      	asrs	r4, r4, #2
 8004738:	2500      	movs	r5, #0
 800473a:	42a5      	cmp	r5, r4
 800473c:	d105      	bne.n	800474a <__libc_init_array+0x2e>
 800473e:	bd70      	pop	{r4, r5, r6, pc}
 8004740:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004744:	4798      	blx	r3
 8004746:	3501      	adds	r5, #1
 8004748:	e7ee      	b.n	8004728 <__libc_init_array+0xc>
 800474a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800474e:	4798      	blx	r3
 8004750:	3501      	adds	r5, #1
 8004752:	e7f2      	b.n	800473a <__libc_init_array+0x1e>
 8004754:	08005034 	.word	0x08005034
 8004758:	08005034 	.word	0x08005034
 800475c:	08005034 	.word	0x08005034
 8004760:	08005038 	.word	0x08005038

08004764 <memset>:
 8004764:	4402      	add	r2, r0
 8004766:	4603      	mov	r3, r0
 8004768:	4293      	cmp	r3, r2
 800476a:	d100      	bne.n	800476e <memset+0xa>
 800476c:	4770      	bx	lr
 800476e:	f803 1b01 	strb.w	r1, [r3], #1
 8004772:	e7f9      	b.n	8004768 <memset+0x4>

08004774 <siprintf>:
 8004774:	b40e      	push	{r1, r2, r3}
 8004776:	b500      	push	{lr}
 8004778:	b09c      	sub	sp, #112	; 0x70
 800477a:	ab1d      	add	r3, sp, #116	; 0x74
 800477c:	9002      	str	r0, [sp, #8]
 800477e:	9006      	str	r0, [sp, #24]
 8004780:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004784:	4809      	ldr	r0, [pc, #36]	; (80047ac <siprintf+0x38>)
 8004786:	9107      	str	r1, [sp, #28]
 8004788:	9104      	str	r1, [sp, #16]
 800478a:	4909      	ldr	r1, [pc, #36]	; (80047b0 <siprintf+0x3c>)
 800478c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004790:	9105      	str	r1, [sp, #20]
 8004792:	6800      	ldr	r0, [r0, #0]
 8004794:	9301      	str	r3, [sp, #4]
 8004796:	a902      	add	r1, sp, #8
 8004798:	f000 f866 	bl	8004868 <_svfiprintf_r>
 800479c:	9b02      	ldr	r3, [sp, #8]
 800479e:	2200      	movs	r2, #0
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	b01c      	add	sp, #112	; 0x70
 80047a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047a8:	b003      	add	sp, #12
 80047aa:	4770      	bx	lr
 80047ac:	2000000c 	.word	0x2000000c
 80047b0:	ffff0208 	.word	0xffff0208

080047b4 <__ssputs_r>:
 80047b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b8:	688e      	ldr	r6, [r1, #8]
 80047ba:	429e      	cmp	r6, r3
 80047bc:	4682      	mov	sl, r0
 80047be:	460c      	mov	r4, r1
 80047c0:	4690      	mov	r8, r2
 80047c2:	4699      	mov	r9, r3
 80047c4:	d837      	bhi.n	8004836 <__ssputs_r+0x82>
 80047c6:	898a      	ldrh	r2, [r1, #12]
 80047c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047cc:	d031      	beq.n	8004832 <__ssputs_r+0x7e>
 80047ce:	6825      	ldr	r5, [r4, #0]
 80047d0:	6909      	ldr	r1, [r1, #16]
 80047d2:	1a6f      	subs	r7, r5, r1
 80047d4:	6965      	ldr	r5, [r4, #20]
 80047d6:	2302      	movs	r3, #2
 80047d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047dc:	fb95 f5f3 	sdiv	r5, r5, r3
 80047e0:	f109 0301 	add.w	r3, r9, #1
 80047e4:	443b      	add	r3, r7
 80047e6:	429d      	cmp	r5, r3
 80047e8:	bf38      	it	cc
 80047ea:	461d      	movcc	r5, r3
 80047ec:	0553      	lsls	r3, r2, #21
 80047ee:	d530      	bpl.n	8004852 <__ssputs_r+0x9e>
 80047f0:	4629      	mov	r1, r5
 80047f2:	f000 fb2b 	bl	8004e4c <_malloc_r>
 80047f6:	4606      	mov	r6, r0
 80047f8:	b950      	cbnz	r0, 8004810 <__ssputs_r+0x5c>
 80047fa:	230c      	movs	r3, #12
 80047fc:	f8ca 3000 	str.w	r3, [sl]
 8004800:	89a3      	ldrh	r3, [r4, #12]
 8004802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004806:	81a3      	strh	r3, [r4, #12]
 8004808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800480c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004810:	463a      	mov	r2, r7
 8004812:	6921      	ldr	r1, [r4, #16]
 8004814:	f000 faa8 	bl	8004d68 <memcpy>
 8004818:	89a3      	ldrh	r3, [r4, #12]
 800481a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800481e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004822:	81a3      	strh	r3, [r4, #12]
 8004824:	6126      	str	r6, [r4, #16]
 8004826:	6165      	str	r5, [r4, #20]
 8004828:	443e      	add	r6, r7
 800482a:	1bed      	subs	r5, r5, r7
 800482c:	6026      	str	r6, [r4, #0]
 800482e:	60a5      	str	r5, [r4, #8]
 8004830:	464e      	mov	r6, r9
 8004832:	454e      	cmp	r6, r9
 8004834:	d900      	bls.n	8004838 <__ssputs_r+0x84>
 8004836:	464e      	mov	r6, r9
 8004838:	4632      	mov	r2, r6
 800483a:	4641      	mov	r1, r8
 800483c:	6820      	ldr	r0, [r4, #0]
 800483e:	f000 fa9e 	bl	8004d7e <memmove>
 8004842:	68a3      	ldr	r3, [r4, #8]
 8004844:	1b9b      	subs	r3, r3, r6
 8004846:	60a3      	str	r3, [r4, #8]
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	441e      	add	r6, r3
 800484c:	6026      	str	r6, [r4, #0]
 800484e:	2000      	movs	r0, #0
 8004850:	e7dc      	b.n	800480c <__ssputs_r+0x58>
 8004852:	462a      	mov	r2, r5
 8004854:	f000 fb54 	bl	8004f00 <_realloc_r>
 8004858:	4606      	mov	r6, r0
 800485a:	2800      	cmp	r0, #0
 800485c:	d1e2      	bne.n	8004824 <__ssputs_r+0x70>
 800485e:	6921      	ldr	r1, [r4, #16]
 8004860:	4650      	mov	r0, sl
 8004862:	f000 faa5 	bl	8004db0 <_free_r>
 8004866:	e7c8      	b.n	80047fa <__ssputs_r+0x46>

08004868 <_svfiprintf_r>:
 8004868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486c:	461d      	mov	r5, r3
 800486e:	898b      	ldrh	r3, [r1, #12]
 8004870:	061f      	lsls	r7, r3, #24
 8004872:	b09d      	sub	sp, #116	; 0x74
 8004874:	4680      	mov	r8, r0
 8004876:	460c      	mov	r4, r1
 8004878:	4616      	mov	r6, r2
 800487a:	d50f      	bpl.n	800489c <_svfiprintf_r+0x34>
 800487c:	690b      	ldr	r3, [r1, #16]
 800487e:	b96b      	cbnz	r3, 800489c <_svfiprintf_r+0x34>
 8004880:	2140      	movs	r1, #64	; 0x40
 8004882:	f000 fae3 	bl	8004e4c <_malloc_r>
 8004886:	6020      	str	r0, [r4, #0]
 8004888:	6120      	str	r0, [r4, #16]
 800488a:	b928      	cbnz	r0, 8004898 <_svfiprintf_r+0x30>
 800488c:	230c      	movs	r3, #12
 800488e:	f8c8 3000 	str.w	r3, [r8]
 8004892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004896:	e0c8      	b.n	8004a2a <_svfiprintf_r+0x1c2>
 8004898:	2340      	movs	r3, #64	; 0x40
 800489a:	6163      	str	r3, [r4, #20]
 800489c:	2300      	movs	r3, #0
 800489e:	9309      	str	r3, [sp, #36]	; 0x24
 80048a0:	2320      	movs	r3, #32
 80048a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048a6:	2330      	movs	r3, #48	; 0x30
 80048a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048ac:	9503      	str	r5, [sp, #12]
 80048ae:	f04f 0b01 	mov.w	fp, #1
 80048b2:	4637      	mov	r7, r6
 80048b4:	463d      	mov	r5, r7
 80048b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80048ba:	b10b      	cbz	r3, 80048c0 <_svfiprintf_r+0x58>
 80048bc:	2b25      	cmp	r3, #37	; 0x25
 80048be:	d13e      	bne.n	800493e <_svfiprintf_r+0xd6>
 80048c0:	ebb7 0a06 	subs.w	sl, r7, r6
 80048c4:	d00b      	beq.n	80048de <_svfiprintf_r+0x76>
 80048c6:	4653      	mov	r3, sl
 80048c8:	4632      	mov	r2, r6
 80048ca:	4621      	mov	r1, r4
 80048cc:	4640      	mov	r0, r8
 80048ce:	f7ff ff71 	bl	80047b4 <__ssputs_r>
 80048d2:	3001      	adds	r0, #1
 80048d4:	f000 80a4 	beq.w	8004a20 <_svfiprintf_r+0x1b8>
 80048d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048da:	4453      	add	r3, sl
 80048dc:	9309      	str	r3, [sp, #36]	; 0x24
 80048de:	783b      	ldrb	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 809d 	beq.w	8004a20 <_svfiprintf_r+0x1b8>
 80048e6:	2300      	movs	r3, #0
 80048e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048f0:	9304      	str	r3, [sp, #16]
 80048f2:	9307      	str	r3, [sp, #28]
 80048f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048f8:	931a      	str	r3, [sp, #104]	; 0x68
 80048fa:	462f      	mov	r7, r5
 80048fc:	2205      	movs	r2, #5
 80048fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004902:	4850      	ldr	r0, [pc, #320]	; (8004a44 <_svfiprintf_r+0x1dc>)
 8004904:	f7fb fc6c 	bl	80001e0 <memchr>
 8004908:	9b04      	ldr	r3, [sp, #16]
 800490a:	b9d0      	cbnz	r0, 8004942 <_svfiprintf_r+0xda>
 800490c:	06d9      	lsls	r1, r3, #27
 800490e:	bf44      	itt	mi
 8004910:	2220      	movmi	r2, #32
 8004912:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004916:	071a      	lsls	r2, r3, #28
 8004918:	bf44      	itt	mi
 800491a:	222b      	movmi	r2, #43	; 0x2b
 800491c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004920:	782a      	ldrb	r2, [r5, #0]
 8004922:	2a2a      	cmp	r2, #42	; 0x2a
 8004924:	d015      	beq.n	8004952 <_svfiprintf_r+0xea>
 8004926:	9a07      	ldr	r2, [sp, #28]
 8004928:	462f      	mov	r7, r5
 800492a:	2000      	movs	r0, #0
 800492c:	250a      	movs	r5, #10
 800492e:	4639      	mov	r1, r7
 8004930:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004934:	3b30      	subs	r3, #48	; 0x30
 8004936:	2b09      	cmp	r3, #9
 8004938:	d94d      	bls.n	80049d6 <_svfiprintf_r+0x16e>
 800493a:	b1b8      	cbz	r0, 800496c <_svfiprintf_r+0x104>
 800493c:	e00f      	b.n	800495e <_svfiprintf_r+0xf6>
 800493e:	462f      	mov	r7, r5
 8004940:	e7b8      	b.n	80048b4 <_svfiprintf_r+0x4c>
 8004942:	4a40      	ldr	r2, [pc, #256]	; (8004a44 <_svfiprintf_r+0x1dc>)
 8004944:	1a80      	subs	r0, r0, r2
 8004946:	fa0b f000 	lsl.w	r0, fp, r0
 800494a:	4318      	orrs	r0, r3
 800494c:	9004      	str	r0, [sp, #16]
 800494e:	463d      	mov	r5, r7
 8004950:	e7d3      	b.n	80048fa <_svfiprintf_r+0x92>
 8004952:	9a03      	ldr	r2, [sp, #12]
 8004954:	1d11      	adds	r1, r2, #4
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	9103      	str	r1, [sp, #12]
 800495a:	2a00      	cmp	r2, #0
 800495c:	db01      	blt.n	8004962 <_svfiprintf_r+0xfa>
 800495e:	9207      	str	r2, [sp, #28]
 8004960:	e004      	b.n	800496c <_svfiprintf_r+0x104>
 8004962:	4252      	negs	r2, r2
 8004964:	f043 0302 	orr.w	r3, r3, #2
 8004968:	9207      	str	r2, [sp, #28]
 800496a:	9304      	str	r3, [sp, #16]
 800496c:	783b      	ldrb	r3, [r7, #0]
 800496e:	2b2e      	cmp	r3, #46	; 0x2e
 8004970:	d10c      	bne.n	800498c <_svfiprintf_r+0x124>
 8004972:	787b      	ldrb	r3, [r7, #1]
 8004974:	2b2a      	cmp	r3, #42	; 0x2a
 8004976:	d133      	bne.n	80049e0 <_svfiprintf_r+0x178>
 8004978:	9b03      	ldr	r3, [sp, #12]
 800497a:	1d1a      	adds	r2, r3, #4
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	9203      	str	r2, [sp, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	bfb8      	it	lt
 8004984:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004988:	3702      	adds	r7, #2
 800498a:	9305      	str	r3, [sp, #20]
 800498c:	4d2e      	ldr	r5, [pc, #184]	; (8004a48 <_svfiprintf_r+0x1e0>)
 800498e:	7839      	ldrb	r1, [r7, #0]
 8004990:	2203      	movs	r2, #3
 8004992:	4628      	mov	r0, r5
 8004994:	f7fb fc24 	bl	80001e0 <memchr>
 8004998:	b138      	cbz	r0, 80049aa <_svfiprintf_r+0x142>
 800499a:	2340      	movs	r3, #64	; 0x40
 800499c:	1b40      	subs	r0, r0, r5
 800499e:	fa03 f000 	lsl.w	r0, r3, r0
 80049a2:	9b04      	ldr	r3, [sp, #16]
 80049a4:	4303      	orrs	r3, r0
 80049a6:	3701      	adds	r7, #1
 80049a8:	9304      	str	r3, [sp, #16]
 80049aa:	7839      	ldrb	r1, [r7, #0]
 80049ac:	4827      	ldr	r0, [pc, #156]	; (8004a4c <_svfiprintf_r+0x1e4>)
 80049ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049b2:	2206      	movs	r2, #6
 80049b4:	1c7e      	adds	r6, r7, #1
 80049b6:	f7fb fc13 	bl	80001e0 <memchr>
 80049ba:	2800      	cmp	r0, #0
 80049bc:	d038      	beq.n	8004a30 <_svfiprintf_r+0x1c8>
 80049be:	4b24      	ldr	r3, [pc, #144]	; (8004a50 <_svfiprintf_r+0x1e8>)
 80049c0:	bb13      	cbnz	r3, 8004a08 <_svfiprintf_r+0x1a0>
 80049c2:	9b03      	ldr	r3, [sp, #12]
 80049c4:	3307      	adds	r3, #7
 80049c6:	f023 0307 	bic.w	r3, r3, #7
 80049ca:	3308      	adds	r3, #8
 80049cc:	9303      	str	r3, [sp, #12]
 80049ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049d0:	444b      	add	r3, r9
 80049d2:	9309      	str	r3, [sp, #36]	; 0x24
 80049d4:	e76d      	b.n	80048b2 <_svfiprintf_r+0x4a>
 80049d6:	fb05 3202 	mla	r2, r5, r2, r3
 80049da:	2001      	movs	r0, #1
 80049dc:	460f      	mov	r7, r1
 80049de:	e7a6      	b.n	800492e <_svfiprintf_r+0xc6>
 80049e0:	2300      	movs	r3, #0
 80049e2:	3701      	adds	r7, #1
 80049e4:	9305      	str	r3, [sp, #20]
 80049e6:	4619      	mov	r1, r3
 80049e8:	250a      	movs	r5, #10
 80049ea:	4638      	mov	r0, r7
 80049ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049f0:	3a30      	subs	r2, #48	; 0x30
 80049f2:	2a09      	cmp	r2, #9
 80049f4:	d903      	bls.n	80049fe <_svfiprintf_r+0x196>
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0c8      	beq.n	800498c <_svfiprintf_r+0x124>
 80049fa:	9105      	str	r1, [sp, #20]
 80049fc:	e7c6      	b.n	800498c <_svfiprintf_r+0x124>
 80049fe:	fb05 2101 	mla	r1, r5, r1, r2
 8004a02:	2301      	movs	r3, #1
 8004a04:	4607      	mov	r7, r0
 8004a06:	e7f0      	b.n	80049ea <_svfiprintf_r+0x182>
 8004a08:	ab03      	add	r3, sp, #12
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	4622      	mov	r2, r4
 8004a0e:	4b11      	ldr	r3, [pc, #68]	; (8004a54 <_svfiprintf_r+0x1ec>)
 8004a10:	a904      	add	r1, sp, #16
 8004a12:	4640      	mov	r0, r8
 8004a14:	f3af 8000 	nop.w
 8004a18:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004a1c:	4681      	mov	r9, r0
 8004a1e:	d1d6      	bne.n	80049ce <_svfiprintf_r+0x166>
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	065b      	lsls	r3, r3, #25
 8004a24:	f53f af35 	bmi.w	8004892 <_svfiprintf_r+0x2a>
 8004a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a2a:	b01d      	add	sp, #116	; 0x74
 8004a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a30:	ab03      	add	r3, sp, #12
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	4622      	mov	r2, r4
 8004a36:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <_svfiprintf_r+0x1ec>)
 8004a38:	a904      	add	r1, sp, #16
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	f000 f882 	bl	8004b44 <_printf_i>
 8004a40:	e7ea      	b.n	8004a18 <_svfiprintf_r+0x1b0>
 8004a42:	bf00      	nop
 8004a44:	08004ff8 	.word	0x08004ff8
 8004a48:	08004ffe 	.word	0x08004ffe
 8004a4c:	08005002 	.word	0x08005002
 8004a50:	00000000 	.word	0x00000000
 8004a54:	080047b5 	.word	0x080047b5

08004a58 <_printf_common>:
 8004a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a5c:	4691      	mov	r9, r2
 8004a5e:	461f      	mov	r7, r3
 8004a60:	688a      	ldr	r2, [r1, #8]
 8004a62:	690b      	ldr	r3, [r1, #16]
 8004a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	bfb8      	it	lt
 8004a6c:	4613      	movlt	r3, r2
 8004a6e:	f8c9 3000 	str.w	r3, [r9]
 8004a72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a76:	4606      	mov	r6, r0
 8004a78:	460c      	mov	r4, r1
 8004a7a:	b112      	cbz	r2, 8004a82 <_printf_common+0x2a>
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	f8c9 3000 	str.w	r3, [r9]
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	0699      	lsls	r1, r3, #26
 8004a86:	bf42      	ittt	mi
 8004a88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a8c:	3302      	addmi	r3, #2
 8004a8e:	f8c9 3000 	strmi.w	r3, [r9]
 8004a92:	6825      	ldr	r5, [r4, #0]
 8004a94:	f015 0506 	ands.w	r5, r5, #6
 8004a98:	d107      	bne.n	8004aaa <_printf_common+0x52>
 8004a9a:	f104 0a19 	add.w	sl, r4, #25
 8004a9e:	68e3      	ldr	r3, [r4, #12]
 8004aa0:	f8d9 2000 	ldr.w	r2, [r9]
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	42ab      	cmp	r3, r5
 8004aa8:	dc28      	bgt.n	8004afc <_printf_common+0xa4>
 8004aaa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004aae:	6822      	ldr	r2, [r4, #0]
 8004ab0:	3300      	adds	r3, #0
 8004ab2:	bf18      	it	ne
 8004ab4:	2301      	movne	r3, #1
 8004ab6:	0692      	lsls	r2, r2, #26
 8004ab8:	d42d      	bmi.n	8004b16 <_printf_common+0xbe>
 8004aba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004abe:	4639      	mov	r1, r7
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	47c0      	blx	r8
 8004ac4:	3001      	adds	r0, #1
 8004ac6:	d020      	beq.n	8004b0a <_printf_common+0xb2>
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	68e5      	ldr	r5, [r4, #12]
 8004acc:	f8d9 2000 	ldr.w	r2, [r9]
 8004ad0:	f003 0306 	and.w	r3, r3, #6
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	bf08      	it	eq
 8004ad8:	1aad      	subeq	r5, r5, r2
 8004ada:	68a3      	ldr	r3, [r4, #8]
 8004adc:	6922      	ldr	r2, [r4, #16]
 8004ade:	bf0c      	ite	eq
 8004ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ae4:	2500      	movne	r5, #0
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	bfc4      	itt	gt
 8004aea:	1a9b      	subgt	r3, r3, r2
 8004aec:	18ed      	addgt	r5, r5, r3
 8004aee:	f04f 0900 	mov.w	r9, #0
 8004af2:	341a      	adds	r4, #26
 8004af4:	454d      	cmp	r5, r9
 8004af6:	d11a      	bne.n	8004b2e <_printf_common+0xd6>
 8004af8:	2000      	movs	r0, #0
 8004afa:	e008      	b.n	8004b0e <_printf_common+0xb6>
 8004afc:	2301      	movs	r3, #1
 8004afe:	4652      	mov	r2, sl
 8004b00:	4639      	mov	r1, r7
 8004b02:	4630      	mov	r0, r6
 8004b04:	47c0      	blx	r8
 8004b06:	3001      	adds	r0, #1
 8004b08:	d103      	bne.n	8004b12 <_printf_common+0xba>
 8004b0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b12:	3501      	adds	r5, #1
 8004b14:	e7c3      	b.n	8004a9e <_printf_common+0x46>
 8004b16:	18e1      	adds	r1, r4, r3
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	2030      	movs	r0, #48	; 0x30
 8004b1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b20:	4422      	add	r2, r4
 8004b22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b2a:	3302      	adds	r3, #2
 8004b2c:	e7c5      	b.n	8004aba <_printf_common+0x62>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	4622      	mov	r2, r4
 8004b32:	4639      	mov	r1, r7
 8004b34:	4630      	mov	r0, r6
 8004b36:	47c0      	blx	r8
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d0e6      	beq.n	8004b0a <_printf_common+0xb2>
 8004b3c:	f109 0901 	add.w	r9, r9, #1
 8004b40:	e7d8      	b.n	8004af4 <_printf_common+0x9c>
	...

08004b44 <_printf_i>:
 8004b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	7e09      	ldrb	r1, [r1, #24]
 8004b50:	b085      	sub	sp, #20
 8004b52:	296e      	cmp	r1, #110	; 0x6e
 8004b54:	4617      	mov	r7, r2
 8004b56:	4606      	mov	r6, r0
 8004b58:	4698      	mov	r8, r3
 8004b5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b5c:	f000 80b3 	beq.w	8004cc6 <_printf_i+0x182>
 8004b60:	d822      	bhi.n	8004ba8 <_printf_i+0x64>
 8004b62:	2963      	cmp	r1, #99	; 0x63
 8004b64:	d036      	beq.n	8004bd4 <_printf_i+0x90>
 8004b66:	d80a      	bhi.n	8004b7e <_printf_i+0x3a>
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	f000 80b9 	beq.w	8004ce0 <_printf_i+0x19c>
 8004b6e:	2958      	cmp	r1, #88	; 0x58
 8004b70:	f000 8083 	beq.w	8004c7a <_printf_i+0x136>
 8004b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b7c:	e032      	b.n	8004be4 <_printf_i+0xa0>
 8004b7e:	2964      	cmp	r1, #100	; 0x64
 8004b80:	d001      	beq.n	8004b86 <_printf_i+0x42>
 8004b82:	2969      	cmp	r1, #105	; 0x69
 8004b84:	d1f6      	bne.n	8004b74 <_printf_i+0x30>
 8004b86:	6820      	ldr	r0, [r4, #0]
 8004b88:	6813      	ldr	r3, [r2, #0]
 8004b8a:	0605      	lsls	r5, r0, #24
 8004b8c:	f103 0104 	add.w	r1, r3, #4
 8004b90:	d52a      	bpl.n	8004be8 <_printf_i+0xa4>
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6011      	str	r1, [r2, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	da03      	bge.n	8004ba2 <_printf_i+0x5e>
 8004b9a:	222d      	movs	r2, #45	; 0x2d
 8004b9c:	425b      	negs	r3, r3
 8004b9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ba2:	486f      	ldr	r0, [pc, #444]	; (8004d60 <_printf_i+0x21c>)
 8004ba4:	220a      	movs	r2, #10
 8004ba6:	e039      	b.n	8004c1c <_printf_i+0xd8>
 8004ba8:	2973      	cmp	r1, #115	; 0x73
 8004baa:	f000 809d 	beq.w	8004ce8 <_printf_i+0x1a4>
 8004bae:	d808      	bhi.n	8004bc2 <_printf_i+0x7e>
 8004bb0:	296f      	cmp	r1, #111	; 0x6f
 8004bb2:	d020      	beq.n	8004bf6 <_printf_i+0xb2>
 8004bb4:	2970      	cmp	r1, #112	; 0x70
 8004bb6:	d1dd      	bne.n	8004b74 <_printf_i+0x30>
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	f043 0320 	orr.w	r3, r3, #32
 8004bbe:	6023      	str	r3, [r4, #0]
 8004bc0:	e003      	b.n	8004bca <_printf_i+0x86>
 8004bc2:	2975      	cmp	r1, #117	; 0x75
 8004bc4:	d017      	beq.n	8004bf6 <_printf_i+0xb2>
 8004bc6:	2978      	cmp	r1, #120	; 0x78
 8004bc8:	d1d4      	bne.n	8004b74 <_printf_i+0x30>
 8004bca:	2378      	movs	r3, #120	; 0x78
 8004bcc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bd0:	4864      	ldr	r0, [pc, #400]	; (8004d64 <_printf_i+0x220>)
 8004bd2:	e055      	b.n	8004c80 <_printf_i+0x13c>
 8004bd4:	6813      	ldr	r3, [r2, #0]
 8004bd6:	1d19      	adds	r1, r3, #4
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6011      	str	r1, [r2, #0]
 8004bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004be0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004be4:	2301      	movs	r3, #1
 8004be6:	e08c      	b.n	8004d02 <_printf_i+0x1be>
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6011      	str	r1, [r2, #0]
 8004bec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bf0:	bf18      	it	ne
 8004bf2:	b21b      	sxthne	r3, r3
 8004bf4:	e7cf      	b.n	8004b96 <_printf_i+0x52>
 8004bf6:	6813      	ldr	r3, [r2, #0]
 8004bf8:	6825      	ldr	r5, [r4, #0]
 8004bfa:	1d18      	adds	r0, r3, #4
 8004bfc:	6010      	str	r0, [r2, #0]
 8004bfe:	0628      	lsls	r0, r5, #24
 8004c00:	d501      	bpl.n	8004c06 <_printf_i+0xc2>
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	e002      	b.n	8004c0c <_printf_i+0xc8>
 8004c06:	0668      	lsls	r0, r5, #25
 8004c08:	d5fb      	bpl.n	8004c02 <_printf_i+0xbe>
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	4854      	ldr	r0, [pc, #336]	; (8004d60 <_printf_i+0x21c>)
 8004c0e:	296f      	cmp	r1, #111	; 0x6f
 8004c10:	bf14      	ite	ne
 8004c12:	220a      	movne	r2, #10
 8004c14:	2208      	moveq	r2, #8
 8004c16:	2100      	movs	r1, #0
 8004c18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c1c:	6865      	ldr	r5, [r4, #4]
 8004c1e:	60a5      	str	r5, [r4, #8]
 8004c20:	2d00      	cmp	r5, #0
 8004c22:	f2c0 8095 	blt.w	8004d50 <_printf_i+0x20c>
 8004c26:	6821      	ldr	r1, [r4, #0]
 8004c28:	f021 0104 	bic.w	r1, r1, #4
 8004c2c:	6021      	str	r1, [r4, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d13d      	bne.n	8004cae <_printf_i+0x16a>
 8004c32:	2d00      	cmp	r5, #0
 8004c34:	f040 808e 	bne.w	8004d54 <_printf_i+0x210>
 8004c38:	4665      	mov	r5, ip
 8004c3a:	2a08      	cmp	r2, #8
 8004c3c:	d10b      	bne.n	8004c56 <_printf_i+0x112>
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	07db      	lsls	r3, r3, #31
 8004c42:	d508      	bpl.n	8004c56 <_printf_i+0x112>
 8004c44:	6923      	ldr	r3, [r4, #16]
 8004c46:	6862      	ldr	r2, [r4, #4]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	bfde      	ittt	le
 8004c4c:	2330      	movle	r3, #48	; 0x30
 8004c4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c52:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004c56:	ebac 0305 	sub.w	r3, ip, r5
 8004c5a:	6123      	str	r3, [r4, #16]
 8004c5c:	f8cd 8000 	str.w	r8, [sp]
 8004c60:	463b      	mov	r3, r7
 8004c62:	aa03      	add	r2, sp, #12
 8004c64:	4621      	mov	r1, r4
 8004c66:	4630      	mov	r0, r6
 8004c68:	f7ff fef6 	bl	8004a58 <_printf_common>
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	d14d      	bne.n	8004d0c <_printf_i+0x1c8>
 8004c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c74:	b005      	add	sp, #20
 8004c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c7a:	4839      	ldr	r0, [pc, #228]	; (8004d60 <_printf_i+0x21c>)
 8004c7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c80:	6813      	ldr	r3, [r2, #0]
 8004c82:	6821      	ldr	r1, [r4, #0]
 8004c84:	1d1d      	adds	r5, r3, #4
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6015      	str	r5, [r2, #0]
 8004c8a:	060a      	lsls	r2, r1, #24
 8004c8c:	d50b      	bpl.n	8004ca6 <_printf_i+0x162>
 8004c8e:	07ca      	lsls	r2, r1, #31
 8004c90:	bf44      	itt	mi
 8004c92:	f041 0120 	orrmi.w	r1, r1, #32
 8004c96:	6021      	strmi	r1, [r4, #0]
 8004c98:	b91b      	cbnz	r3, 8004ca2 <_printf_i+0x15e>
 8004c9a:	6822      	ldr	r2, [r4, #0]
 8004c9c:	f022 0220 	bic.w	r2, r2, #32
 8004ca0:	6022      	str	r2, [r4, #0]
 8004ca2:	2210      	movs	r2, #16
 8004ca4:	e7b7      	b.n	8004c16 <_printf_i+0xd2>
 8004ca6:	064d      	lsls	r5, r1, #25
 8004ca8:	bf48      	it	mi
 8004caa:	b29b      	uxthmi	r3, r3
 8004cac:	e7ef      	b.n	8004c8e <_printf_i+0x14a>
 8004cae:	4665      	mov	r5, ip
 8004cb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cb4:	fb02 3311 	mls	r3, r2, r1, r3
 8004cb8:	5cc3      	ldrb	r3, [r0, r3]
 8004cba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	2900      	cmp	r1, #0
 8004cc2:	d1f5      	bne.n	8004cb0 <_printf_i+0x16c>
 8004cc4:	e7b9      	b.n	8004c3a <_printf_i+0xf6>
 8004cc6:	6813      	ldr	r3, [r2, #0]
 8004cc8:	6825      	ldr	r5, [r4, #0]
 8004cca:	6961      	ldr	r1, [r4, #20]
 8004ccc:	1d18      	adds	r0, r3, #4
 8004cce:	6010      	str	r0, [r2, #0]
 8004cd0:	0628      	lsls	r0, r5, #24
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	d501      	bpl.n	8004cda <_printf_i+0x196>
 8004cd6:	6019      	str	r1, [r3, #0]
 8004cd8:	e002      	b.n	8004ce0 <_printf_i+0x19c>
 8004cda:	066a      	lsls	r2, r5, #25
 8004cdc:	d5fb      	bpl.n	8004cd6 <_printf_i+0x192>
 8004cde:	8019      	strh	r1, [r3, #0]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	6123      	str	r3, [r4, #16]
 8004ce4:	4665      	mov	r5, ip
 8004ce6:	e7b9      	b.n	8004c5c <_printf_i+0x118>
 8004ce8:	6813      	ldr	r3, [r2, #0]
 8004cea:	1d19      	adds	r1, r3, #4
 8004cec:	6011      	str	r1, [r2, #0]
 8004cee:	681d      	ldr	r5, [r3, #0]
 8004cf0:	6862      	ldr	r2, [r4, #4]
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	f7fb fa73 	bl	80001e0 <memchr>
 8004cfa:	b108      	cbz	r0, 8004d00 <_printf_i+0x1bc>
 8004cfc:	1b40      	subs	r0, r0, r5
 8004cfe:	6060      	str	r0, [r4, #4]
 8004d00:	6863      	ldr	r3, [r4, #4]
 8004d02:	6123      	str	r3, [r4, #16]
 8004d04:	2300      	movs	r3, #0
 8004d06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d0a:	e7a7      	b.n	8004c5c <_printf_i+0x118>
 8004d0c:	6923      	ldr	r3, [r4, #16]
 8004d0e:	462a      	mov	r2, r5
 8004d10:	4639      	mov	r1, r7
 8004d12:	4630      	mov	r0, r6
 8004d14:	47c0      	blx	r8
 8004d16:	3001      	adds	r0, #1
 8004d18:	d0aa      	beq.n	8004c70 <_printf_i+0x12c>
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	079b      	lsls	r3, r3, #30
 8004d1e:	d413      	bmi.n	8004d48 <_printf_i+0x204>
 8004d20:	68e0      	ldr	r0, [r4, #12]
 8004d22:	9b03      	ldr	r3, [sp, #12]
 8004d24:	4298      	cmp	r0, r3
 8004d26:	bfb8      	it	lt
 8004d28:	4618      	movlt	r0, r3
 8004d2a:	e7a3      	b.n	8004c74 <_printf_i+0x130>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	464a      	mov	r2, r9
 8004d30:	4639      	mov	r1, r7
 8004d32:	4630      	mov	r0, r6
 8004d34:	47c0      	blx	r8
 8004d36:	3001      	adds	r0, #1
 8004d38:	d09a      	beq.n	8004c70 <_printf_i+0x12c>
 8004d3a:	3501      	adds	r5, #1
 8004d3c:	68e3      	ldr	r3, [r4, #12]
 8004d3e:	9a03      	ldr	r2, [sp, #12]
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	42ab      	cmp	r3, r5
 8004d44:	dcf2      	bgt.n	8004d2c <_printf_i+0x1e8>
 8004d46:	e7eb      	b.n	8004d20 <_printf_i+0x1dc>
 8004d48:	2500      	movs	r5, #0
 8004d4a:	f104 0919 	add.w	r9, r4, #25
 8004d4e:	e7f5      	b.n	8004d3c <_printf_i+0x1f8>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1ac      	bne.n	8004cae <_printf_i+0x16a>
 8004d54:	7803      	ldrb	r3, [r0, #0]
 8004d56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d5e:	e76c      	b.n	8004c3a <_printf_i+0xf6>
 8004d60:	08005009 	.word	0x08005009
 8004d64:	0800501a 	.word	0x0800501a

08004d68 <memcpy>:
 8004d68:	b510      	push	{r4, lr}
 8004d6a:	1e43      	subs	r3, r0, #1
 8004d6c:	440a      	add	r2, r1
 8004d6e:	4291      	cmp	r1, r2
 8004d70:	d100      	bne.n	8004d74 <memcpy+0xc>
 8004d72:	bd10      	pop	{r4, pc}
 8004d74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d7c:	e7f7      	b.n	8004d6e <memcpy+0x6>

08004d7e <memmove>:
 8004d7e:	4288      	cmp	r0, r1
 8004d80:	b510      	push	{r4, lr}
 8004d82:	eb01 0302 	add.w	r3, r1, r2
 8004d86:	d807      	bhi.n	8004d98 <memmove+0x1a>
 8004d88:	1e42      	subs	r2, r0, #1
 8004d8a:	4299      	cmp	r1, r3
 8004d8c:	d00a      	beq.n	8004da4 <memmove+0x26>
 8004d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d92:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004d96:	e7f8      	b.n	8004d8a <memmove+0xc>
 8004d98:	4283      	cmp	r3, r0
 8004d9a:	d9f5      	bls.n	8004d88 <memmove+0xa>
 8004d9c:	1881      	adds	r1, r0, r2
 8004d9e:	1ad2      	subs	r2, r2, r3
 8004da0:	42d3      	cmn	r3, r2
 8004da2:	d100      	bne.n	8004da6 <memmove+0x28>
 8004da4:	bd10      	pop	{r4, pc}
 8004da6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004daa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004dae:	e7f7      	b.n	8004da0 <memmove+0x22>

08004db0 <_free_r>:
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	4605      	mov	r5, r0
 8004db4:	2900      	cmp	r1, #0
 8004db6:	d045      	beq.n	8004e44 <_free_r+0x94>
 8004db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dbc:	1f0c      	subs	r4, r1, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bfb8      	it	lt
 8004dc2:	18e4      	addlt	r4, r4, r3
 8004dc4:	f000 f8d2 	bl	8004f6c <__malloc_lock>
 8004dc8:	4a1f      	ldr	r2, [pc, #124]	; (8004e48 <_free_r+0x98>)
 8004dca:	6813      	ldr	r3, [r2, #0]
 8004dcc:	4610      	mov	r0, r2
 8004dce:	b933      	cbnz	r3, 8004dde <_free_r+0x2e>
 8004dd0:	6063      	str	r3, [r4, #4]
 8004dd2:	6014      	str	r4, [r2, #0]
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dda:	f000 b8c8 	b.w	8004f6e <__malloc_unlock>
 8004dde:	42a3      	cmp	r3, r4
 8004de0:	d90c      	bls.n	8004dfc <_free_r+0x4c>
 8004de2:	6821      	ldr	r1, [r4, #0]
 8004de4:	1862      	adds	r2, r4, r1
 8004de6:	4293      	cmp	r3, r2
 8004de8:	bf04      	itt	eq
 8004dea:	681a      	ldreq	r2, [r3, #0]
 8004dec:	685b      	ldreq	r3, [r3, #4]
 8004dee:	6063      	str	r3, [r4, #4]
 8004df0:	bf04      	itt	eq
 8004df2:	1852      	addeq	r2, r2, r1
 8004df4:	6022      	streq	r2, [r4, #0]
 8004df6:	6004      	str	r4, [r0, #0]
 8004df8:	e7ec      	b.n	8004dd4 <_free_r+0x24>
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	b10a      	cbz	r2, 8004e04 <_free_r+0x54>
 8004e00:	42a2      	cmp	r2, r4
 8004e02:	d9fa      	bls.n	8004dfa <_free_r+0x4a>
 8004e04:	6819      	ldr	r1, [r3, #0]
 8004e06:	1858      	adds	r0, r3, r1
 8004e08:	42a0      	cmp	r0, r4
 8004e0a:	d10b      	bne.n	8004e24 <_free_r+0x74>
 8004e0c:	6820      	ldr	r0, [r4, #0]
 8004e0e:	4401      	add	r1, r0
 8004e10:	1858      	adds	r0, r3, r1
 8004e12:	4282      	cmp	r2, r0
 8004e14:	6019      	str	r1, [r3, #0]
 8004e16:	d1dd      	bne.n	8004dd4 <_free_r+0x24>
 8004e18:	6810      	ldr	r0, [r2, #0]
 8004e1a:	6852      	ldr	r2, [r2, #4]
 8004e1c:	605a      	str	r2, [r3, #4]
 8004e1e:	4401      	add	r1, r0
 8004e20:	6019      	str	r1, [r3, #0]
 8004e22:	e7d7      	b.n	8004dd4 <_free_r+0x24>
 8004e24:	d902      	bls.n	8004e2c <_free_r+0x7c>
 8004e26:	230c      	movs	r3, #12
 8004e28:	602b      	str	r3, [r5, #0]
 8004e2a:	e7d3      	b.n	8004dd4 <_free_r+0x24>
 8004e2c:	6820      	ldr	r0, [r4, #0]
 8004e2e:	1821      	adds	r1, r4, r0
 8004e30:	428a      	cmp	r2, r1
 8004e32:	bf04      	itt	eq
 8004e34:	6811      	ldreq	r1, [r2, #0]
 8004e36:	6852      	ldreq	r2, [r2, #4]
 8004e38:	6062      	str	r2, [r4, #4]
 8004e3a:	bf04      	itt	eq
 8004e3c:	1809      	addeq	r1, r1, r0
 8004e3e:	6021      	streq	r1, [r4, #0]
 8004e40:	605c      	str	r4, [r3, #4]
 8004e42:	e7c7      	b.n	8004dd4 <_free_r+0x24>
 8004e44:	bd38      	pop	{r3, r4, r5, pc}
 8004e46:	bf00      	nop
 8004e48:	2000009c 	.word	0x2000009c

08004e4c <_malloc_r>:
 8004e4c:	b570      	push	{r4, r5, r6, lr}
 8004e4e:	1ccd      	adds	r5, r1, #3
 8004e50:	f025 0503 	bic.w	r5, r5, #3
 8004e54:	3508      	adds	r5, #8
 8004e56:	2d0c      	cmp	r5, #12
 8004e58:	bf38      	it	cc
 8004e5a:	250c      	movcc	r5, #12
 8004e5c:	2d00      	cmp	r5, #0
 8004e5e:	4606      	mov	r6, r0
 8004e60:	db01      	blt.n	8004e66 <_malloc_r+0x1a>
 8004e62:	42a9      	cmp	r1, r5
 8004e64:	d903      	bls.n	8004e6e <_malloc_r+0x22>
 8004e66:	230c      	movs	r3, #12
 8004e68:	6033      	str	r3, [r6, #0]
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	bd70      	pop	{r4, r5, r6, pc}
 8004e6e:	f000 f87d 	bl	8004f6c <__malloc_lock>
 8004e72:	4a21      	ldr	r2, [pc, #132]	; (8004ef8 <_malloc_r+0xac>)
 8004e74:	6814      	ldr	r4, [r2, #0]
 8004e76:	4621      	mov	r1, r4
 8004e78:	b991      	cbnz	r1, 8004ea0 <_malloc_r+0x54>
 8004e7a:	4c20      	ldr	r4, [pc, #128]	; (8004efc <_malloc_r+0xb0>)
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	b91b      	cbnz	r3, 8004e88 <_malloc_r+0x3c>
 8004e80:	4630      	mov	r0, r6
 8004e82:	f000 f863 	bl	8004f4c <_sbrk_r>
 8004e86:	6020      	str	r0, [r4, #0]
 8004e88:	4629      	mov	r1, r5
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	f000 f85e 	bl	8004f4c <_sbrk_r>
 8004e90:	1c43      	adds	r3, r0, #1
 8004e92:	d124      	bne.n	8004ede <_malloc_r+0x92>
 8004e94:	230c      	movs	r3, #12
 8004e96:	6033      	str	r3, [r6, #0]
 8004e98:	4630      	mov	r0, r6
 8004e9a:	f000 f868 	bl	8004f6e <__malloc_unlock>
 8004e9e:	e7e4      	b.n	8004e6a <_malloc_r+0x1e>
 8004ea0:	680b      	ldr	r3, [r1, #0]
 8004ea2:	1b5b      	subs	r3, r3, r5
 8004ea4:	d418      	bmi.n	8004ed8 <_malloc_r+0x8c>
 8004ea6:	2b0b      	cmp	r3, #11
 8004ea8:	d90f      	bls.n	8004eca <_malloc_r+0x7e>
 8004eaa:	600b      	str	r3, [r1, #0]
 8004eac:	50cd      	str	r5, [r1, r3]
 8004eae:	18cc      	adds	r4, r1, r3
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	f000 f85c 	bl	8004f6e <__malloc_unlock>
 8004eb6:	f104 000b 	add.w	r0, r4, #11
 8004eba:	1d23      	adds	r3, r4, #4
 8004ebc:	f020 0007 	bic.w	r0, r0, #7
 8004ec0:	1ac3      	subs	r3, r0, r3
 8004ec2:	d0d3      	beq.n	8004e6c <_malloc_r+0x20>
 8004ec4:	425a      	negs	r2, r3
 8004ec6:	50e2      	str	r2, [r4, r3]
 8004ec8:	e7d0      	b.n	8004e6c <_malloc_r+0x20>
 8004eca:	428c      	cmp	r4, r1
 8004ecc:	684b      	ldr	r3, [r1, #4]
 8004ece:	bf16      	itet	ne
 8004ed0:	6063      	strne	r3, [r4, #4]
 8004ed2:	6013      	streq	r3, [r2, #0]
 8004ed4:	460c      	movne	r4, r1
 8004ed6:	e7eb      	b.n	8004eb0 <_malloc_r+0x64>
 8004ed8:	460c      	mov	r4, r1
 8004eda:	6849      	ldr	r1, [r1, #4]
 8004edc:	e7cc      	b.n	8004e78 <_malloc_r+0x2c>
 8004ede:	1cc4      	adds	r4, r0, #3
 8004ee0:	f024 0403 	bic.w	r4, r4, #3
 8004ee4:	42a0      	cmp	r0, r4
 8004ee6:	d005      	beq.n	8004ef4 <_malloc_r+0xa8>
 8004ee8:	1a21      	subs	r1, r4, r0
 8004eea:	4630      	mov	r0, r6
 8004eec:	f000 f82e 	bl	8004f4c <_sbrk_r>
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d0cf      	beq.n	8004e94 <_malloc_r+0x48>
 8004ef4:	6025      	str	r5, [r4, #0]
 8004ef6:	e7db      	b.n	8004eb0 <_malloc_r+0x64>
 8004ef8:	2000009c 	.word	0x2000009c
 8004efc:	200000a0 	.word	0x200000a0

08004f00 <_realloc_r>:
 8004f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f02:	4607      	mov	r7, r0
 8004f04:	4614      	mov	r4, r2
 8004f06:	460e      	mov	r6, r1
 8004f08:	b921      	cbnz	r1, 8004f14 <_realloc_r+0x14>
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f10:	f7ff bf9c 	b.w	8004e4c <_malloc_r>
 8004f14:	b922      	cbnz	r2, 8004f20 <_realloc_r+0x20>
 8004f16:	f7ff ff4b 	bl	8004db0 <_free_r>
 8004f1a:	4625      	mov	r5, r4
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f20:	f000 f826 	bl	8004f70 <_malloc_usable_size_r>
 8004f24:	42a0      	cmp	r0, r4
 8004f26:	d20f      	bcs.n	8004f48 <_realloc_r+0x48>
 8004f28:	4621      	mov	r1, r4
 8004f2a:	4638      	mov	r0, r7
 8004f2c:	f7ff ff8e 	bl	8004e4c <_malloc_r>
 8004f30:	4605      	mov	r5, r0
 8004f32:	2800      	cmp	r0, #0
 8004f34:	d0f2      	beq.n	8004f1c <_realloc_r+0x1c>
 8004f36:	4631      	mov	r1, r6
 8004f38:	4622      	mov	r2, r4
 8004f3a:	f7ff ff15 	bl	8004d68 <memcpy>
 8004f3e:	4631      	mov	r1, r6
 8004f40:	4638      	mov	r0, r7
 8004f42:	f7ff ff35 	bl	8004db0 <_free_r>
 8004f46:	e7e9      	b.n	8004f1c <_realloc_r+0x1c>
 8004f48:	4635      	mov	r5, r6
 8004f4a:	e7e7      	b.n	8004f1c <_realloc_r+0x1c>

08004f4c <_sbrk_r>:
 8004f4c:	b538      	push	{r3, r4, r5, lr}
 8004f4e:	4c06      	ldr	r4, [pc, #24]	; (8004f68 <_sbrk_r+0x1c>)
 8004f50:	2300      	movs	r3, #0
 8004f52:	4605      	mov	r5, r0
 8004f54:	4608      	mov	r0, r1
 8004f56:	6023      	str	r3, [r4, #0]
 8004f58:	f7fc fc2a 	bl	80017b0 <_sbrk>
 8004f5c:	1c43      	adds	r3, r0, #1
 8004f5e:	d102      	bne.n	8004f66 <_sbrk_r+0x1a>
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	b103      	cbz	r3, 8004f66 <_sbrk_r+0x1a>
 8004f64:	602b      	str	r3, [r5, #0]
 8004f66:	bd38      	pop	{r3, r4, r5, pc}
 8004f68:	20000264 	.word	0x20000264

08004f6c <__malloc_lock>:
 8004f6c:	4770      	bx	lr

08004f6e <__malloc_unlock>:
 8004f6e:	4770      	bx	lr

08004f70 <_malloc_usable_size_r>:
 8004f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f74:	1f18      	subs	r0, r3, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	bfbc      	itt	lt
 8004f7a:	580b      	ldrlt	r3, [r1, r0]
 8004f7c:	18c0      	addlt	r0, r0, r3
 8004f7e:	4770      	bx	lr

08004f80 <_init>:
 8004f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f82:	bf00      	nop
 8004f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f86:	bc08      	pop	{r3}
 8004f88:	469e      	mov	lr, r3
 8004f8a:	4770      	bx	lr

08004f8c <_fini>:
 8004f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8e:	bf00      	nop
 8004f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f92:	bc08      	pop	{r3}
 8004f94:	469e      	mov	lr, r3
 8004f96:	4770      	bx	lr
