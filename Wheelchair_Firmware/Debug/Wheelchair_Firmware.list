
Wheelchair_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080060dc  080060dc  000160dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061a4  080061a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080061a4  080061a4  000161a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061ac  080061ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061ac  080061ac  000161ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061b0  080061b0  000161b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080061b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000070  08006224  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08006224  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f751  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e85  00000000  00000000  0002f7f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001038  00000000  00000000  00031678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f60  00000000  00000000  000326b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000223a7  00000000  00000000  00033610  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd7f  00000000  00000000  000559b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2944  00000000  00000000  00061736  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013407a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f0  00000000  00000000  001340f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060c4 	.word	0x080060c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080060c4 	.word	0x080060c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ad0:	f000 b972 	b.w	8000db8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	4688      	mov	r8, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14b      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4615      	mov	r5, r2
 8000afe:	d967      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0720 	rsb	r7, r2, #32
 8000b0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b12:	4095      	lsls	r5, r2
 8000b14:	ea47 0803 	orr.w	r8, r7, r3
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b24:	fa1f fc85 	uxth.w	ip, r5
 8000b28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b30:	fb07 f10c 	mul.w	r1, r7, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b3e:	f080 811b 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8118 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b48:	3f02      	subs	r7, #2
 8000b4a:	442b      	add	r3, r5
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b60:	45a4      	cmp	ip, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	192c      	adds	r4, r5, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b6a:	f080 8107 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b6e:	45a4      	cmp	ip, r4
 8000b70:	f240 8104 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b74:	3802      	subs	r0, #2
 8000b76:	442c      	add	r4, r5
 8000b78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b7c:	eba4 040c 	sub.w	r4, r4, ip
 8000b80:	2700      	movs	r7, #0
 8000b82:	b11e      	cbz	r6, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d909      	bls.n	8000baa <__udivmoddi4+0xbe>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80eb 	beq.w	8000d72 <__udivmoddi4+0x286>
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ba2:	4638      	mov	r0, r7
 8000ba4:	4639      	mov	r1, r7
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	fab3 f783 	clz	r7, r3
 8000bae:	2f00      	cmp	r7, #0
 8000bb0:	d147      	bne.n	8000c42 <__udivmoddi4+0x156>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d302      	bcc.n	8000bbc <__udivmoddi4+0xd0>
 8000bb6:	4282      	cmp	r2, r0
 8000bb8:	f200 80fa 	bhi.w	8000db0 <__udivmoddi4+0x2c4>
 8000bbc:	1a84      	subs	r4, r0, r2
 8000bbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d0e0      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000bca:	e9c6 4800 	strd	r4, r8, [r6]
 8000bce:	e7dd      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000bd0:	b902      	cbnz	r2, 8000bd4 <__udivmoddi4+0xe8>
 8000bd2:	deff      	udf	#255	; 0xff
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	f040 808f 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bde:	1b49      	subs	r1, r1, r5
 8000be0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000be4:	fa1f f885 	uxth.w	r8, r5
 8000be8:	2701      	movs	r7, #1
 8000bea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000c00:	18eb      	adds	r3, r5, r3
 8000c02:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	f200 80cd 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000c0e:	4684      	mov	ip, r0
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c20:	fb08 f800 	mul.w	r8, r8, r0
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x14c>
 8000c28:	192c      	adds	r4, r5, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x14a>
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	f200 80b6 	bhi.w	8000da2 <__udivmoddi4+0x2b6>
 8000c36:	4618      	mov	r0, r3
 8000c38:	eba4 0408 	sub.w	r4, r4, r8
 8000c3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c40:	e79f      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c42:	f1c7 0c20 	rsb	ip, r7, #32
 8000c46:	40bb      	lsls	r3, r7
 8000c48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c50:	fa01 f407 	lsl.w	r4, r1, r7
 8000c54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c60:	4325      	orrs	r5, r4
 8000c62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c66:	0c2c      	lsrs	r4, r5, #16
 8000c68:	fb08 3319 	mls	r3, r8, r9, r3
 8000c6c:	fa1f fa8e 	uxth.w	sl, lr
 8000c70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c74:	fb09 f40a 	mul.w	r4, r9, sl
 8000c78:	429c      	cmp	r4, r3
 8000c7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1e 0303 	adds.w	r3, lr, r3
 8000c88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c8c:	f080 8087 	bcs.w	8000d9e <__udivmoddi4+0x2b2>
 8000c90:	429c      	cmp	r4, r3
 8000c92:	f240 8084 	bls.w	8000d9e <__udivmoddi4+0x2b2>
 8000c96:	f1a9 0902 	sub.w	r9, r9, #2
 8000c9a:	4473      	add	r3, lr
 8000c9c:	1b1b      	subs	r3, r3, r4
 8000c9e:	b2ad      	uxth	r5, r5
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb0:	45a2      	cmp	sl, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cbc:	d26b      	bcs.n	8000d96 <__udivmoddi4+0x2aa>
 8000cbe:	45a2      	cmp	sl, r4
 8000cc0:	d969      	bls.n	8000d96 <__udivmoddi4+0x2aa>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4474      	add	r4, lr
 8000cc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cca:	fba0 8902 	umull	r8, r9, r0, r2
 8000cce:	eba4 040a 	sub.w	r4, r4, sl
 8000cd2:	454c      	cmp	r4, r9
 8000cd4:	46c2      	mov	sl, r8
 8000cd6:	464b      	mov	r3, r9
 8000cd8:	d354      	bcc.n	8000d84 <__udivmoddi4+0x298>
 8000cda:	d051      	beq.n	8000d80 <__udivmoddi4+0x294>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d069      	beq.n	8000db4 <__udivmoddi4+0x2c8>
 8000ce0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ce4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ce8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cec:	40fd      	lsrs	r5, r7
 8000cee:	40fc      	lsrs	r4, r7
 8000cf0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cf4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	e747      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000cfc:	f1c2 0320 	rsb	r3, r2, #32
 8000d00:	fa20 f703 	lsr.w	r7, r0, r3
 8000d04:	4095      	lsls	r5, r2
 8000d06:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d12:	4338      	orrs	r0, r7
 8000d14:	0c01      	lsrs	r1, r0, #16
 8000d16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d1a:	fa1f f885 	uxth.w	r8, r5
 8000d1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d26:	fb07 f308 	mul.w	r3, r7, r8
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x256>
 8000d32:	1869      	adds	r1, r5, r1
 8000d34:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d38:	d22f      	bcs.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d92d      	bls.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3e:	3f02      	subs	r7, #2
 8000d40:	4429      	add	r1, r5
 8000d42:	1acb      	subs	r3, r1, r3
 8000d44:	b281      	uxth	r1, r0
 8000d46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d52:	fb00 f308 	mul.w	r3, r0, r8
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x27e>
 8000d5a:	1869      	adds	r1, r5, r1
 8000d5c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d60:	d217      	bcs.n	8000d92 <__udivmoddi4+0x2a6>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d915      	bls.n	8000d92 <__udivmoddi4+0x2a6>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4429      	add	r1, r5
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d70:	e73b      	b.n	8000bea <__udivmoddi4+0xfe>
 8000d72:	4637      	mov	r7, r6
 8000d74:	4630      	mov	r0, r6
 8000d76:	e709      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d78:	4607      	mov	r7, r0
 8000d7a:	e6e7      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	e6fb      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d80:	4541      	cmp	r1, r8
 8000d82:	d2ab      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d88:	eb69 020e 	sbc.w	r2, r9, lr
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	4613      	mov	r3, r2
 8000d90:	e7a4      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d92:	4660      	mov	r0, ip
 8000d94:	e7e9      	b.n	8000d6a <__udivmoddi4+0x27e>
 8000d96:	4618      	mov	r0, r3
 8000d98:	e795      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9a:	4667      	mov	r7, ip
 8000d9c:	e7d1      	b.n	8000d42 <__udivmoddi4+0x256>
 8000d9e:	4681      	mov	r9, r0
 8000da0:	e77c      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	442c      	add	r4, r5
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0x14c>
 8000da8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dac:	442b      	add	r3, r5
 8000dae:	e72f      	b.n	8000c10 <__udivmoddi4+0x124>
 8000db0:	4638      	mov	r0, r7
 8000db2:	e708      	b.n	8000bc6 <__udivmoddi4+0xda>
 8000db4:	4637      	mov	r7, r6
 8000db6:	e6e9      	b.n	8000b8c <__udivmoddi4+0xa0>

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc2:	f001 fcd1 	bl	8002768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc6:	f000 f8d7 	bl	8000f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dca:	f000 fc0f 	bl	80015ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dce:	f000 f949 	bl	8001064 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000dd2:	f000 fbb7 	bl	8001544 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000dd6:	f000 f997 	bl	8001108 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000dda:	f000 fa1b 	bl	8001214 <MX_I2C1_Init>
  MX_DAC_Init();
 8000dde:	f000 f9e5 	bl	80011ac <MX_DAC_Init>
  MX_I2C3_Init();
 8000de2:	f000 fa45 	bl	8001270 <MX_I2C3_Init>
  MX_TIM3_Init();
 8000de6:	f000 fac1 	bl	800136c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000dea:	f000 fb35 	bl	8001458 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000dee:	f000 fbd3 	bl	8001598 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000df2:	f000 fa6b 	bl	80012cc <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000df6:	f000 f929 	bl	800104c <MX_NVIC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Start TIM1 (for us delay)
  HAL_TIM_Base_Start(&htim1);
 8000dfa:	4846      	ldr	r0, [pc, #280]	; (8000f14 <main+0x158>)
 8000dfc:	f003 fa37 	bl	800426e <HAL_TIM_Base_Start>
  // Start PWMs
  HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 8000e00:	2100      	movs	r1, #0
 8000e02:	4845      	ldr	r0, [pc, #276]	; (8000f18 <main+0x15c>)
 8000e04:	f003 fa8c 	bl	8004320 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start (&htim4, TIM_CHANNEL_2);
 8000e08:	2104      	movs	r1, #4
 8000e0a:	4844      	ldr	r0, [pc, #272]	; (8000f1c <main+0x160>)
 8000e0c:	f003 fa88 	bl	8004320 <HAL_TIM_PWM_Start>
  while (1)
  {
    if (!voice)
 8000e10:	4b43      	ldr	r3, [pc, #268]	; (8000f20 <main+0x164>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d110      	bne.n	8000e3c <main+0x80>
    {
      // Read ADC value
      ADC_1 = ADC_Read(&hadc1);
 8000e1a:	4842      	ldr	r0, [pc, #264]	; (8000f24 <main+0x168>)
 8000e1c:	f000 fd74 	bl	8001908 <ADC_Read>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b40      	ldr	r3, [pc, #256]	; (8000f28 <main+0x16c>)
 8000e26:	801a      	strh	r2, [r3, #0]
      ADC_2 = ADC_Read(&hadc2);
 8000e28:	4840      	ldr	r0, [pc, #256]	; (8000f2c <main+0x170>)
 8000e2a:	f000 fd6d 	bl	8001908 <ADC_Read>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <main+0x174>)
 8000e34:	801a      	strh	r2, [r3, #0]
      // Motor controlling logics
      manual_driving();
 8000e36:	f000 fd7d 	bl	8001934 <manual_driving>
 8000e3a:	e7e9      	b.n	8000e10 <main+0x54>
    }
    else
    {
      HAL_UART_Receive (&huart3, (uint8_t*)cmd, UART_CMD_LENGTH, UART_TIMEOUT); // receiving message from pi
 8000e3c:	2364      	movs	r3, #100	; 0x64
 8000e3e:	2201      	movs	r2, #1
 8000e40:	493c      	ldr	r1, [pc, #240]	; (8000f34 <main+0x178>)
 8000e42:	483d      	ldr	r0, [pc, #244]	; (8000f38 <main+0x17c>)
 8000e44:	f004 f89a 	bl	8004f7c <HAL_UART_Receive>
      // Read distances
      Ultrasonic_Read(GPIOE, US4_Trig_Pin, US4_Echo_Pin, &count_1, &distance_1);
 8000e48:	4b3c      	ldr	r3, [pc, #240]	; (8000f3c <main+0x180>)
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	4b3c      	ldr	r3, [pc, #240]	; (8000f40 <main+0x184>)
 8000e4e:	2204      	movs	r2, #4
 8000e50:	2110      	movs	r1, #16
 8000e52:	483c      	ldr	r0, [pc, #240]	; (8000f44 <main+0x188>)
 8000e54:	f001 f850 	bl	8001ef8 <Ultrasonic_Read>
      Ultrasonic_Read(GPIOE, US2_Trig_Pin, US2_Echo_Pin, &count_2, &distance_2);
 8000e58:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <main+0x18c>)
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	4b3b      	ldr	r3, [pc, #236]	; (8000f4c <main+0x190>)
 8000e5e:	2220      	movs	r2, #32
 8000e60:	2140      	movs	r1, #64	; 0x40
 8000e62:	4838      	ldr	r0, [pc, #224]	; (8000f44 <main+0x188>)
 8000e64:	f001 f848 	bl	8001ef8 <Ultrasonic_Read>
      Ultrasonic_Read(GPIOD, US3_Trig_Pin, US3_Echo_Pin, &count_3, &distance_3);
 8000e68:	4b39      	ldr	r3, [pc, #228]	; (8000f50 <main+0x194>)
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	4b39      	ldr	r3, [pc, #228]	; (8000f54 <main+0x198>)
 8000e6e:	2204      	movs	r2, #4
 8000e70:	2102      	movs	r1, #2
 8000e72:	4839      	ldr	r0, [pc, #228]	; (8000f58 <main+0x19c>)
 8000e74:	f001 f840 	bl	8001ef8 <Ultrasonic_Read>
      if ((distance_1 < US_MIN) || (distance_2 < US_MIN) || (distance_3 < US_MIN))
 8000e78:	4b30      	ldr	r3, [pc, #192]	; (8000f3c <main+0x180>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	2b18      	cmp	r3, #24
 8000e7e:	d907      	bls.n	8000e90 <main+0xd4>
 8000e80:	4b31      	ldr	r3, [pc, #196]	; (8000f48 <main+0x18c>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	2b18      	cmp	r3, #24
 8000e86:	d903      	bls.n	8000e90 <main+0xd4>
 8000e88:	4b31      	ldr	r3, [pc, #196]	; (8000f50 <main+0x194>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	2b18      	cmp	r3, #24
 8000e8e:	d802      	bhi.n	8000e96 <main+0xda>
      {
        cmd[0] = ' ';
 8000e90:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <main+0x178>)
 8000e92:	2220      	movs	r2, #32
 8000e94:	701a      	strb	r2, [r3, #0]
      }
      // Motor controlling logics
      voice_driving();
 8000e96:	f000 fdc3 	bl	8001a20 <voice_driving>

      // debugging message
      sprintf(msg_1, "delay_1 = %d us, distance_1 = %d cm\r\n ", count_1, distance_1);
 8000e9a:	4b29      	ldr	r3, [pc, #164]	; (8000f40 <main+0x184>)
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <main+0x180>)
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	492d      	ldr	r1, [pc, #180]	; (8000f5c <main+0x1a0>)
 8000ea6:	482e      	ldr	r0, [pc, #184]	; (8000f60 <main+0x1a4>)
 8000ea8:	f004 fd06 	bl	80058b8 <siprintf>
      sprintf(msg_2, "delay_2 = %d us, distance_2 = %d cm\r\n ", count_2, distance_2);
 8000eac:	4b27      	ldr	r3, [pc, #156]	; (8000f4c <main+0x190>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <main+0x18c>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	492b      	ldr	r1, [pc, #172]	; (8000f64 <main+0x1a8>)
 8000eb8:	482b      	ldr	r0, [pc, #172]	; (8000f68 <main+0x1ac>)
 8000eba:	f004 fcfd 	bl	80058b8 <siprintf>
      sprintf(msg_3, "delay_3 = %d us, distance_3 = %d cm\r\n\r\n ", count_3, distance_3);
 8000ebe:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <main+0x198>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <main+0x194>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	4928      	ldr	r1, [pc, #160]	; (8000f6c <main+0x1b0>)
 8000eca:	4829      	ldr	r0, [pc, #164]	; (8000f70 <main+0x1b4>)
 8000ecc:	f004 fcf4 	bl	80058b8 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)msg_1, strlen(msg_1), HAL_MAX_DELAY);
 8000ed0:	4823      	ldr	r0, [pc, #140]	; (8000f60 <main+0x1a4>)
 8000ed2:	f7ff f97d 	bl	80001d0 <strlen>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ede:	4920      	ldr	r1, [pc, #128]	; (8000f60 <main+0x1a4>)
 8000ee0:	4824      	ldr	r0, [pc, #144]	; (8000f74 <main+0x1b8>)
 8000ee2:	f003 ffb2 	bl	8004e4a <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, (uint8_t*)msg_2, strlen(msg_2), HAL_MAX_DELAY);
 8000ee6:	4820      	ldr	r0, [pc, #128]	; (8000f68 <main+0x1ac>)
 8000ee8:	f7ff f972 	bl	80001d0 <strlen>
 8000eec:	4603      	mov	r3, r0
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef4:	491c      	ldr	r1, [pc, #112]	; (8000f68 <main+0x1ac>)
 8000ef6:	481f      	ldr	r0, [pc, #124]	; (8000f74 <main+0x1b8>)
 8000ef8:	f003 ffa7 	bl	8004e4a <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, (uint8_t*)msg_3, strlen(msg_3), HAL_MAX_DELAY);
 8000efc:	481c      	ldr	r0, [pc, #112]	; (8000f70 <main+0x1b4>)
 8000efe:	f7ff f967 	bl	80001d0 <strlen>
 8000f02:	4603      	mov	r3, r0
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f0a:	4919      	ldr	r1, [pc, #100]	; (8000f70 <main+0x1b4>)
 8000f0c:	4819      	ldr	r0, [pc, #100]	; (8000f74 <main+0x1b8>)
 8000f0e:	f003 ff9c 	bl	8004e4a <HAL_UART_Transmit>
    if (!voice)
 8000f12:	e77d      	b.n	8000e10 <main+0x54>
 8000f14:	20000358 	.word	0x20000358
 8000f18:	20000250 	.word	0x20000250
 8000f1c:	20000130 	.word	0x20000130
 8000f20:	20000098 	.word	0x20000098
 8000f24:	200002c4 	.word	0x200002c4
 8000f28:	2000008c 	.word	0x2000008c
 8000f2c:	200001b0 	.word	0x200001b0
 8000f30:	2000008e 	.word	0x2000008e
 8000f34:	200003e4 	.word	0x200003e4
 8000f38:	20000170 	.word	0x20000170
 8000f3c:	200003e0 	.word	0x200003e0
 8000f40:	2000024c 	.word	0x2000024c
 8000f44:	40021000 	.word	0x40021000
 8000f48:	20000320 	.word	0x20000320
 8000f4c:	200000da 	.word	0x200000da
 8000f50:	20000322 	.word	0x20000322
 8000f54:	200003e2 	.word	0x200003e2
 8000f58:	40020c00 	.word	0x40020c00
 8000f5c:	080060dc 	.word	0x080060dc
 8000f60:	20000290 	.word	0x20000290
 8000f64:	08006104 	.word	0x08006104
 8000f68:	200000a8 	.word	0x200000a8
 8000f6c:	0800612c 	.word	0x0800612c
 8000f70:	20000324 	.word	0x20000324
 8000f74:	200003a0 	.word	0x200003a0

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b094      	sub	sp, #80	; 0x50
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 0320 	add.w	r3, r7, #32
 8000f82:	2230      	movs	r2, #48	; 0x30
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f004 fc8e 	bl	80058a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	4b28      	ldr	r3, [pc, #160]	; (8001044 <SystemClock_Config+0xcc>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	4a27      	ldr	r2, [pc, #156]	; (8001044 <SystemClock_Config+0xcc>)
 8000fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000faa:	6413      	str	r3, [r2, #64]	; 0x40
 8000fac:	4b25      	ldr	r3, [pc, #148]	; (8001044 <SystemClock_Config+0xcc>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	4b22      	ldr	r3, [pc, #136]	; (8001048 <SystemClock_Config+0xd0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a21      	ldr	r2, [pc, #132]	; (8001048 <SystemClock_Config+0xd0>)
 8000fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <SystemClock_Config+0xd0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fdc:	2310      	movs	r3, #16
 8000fde:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fe8:	2308      	movs	r3, #8
 8000fea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff8:	f107 0320 	add.w	r3, r7, #32
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f002 fca9 	bl	8003954 <HAL_RCC_OscConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001008:	f001 f812 	bl	8002030 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100c:	230f      	movs	r3, #15
 800100e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001010:	2302      	movs	r3, #2
 8001012:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001018:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800101c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800101e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001022:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2103      	movs	r1, #3
 800102a:	4618      	mov	r0, r3
 800102c:	f002 ff02 	bl	8003e34 <HAL_RCC_ClockConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001036:	f000 fffb 	bl	8002030 <Error_Handler>
  }
}
 800103a:	bf00      	nop
 800103c:	3750      	adds	r7, #80	; 0x50
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40007000 	.word	0x40007000

0800104c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2101      	movs	r1, #1
 8001054:	2017      	movs	r0, #23
 8001056:	f002 f8b0 	bl	80031ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800105a:	2017      	movs	r0, #23
 800105c:	f002 f8c9 	bl	80031f2 <HAL_NVIC_EnableIRQ>
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800106a:	463b      	mov	r3, r7
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <MX_ADC1_Init+0x98>)
 8001078:	4a21      	ldr	r2, [pc, #132]	; (8001100 <MX_ADC1_Init+0x9c>)
 800107a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <MX_ADC1_Init+0x98>)
 800107e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001082:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <MX_ADC1_Init+0x98>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <MX_ADC1_Init+0x98>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <MX_ADC1_Init+0x98>)
 8001092:	2200      	movs	r2, #0
 8001094:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <MX_ADC1_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <MX_ADC1_Init+0x98>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <MX_ADC1_Init+0x98>)
 80010a6:	4a17      	ldr	r2, [pc, #92]	; (8001104 <MX_ADC1_Init+0xa0>)
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_ADC1_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <MX_ADC1_Init+0x98>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_ADC1_Init+0x98>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_ADC1_Init+0x98>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <MX_ADC1_Init+0x98>)
 80010c6:	f001 fbe3 	bl	8002890 <HAL_ADC_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010d0:	f000 ffae 	bl	8002030 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80010d4:	230e      	movs	r3, #14
 80010d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010d8:	2301      	movs	r3, #1
 80010da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e0:	463b      	mov	r3, r7
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_ADC1_Init+0x98>)
 80010e6:	f001 fd6f 	bl	8002bc8 <HAL_ADC_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010f0:	f000 ff9e 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200002c4 	.word	0x200002c4
 8001100:	40012000 	.word	0x40012000
 8001104:	0f000001 	.word	0x0f000001

08001108 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800110e:	463b      	mov	r3, r7
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800111a:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <MX_ADC2_Init+0x98>)
 800111c:	4a21      	ldr	r2, [pc, #132]	; (80011a4 <MX_ADC2_Init+0x9c>)
 800111e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001120:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <MX_ADC2_Init+0x98>)
 8001122:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001126:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <MX_ADC2_Init+0x98>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <MX_ADC2_Init+0x98>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001134:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_ADC2_Init+0x98>)
 8001136:	2200      	movs	r2, #0
 8001138:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <MX_ADC2_Init+0x98>)
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_ADC2_Init+0x98>)
 8001144:	2200      	movs	r2, #0
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <MX_ADC2_Init+0x98>)
 800114a:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <MX_ADC2_Init+0xa0>)
 800114c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_ADC2_Init+0x98>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_ADC2_Init+0x98>)
 8001156:	2201      	movs	r2, #1
 8001158:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_ADC2_Init+0x98>)
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_ADC2_Init+0x98>)
 8001164:	2201      	movs	r2, #1
 8001166:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001168:	480d      	ldr	r0, [pc, #52]	; (80011a0 <MX_ADC2_Init+0x98>)
 800116a:	f001 fb91 	bl	8002890 <HAL_ADC_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001174:	f000 ff5c 	bl	8002030 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001178:	230f      	movs	r3, #15
 800117a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800117c:	2301      	movs	r3, #1
 800117e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001184:	463b      	mov	r3, r7
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_ADC2_Init+0x98>)
 800118a:	f001 fd1d 	bl	8002bc8 <HAL_ADC_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001194:	f000 ff4c 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200001b0 	.word	0x200001b0
 80011a4:	40012100 	.word	0x40012100
 80011a8:	0f000001 	.word	0x0f000001

080011ac <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011b2:	463b      	mov	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_DAC_Init+0x60>)
 80011bc:	4a14      	ldr	r2, [pc, #80]	; (8001210 <MX_DAC_Init+0x64>)
 80011be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011c0:	4812      	ldr	r0, [pc, #72]	; (800120c <MX_DAC_Init+0x60>)
 80011c2:	f002 f830 	bl	8003226 <HAL_DAC_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011cc:	f000 ff30 	bl	8002030 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011d8:	463b      	mov	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	4619      	mov	r1, r3
 80011de:	480b      	ldr	r0, [pc, #44]	; (800120c <MX_DAC_Init+0x60>)
 80011e0:	f002 f843 	bl	800326a <HAL_DAC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011ea:	f000 ff21 	bl	8002030 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80011ee:	463b      	mov	r3, r7
 80011f0:	2210      	movs	r2, #16
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_DAC_Init+0x60>)
 80011f6:	f002 f838 	bl	800326a <HAL_DAC_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001200:	f000 ff16 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2000030c 	.word	0x2000030c
 8001210:	40007400 	.word	0x40007400

08001214 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_I2C1_Init+0x50>)
 800121a:	4a13      	ldr	r2, [pc, #76]	; (8001268 <MX_I2C1_Init+0x54>)
 800121c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_I2C1_Init+0x50>)
 8001220:	4a12      	ldr	r2, [pc, #72]	; (800126c <MX_I2C1_Init+0x58>)
 8001222:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_I2C1_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_I2C1_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_I2C1_Init+0x50>)
 8001232:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001236:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <MX_I2C1_Init+0x50>)
 8001252:	f002 fa47 	bl	80036e4 <HAL_I2C_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800125c:	f000 fee8 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200001f8 	.word	0x200001f8
 8001268:	40005400 	.word	0x40005400
 800126c:	000186a0 	.word	0x000186a0

08001270 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_I2C3_Init+0x50>)
 8001276:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <MX_I2C3_Init+0x54>)
 8001278:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_I2C3_Init+0x50>)
 800127c:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <MX_I2C3_Init+0x58>)
 800127e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_I2C3_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 32;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_I2C3_Init+0x50>)
 8001288:	2220      	movs	r2, #32
 800128a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_I2C3_Init+0x50>)
 800128e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001292:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <MX_I2C3_Init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_I2C3_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <MX_I2C3_Init+0x50>)
 80012a2:	2240      	movs	r2, #64	; 0x40
 80012a4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_I2C3_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <MX_I2C3_Init+0x50>)
 80012ae:	f002 fa19 	bl	80036e4 <HAL_I2C_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80012b8:	f000 feba 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200000dc 	.word	0x200000dc
 80012c4:	40005c00 	.word	0x40005c00
 80012c8:	00061a80 	.word	0x00061a80

080012cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e0:	463b      	mov	r3, r7
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012e8:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <MX_TIM1_Init+0x98>)
 80012ea:	4a1f      	ldr	r2, [pc, #124]	; (8001368 <MX_TIM1_Init+0x9c>)
 80012ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168;
 80012ee:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <MX_TIM1_Init+0x98>)
 80012f0:	22a8      	movs	r2, #168	; 0xa8
 80012f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <MX_TIM1_Init+0x98>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_TIM1_Init+0x98>)
 80012fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001300:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_TIM1_Init+0x98>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001308:	4b16      	ldr	r3, [pc, #88]	; (8001364 <MX_TIM1_Init+0x98>)
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <MX_TIM1_Init+0x98>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001314:	4813      	ldr	r0, [pc, #76]	; (8001364 <MX_TIM1_Init+0x98>)
 8001316:	f002 ff7f 	bl	8004218 <HAL_TIM_Base_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001320:	f000 fe86 	bl	8002030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001328:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	4619      	mov	r1, r3
 8001330:	480c      	ldr	r0, [pc, #48]	; (8001364 <MX_TIM1_Init+0x98>)
 8001332:	f003 f8f9 	bl	8004528 <HAL_TIM_ConfigClockSource>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800133c:	f000 fe78 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001340:	2300      	movs	r3, #0
 8001342:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_TIM1_Init+0x98>)
 800134e:	f003 fcb3 	bl	8004cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001358:	f000 fe6a 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000358 	.word	0x20000358
 8001368:	40010000 	.word	0x40010000

0800136c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08e      	sub	sp, #56	; 0x38
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001380:	f107 0320 	add.w	r3, r7, #32
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
 8001398:	615a      	str	r2, [r3, #20]
 800139a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800139c:	4b2c      	ldr	r3, [pc, #176]	; (8001450 <MX_TIM3_Init+0xe4>)
 800139e:	4a2d      	ldr	r2, [pc, #180]	; (8001454 <MX_TIM3_Init+0xe8>)
 80013a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80;
 80013a2:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <MX_TIM3_Init+0xe4>)
 80013a4:	2250      	movs	r2, #80	; 0x50
 80013a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	4b29      	ldr	r3, [pc, #164]	; (8001450 <MX_TIM3_Init+0xe4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80013ae:	4b28      	ldr	r3, [pc, #160]	; (8001450 <MX_TIM3_Init+0xe4>)
 80013b0:	2264      	movs	r2, #100	; 0x64
 80013b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b4:	4b26      	ldr	r3, [pc, #152]	; (8001450 <MX_TIM3_Init+0xe4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b25      	ldr	r3, [pc, #148]	; (8001450 <MX_TIM3_Init+0xe4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013c0:	4823      	ldr	r0, [pc, #140]	; (8001450 <MX_TIM3_Init+0xe4>)
 80013c2:	f002 ff29 	bl	8004218 <HAL_TIM_Base_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80013cc:	f000 fe30 	bl	8002030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013da:	4619      	mov	r1, r3
 80013dc:	481c      	ldr	r0, [pc, #112]	; (8001450 <MX_TIM3_Init+0xe4>)
 80013de:	f003 f8a3 	bl	8004528 <HAL_TIM_ConfigClockSource>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80013e8:	f000 fe22 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013ec:	4818      	ldr	r0, [pc, #96]	; (8001450 <MX_TIM3_Init+0xe4>)
 80013ee:	f002 ff62 	bl	80042b6 <HAL_TIM_PWM_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80013f8:	f000 fe1a 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001404:	f107 0320 	add.w	r3, r7, #32
 8001408:	4619      	mov	r1, r3
 800140a:	4811      	ldr	r0, [pc, #68]	; (8001450 <MX_TIM3_Init+0xe4>)
 800140c:	f003 fc54 	bl	8004cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001416:	f000 fe0b 	bl	8002030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800141a:	2360      	movs	r3, #96	; 0x60
 800141c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2200      	movs	r2, #0
 800142e:	4619      	mov	r1, r3
 8001430:	4807      	ldr	r0, [pc, #28]	; (8001450 <MX_TIM3_Init+0xe4>)
 8001432:	f002 ffb3 	bl	800439c <HAL_TIM_PWM_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800143c:	f000 fdf8 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001440:	4803      	ldr	r0, [pc, #12]	; (8001450 <MX_TIM3_Init+0xe4>)
 8001442:	f000 ffcb 	bl	80023dc <HAL_TIM_MspPostInit>

}
 8001446:	bf00      	nop
 8001448:	3738      	adds	r7, #56	; 0x38
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000250 	.word	0x20000250
 8001454:	40000400 	.word	0x40000400

08001458 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	f107 0320 	add.w	r3, r7, #32
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
 8001484:	615a      	str	r2, [r3, #20]
 8001486:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001488:	4b2c      	ldr	r3, [pc, #176]	; (800153c <MX_TIM4_Init+0xe4>)
 800148a:	4a2d      	ldr	r2, [pc, #180]	; (8001540 <MX_TIM4_Init+0xe8>)
 800148c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12;
 800148e:	4b2b      	ldr	r3, [pc, #172]	; (800153c <MX_TIM4_Init+0xe4>)
 8001490:	220c      	movs	r2, #12
 8001492:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001494:	4b29      	ldr	r3, [pc, #164]	; (800153c <MX_TIM4_Init+0xe4>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800149a:	4b28      	ldr	r3, [pc, #160]	; (800153c <MX_TIM4_Init+0xe4>)
 800149c:	2264      	movs	r2, #100	; 0x64
 800149e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a0:	4b26      	ldr	r3, [pc, #152]	; (800153c <MX_TIM4_Init+0xe4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a6:	4b25      	ldr	r3, [pc, #148]	; (800153c <MX_TIM4_Init+0xe4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014ac:	4823      	ldr	r0, [pc, #140]	; (800153c <MX_TIM4_Init+0xe4>)
 80014ae:	f002 feb3 	bl	8004218 <HAL_TIM_Base_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80014b8:	f000 fdba 	bl	8002030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c6:	4619      	mov	r1, r3
 80014c8:	481c      	ldr	r0, [pc, #112]	; (800153c <MX_TIM4_Init+0xe4>)
 80014ca:	f003 f82d 	bl	8004528 <HAL_TIM_ConfigClockSource>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80014d4:	f000 fdac 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014d8:	4818      	ldr	r0, [pc, #96]	; (800153c <MX_TIM4_Init+0xe4>)
 80014da:	f002 feec 	bl	80042b6 <HAL_TIM_PWM_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80014e4:	f000 fda4 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014f0:	f107 0320 	add.w	r3, r7, #32
 80014f4:	4619      	mov	r1, r3
 80014f6:	4811      	ldr	r0, [pc, #68]	; (800153c <MX_TIM4_Init+0xe4>)
 80014f8:	f003 fbde 	bl	8004cb8 <HAL_TIMEx_MasterConfigSynchronization>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001502:	f000 fd95 	bl	8002030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001506:	2360      	movs	r3, #96	; 0x60
 8001508:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2204      	movs	r2, #4
 800151a:	4619      	mov	r1, r3
 800151c:	4807      	ldr	r0, [pc, #28]	; (800153c <MX_TIM4_Init+0xe4>)
 800151e:	f002 ff3d 	bl	800439c <HAL_TIM_PWM_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001528:	f000 fd82 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800152c:	4803      	ldr	r0, [pc, #12]	; (800153c <MX_TIM4_Init+0xe4>)
 800152e:	f000 ff55 	bl	80023dc <HAL_TIM_MspPostInit>

}
 8001532:	bf00      	nop
 8001534:	3738      	adds	r7, #56	; 0x38
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000130 	.word	0x20000130
 8001540:	40000800 	.word	0x40000800

08001544 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 800154a:	4a12      	ldr	r2, [pc, #72]	; (8001594 <MX_USART2_UART_Init+0x50>)
 800154c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 8001550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001554:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 800156a:	220c      	movs	r2, #12
 800156c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 800157c:	f003 fc18 	bl	8004db0 <HAL_UART_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001586:	f000 fd53 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200003a0 	.word	0x200003a0
 8001594:	40004400 	.word	0x40004400

08001598 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_USART3_UART_Init+0x4c>)
 800159e:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <MX_USART3_UART_Init+0x50>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <MX_USART3_UART_Init+0x4c>)
 80015a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_USART3_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_USART3_UART_Init+0x4c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <MX_USART3_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_USART3_UART_Init+0x4c>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <MX_USART3_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_USART3_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_USART3_UART_Init+0x4c>)
 80015d0:	f003 fbee 	bl	8004db0 <HAL_UART_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015da:	f000 fd29 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000170 	.word	0x20000170
 80015e8:	40004800 	.word	0x40004800

080015ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08c      	sub	sp, #48	; 0x30
 80015f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	4bb6      	ldr	r3, [pc, #728]	; (80018e0 <MX_GPIO_Init+0x2f4>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4ab5      	ldr	r2, [pc, #724]	; (80018e0 <MX_GPIO_Init+0x2f4>)
 800160c:	f043 0310 	orr.w	r3, r3, #16
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4bb3      	ldr	r3, [pc, #716]	; (80018e0 <MX_GPIO_Init+0x2f4>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	61bb      	str	r3, [r7, #24]
 800161c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	4baf      	ldr	r3, [pc, #700]	; (80018e0 <MX_GPIO_Init+0x2f4>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4aae      	ldr	r2, [pc, #696]	; (80018e0 <MX_GPIO_Init+0x2f4>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4bac      	ldr	r3, [pc, #688]	; (80018e0 <MX_GPIO_Init+0x2f4>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4ba8      	ldr	r3, [pc, #672]	; (80018e0 <MX_GPIO_Init+0x2f4>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4aa7      	ldr	r2, [pc, #668]	; (80018e0 <MX_GPIO_Init+0x2f4>)
 8001644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4ba5      	ldr	r3, [pc, #660]	; (80018e0 <MX_GPIO_Init+0x2f4>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4ba1      	ldr	r3, [pc, #644]	; (80018e0 <MX_GPIO_Init+0x2f4>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4aa0      	ldr	r2, [pc, #640]	; (80018e0 <MX_GPIO_Init+0x2f4>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b9e      	ldr	r3, [pc, #632]	; (80018e0 <MX_GPIO_Init+0x2f4>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	4b9a      	ldr	r3, [pc, #616]	; (80018e0 <MX_GPIO_Init+0x2f4>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a99      	ldr	r2, [pc, #612]	; (80018e0 <MX_GPIO_Init+0x2f4>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b97      	ldr	r3, [pc, #604]	; (80018e0 <MX_GPIO_Init+0x2f4>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	4b93      	ldr	r3, [pc, #588]	; (80018e0 <MX_GPIO_Init+0x2f4>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a92      	ldr	r2, [pc, #584]	; (80018e0 <MX_GPIO_Init+0x2f4>)
 8001698:	f043 0308 	orr.w	r3, r3, #8
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b90      	ldr	r3, [pc, #576]	; (80018e0 <MX_GPIO_Init+0x2f4>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|US4_Trig_Pin|US2_Trig_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2158      	movs	r1, #88	; 0x58
 80016ae:	488d      	ldr	r0, [pc, #564]	; (80018e4 <MX_GPIO_Init+0x2f8>)
 80016b0:	f001 ffda 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80016b4:	2201      	movs	r2, #1
 80016b6:	2101      	movs	r1, #1
 80016b8:	488b      	ldr	r0, [pc, #556]	; (80018e8 <MX_GPIO_Init+0x2fc>)
 80016ba:	f001 ffd5 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US1_Trig_GPIO_Port, US1_Trig_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016c4:	4889      	ldr	r0, [pc, #548]	; (80018ec <MX_GPIO_Init+0x300>)
 80016c6:	f001 ffcf 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HBridge_STBY_GPIO_Port, HBridge_STBY_Pin, GPIO_PIN_SET);
 80016ca:	2201      	movs	r2, #1
 80016cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016d0:	4887      	ldr	r0, [pc, #540]	; (80018f0 <MX_GPIO_Init+0x304>)
 80016d2:	f001 ffc9 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80016d6:	2200      	movs	r2, #0
 80016d8:	f24f 0112 	movw	r1, #61458	; 0xf012
 80016dc:	4884      	ldr	r0, [pc, #528]	; (80018f0 <MX_GPIO_Init+0x304>)
 80016de:	f001 ffc3 	bl	8003668 <HAL_GPIO_WritePin>
                          |US3_Trig_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : US4_Echo_Pin US2_Echo_Pin */
  GPIO_InitStruct.Pin = US4_Echo_Pin|US2_Echo_Pin;
 80016e2:	2324      	movs	r3, #36	; 0x24
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ee:	f107 031c 	add.w	r3, r7, #28
 80016f2:	4619      	mov	r1, r3
 80016f4:	487b      	ldr	r0, [pc, #492]	; (80018e4 <MX_GPIO_Init+0x2f8>)
 80016f6:	f001 fe05 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 US4_Trig_Pin US2_Trig_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|US4_Trig_Pin|US2_Trig_Pin;
 80016fa:	2358      	movs	r3, #88	; 0x58
 80016fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800170a:	f107 031c 	add.w	r3, r7, #28
 800170e:	4619      	mov	r1, r3
 8001710:	4874      	ldr	r0, [pc, #464]	; (80018e4 <MX_GPIO_Init+0x2f8>)
 8001712:	f001 fdf7 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001716:	2301      	movs	r3, #1
 8001718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001726:	f107 031c 	add.w	r3, r7, #28
 800172a:	4619      	mov	r1, r3
 800172c:	486e      	ldr	r0, [pc, #440]	; (80018e8 <MX_GPIO_Init+0x2fc>)
 800172e:	f001 fde9 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001732:	2308      	movs	r3, #8
 8001734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001742:	2305      	movs	r3, #5
 8001744:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 031c 	add.w	r3, r7, #28
 800174a:	4619      	mov	r1, r3
 800174c:	4866      	ldr	r0, [pc, #408]	; (80018e8 <MX_GPIO_Init+0x2fc>)
 800174e:	f001 fdd9 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001752:	2301      	movs	r3, #1
 8001754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001756:	4b67      	ldr	r3, [pc, #412]	; (80018f4 <MX_GPIO_Init+0x308>)
 8001758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	4619      	mov	r1, r3
 8001764:	4864      	ldr	r0, [pc, #400]	; (80018f8 <MX_GPIO_Init+0x30c>)
 8001766:	f001 fdcd 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800176a:	23c0      	movs	r3, #192	; 0xc0
 800176c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800177a:	2305      	movs	r3, #5
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f107 031c 	add.w	r3, r7, #28
 8001782:	4619      	mov	r1, r3
 8001784:	485c      	ldr	r0, [pc, #368]	; (80018f8 <MX_GPIO_Init+0x30c>)
 8001786:	f001 fdbd 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 US1_Echo_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|US1_Echo_Pin;
 800178a:	f242 0304 	movw	r3, #8196	; 0x2004
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	4619      	mov	r1, r3
 800179e:	4853      	ldr	r0, [pc, #332]	; (80018ec <MX_GPIO_Init+0x300>)
 80017a0:	f001 fdb0 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : Joystick_Button_Pin */
  GPIO_InitStruct.Pin = Joystick_Button_Pin;
 80017a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017aa:	4b54      	ldr	r3, [pc, #336]	; (80018fc <MX_GPIO_Init+0x310>)
 80017ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Joystick_Button_GPIO_Port, &GPIO_InitStruct);
 80017b2:	f107 031c 	add.w	r3, r7, #28
 80017b6:	4619      	mov	r1, r3
 80017b8:	484a      	ldr	r0, [pc, #296]	; (80018e4 <MX_GPIO_Init+0x2f8>)
 80017ba:	f001 fda3 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80017be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017d0:	2305      	movs	r3, #5
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	4844      	ldr	r0, [pc, #272]	; (80018ec <MX_GPIO_Init+0x300>)
 80017dc:	f001 fd92 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : US1_Trig_Pin */
  GPIO_InitStruct.Pin = US1_Trig_Pin;
 80017e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e6:	2301      	movs	r3, #1
 80017e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(US1_Trig_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	4619      	mov	r1, r3
 80017f8:	483c      	ldr	r0, [pc, #240]	; (80018ec <MX_GPIO_Init+0x300>)
 80017fa:	f001 fd83 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : HBridge_STBY_Pin */
  GPIO_InitStruct.Pin = HBridge_STBY_Pin;
 80017fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001804:	2311      	movs	r3, #17
 8001806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HBridge_STBY_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	4619      	mov	r1, r3
 8001816:	4836      	ldr	r0, [pc, #216]	; (80018f0 <MX_GPIO_Init+0x304>)
 8001818:	f001 fd74 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           US3_Trig_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800181c:	f24f 0312 	movw	r3, #61458	; 0xf012
 8001820:	61fb      	str	r3, [r7, #28]
                          |US3_Trig_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	2301      	movs	r3, #1
 8001824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	4619      	mov	r1, r3
 8001834:	482e      	ldr	r0, [pc, #184]	; (80018f0 <MX_GPIO_Init+0x304>)
 8001836:	f001 fd65 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800183a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800183e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800184c:	2306      	movs	r3, #6
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	4619      	mov	r1, r3
 8001856:	4824      	ldr	r0, [pc, #144]	; (80018e8 <MX_GPIO_Init+0x2fc>)
 8001858:	f001 fd54 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800185c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	4619      	mov	r1, r3
 8001870:	4821      	ldr	r0, [pc, #132]	; (80018f8 <MX_GPIO_Init+0x30c>)
 8001872:	f001 fd47 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001876:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800187a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001888:	230a      	movs	r3, #10
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	4619      	mov	r1, r3
 8001892:	4819      	ldr	r0, [pc, #100]	; (80018f8 <MX_GPIO_Init+0x30c>)
 8001894:	f001 fd36 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pins : US3_Echo_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = US3_Echo_Pin|OTG_FS_OverCurrent_Pin;
 8001898:	2324      	movs	r3, #36	; 0x24
 800189a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	4619      	mov	r1, r3
 80018aa:	4811      	ldr	r0, [pc, #68]	; (80018f0 <MX_GPIO_Init+0x304>)
 80018ac:	f001 fd2a 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80018b0:	2302      	movs	r3, #2
 80018b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <MX_GPIO_Init+0x314>)
 80018b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	4619      	mov	r1, r3
 80018c2:	4808      	ldr	r0, [pc, #32]	; (80018e4 <MX_GPIO_Init+0x2f8>)
 80018c4:	f001 fd1e 	bl	8003304 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2100      	movs	r1, #0
 80018cc:	2006      	movs	r0, #6
 80018ce:	f001 fc74 	bl	80031ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018d2:	2006      	movs	r0, #6
 80018d4:	f001 fc8d 	bl	80031f2 <HAL_NVIC_EnableIRQ>

}
 80018d8:	bf00      	nop
 80018da:	3730      	adds	r7, #48	; 0x30
 80018dc:	46bd      	mov	sp, r7
 80018de:	e011      	b.n	8001904 <MX_GPIO_Init+0x318>
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40020800 	.word	0x40020800
 80018ec:	40020400 	.word	0x40020400
 80018f0:	40020c00 	.word	0x40020c00
 80018f4:	10110000 	.word	0x10110000
 80018f8:	40020000 	.word	0x40020000
 80018fc:	10210000 	.word	0x10210000
 8001900:	10120000 	.word	0x10120000
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop

08001908 <ADC_Read>:
 *  @brief Read ADC value
 *  @param pointer to ADC handler
 *  @retval ADC value
 */
static uint16_t ADC_Read(ADC_HandleTypeDef* handler)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  HAL_ADC_Start(handler);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f001 f801 	bl	8002918 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(handler, HAL_MAX_DELAY);
 8001916:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f001 f8c2 	bl	8002aa4 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(handler);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f001 f943 	bl	8002bac <HAL_ADC_GetValue>
 8001926:	4603      	mov	r3, r0
 8001928:	b29b      	uxth	r3, r3
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <manual_driving>:
 *  @brief Manual driving mode, set GPIOs and PWM
 *  @param None
 *  @retval None
 */
static void manual_driving(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  if (ADC_1 < (STICK_Y_MID - STICK_MARGIN)) // y is 0
 8001938:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <manual_driving+0xbc>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	f240 723b 	movw	r2, #1851	; 0x73b
 8001940:	4293      	cmp	r3, r2
 8001942:	d802      	bhi.n	800194a <manual_driving+0x16>
  {
  	// Case I, II, or III
  	backward();
 8001944:	f000 f8e0 	bl	8001b08 <backward>
 8001948:	e025      	b.n	8001996 <manual_driving+0x62>
  }
  else if (ADC_1 > (STICK_Y_MID + STICK_MARGIN))
 800194a:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <manual_driving+0xbc>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	f640 1294 	movw	r2, #2452	; 0x994
 8001952:	4293      	cmp	r3, r2
 8001954:	d902      	bls.n	800195c <manual_driving+0x28>
  {
  	// Case VII, VIII, or IX
  	forward();
 8001956:	f000 f983 	bl	8001c60 <forward>
 800195a:	e01c      	b.n	8001996 <manual_driving+0x62>
  }
  else
  {
    if (ADC_2 > (STICK_X_MID + STICK_MARGIN))
 800195c:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <manual_driving+0xc0>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	f640 121d 	movw	r2, #2333	; 0x91d
 8001964:	4293      	cmp	r3, r2
 8001966:	d905      	bls.n	8001974 <manual_driving+0x40>
    {
	    // Case IV
    	counterclockwise();
 8001968:	f000 fa86 	bl	8001e78 <counterclockwise>
    	CASE = 4;
 800196c:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <manual_driving+0xc4>)
 800196e:	2204      	movs	r2, #4
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	e010      	b.n	8001996 <manual_driving+0x62>
    }
    else if (ADC_2 < (STICK_X_MID - STICK_MARGIN))
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <manual_driving+0xc0>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	f240 62c4 	movw	r2, #1732	; 0x6c4
 800197c:	4293      	cmp	r3, r2
 800197e:	d805      	bhi.n	800198c <manual_driving+0x58>
    {
	    // Case VI
    	clockwise();
 8001980:	f000 fa38 	bl	8001df4 <clockwise>
    	CASE = 6;
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <manual_driving+0xc4>)
 8001986:	2206      	movs	r2, #6
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	e004      	b.n	8001996 <manual_driving+0x62>
    }
    else
    {
      // Case V
      stop();
 800198c:	f000 fa0c 	bl	8001da8 <stop>
      CASE = 5;
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <manual_driving+0xc4>)
 8001992:	2205      	movs	r2, #5
 8001994:	601a      	str	r2, [r3, #0]
    }
  }
  // updating GPIO value
  HAL_GPIO_WritePin(BRIDGE_GPIO, BRIDGE_PIN_1, BRIDGE_PIN_1_State);
 8001996:	4b19      	ldr	r3, [pc, #100]	; (80019fc <manual_driving+0xc8>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a0:	4817      	ldr	r0, [pc, #92]	; (8001a00 <manual_driving+0xcc>)
 80019a2:	f001 fe61 	bl	8003668 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BRIDGE_GPIO, BRIDGE_PIN_2, BRIDGE_PIN_2_State);
 80019a6:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <manual_driving+0xd0>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019b0:	4813      	ldr	r0, [pc, #76]	; (8001a00 <manual_driving+0xcc>)
 80019b2:	f001 fe59 	bl	8003668 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BRIDGE_GPIO, BRIDGE_PIN_3, BRIDGE_PIN_3_State);
 80019b6:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <manual_driving+0xd4>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019c0:	480f      	ldr	r0, [pc, #60]	; (8001a00 <manual_driving+0xcc>)
 80019c2:	f001 fe51 	bl	8003668 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BRIDGE_GPIO, BRIDGE_PIN_4, BRIDGE_PIN_4_State);
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <manual_driving+0xd8>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d0:	480b      	ldr	r0, [pc, #44]	; (8001a00 <manual_driving+0xcc>)
 80019d2:	f001 fe49 	bl	8003668 <HAL_GPIO_WritePin>
  // updating PWM value
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_1);
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <manual_driving+0xdc>)
 80019d8:	881a      	ldrh	r2, [r3, #0]
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <manual_driving+0xe0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, PWM_2);
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <manual_driving+0xe4>)
 80019e2:	881a      	ldrh	r2, [r3, #0]
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <manual_driving+0xe8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	2000008c 	.word	0x2000008c
 80019f4:	2000008e 	.word	0x2000008e
 80019f8:	2000039c 	.word	0x2000039c
 80019fc:	20000094 	.word	0x20000094
 8001a00:	40020c00 	.word	0x40020c00
 8001a04:	20000095 	.word	0x20000095
 8001a08:	20000096 	.word	0x20000096
 8001a0c:	20000097 	.word	0x20000097
 8001a10:	20000090 	.word	0x20000090
 8001a14:	20000250 	.word	0x20000250
 8001a18:	20000092 	.word	0x20000092
 8001a1c:	20000130 	.word	0x20000130

08001a20 <voice_driving>:
 *  @brief Auto driving mode, set GPIOs and PWM
 *  @param None
 *  @retval None
 */
static void voice_driving()
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  if (cmd[0] =='f')
 8001a24:	4b2e      	ldr	r3, [pc, #184]	; (8001ae0 <voice_driving+0xc0>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b66      	cmp	r3, #102	; 0x66
 8001a2c:	d102      	bne.n	8001a34 <voice_driving+0x14>
  {
    backward();
 8001a2e:	f000 f86b 	bl	8001b08 <backward>
 8001a32:	e011      	b.n	8001a58 <voice_driving+0x38>
  }
  else if (cmd[0] == 'l')
 8001a34:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <voice_driving+0xc0>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b6c      	cmp	r3, #108	; 0x6c
 8001a3c:	d102      	bne.n	8001a44 <voice_driving+0x24>
  {
    counterclockwise();
 8001a3e:	f000 fa1b 	bl	8001e78 <counterclockwise>
 8001a42:	e009      	b.n	8001a58 <voice_driving+0x38>
  }
  else if (cmd[0] == 'r')
 8001a44:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <voice_driving+0xc0>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b72      	cmp	r3, #114	; 0x72
 8001a4c:	d102      	bne.n	8001a54 <voice_driving+0x34>
  {
    clockwise();
 8001a4e:	f000 f9d1 	bl	8001df4 <clockwise>
 8001a52:	e001      	b.n	8001a58 <voice_driving+0x38>
  }
  else
  {
    stop();
 8001a54:	f000 f9a8 	bl	8001da8 <stop>
  }
  PWM_1 = VOICE_PWM;
 8001a58:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <voice_driving+0xc4>)
 8001a5a:	2232      	movs	r2, #50	; 0x32
 8001a5c:	801a      	strh	r2, [r3, #0]
  PWM_2 = VOICE_PWM;
 8001a5e:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <voice_driving+0xc8>)
 8001a60:	2232      	movs	r2, #50	; 0x32
 8001a62:	801a      	strh	r2, [r3, #0]
  // updating GPIO value
  HAL_GPIO_WritePin(BRIDGE_GPIO, BRIDGE_PIN_1, BRIDGE_PIN_1_State);
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <voice_driving+0xcc>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a6e:	4820      	ldr	r0, [pc, #128]	; (8001af0 <voice_driving+0xd0>)
 8001a70:	f001 fdfa 	bl	8003668 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BRIDGE_GPIO, BRIDGE_PIN_2, BRIDGE_PIN_2_State);
 8001a74:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <voice_driving+0xd4>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a7e:	481c      	ldr	r0, [pc, #112]	; (8001af0 <voice_driving+0xd0>)
 8001a80:	f001 fdf2 	bl	8003668 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BRIDGE_GPIO, BRIDGE_PIN_3, BRIDGE_PIN_3_State);
 8001a84:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <voice_driving+0xd8>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a8e:	4818      	ldr	r0, [pc, #96]	; (8001af0 <voice_driving+0xd0>)
 8001a90:	f001 fdea 	bl	8003668 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BRIDGE_GPIO, BRIDGE_PIN_4, BRIDGE_PIN_4_State);
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <voice_driving+0xdc>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a9e:	4814      	ldr	r0, [pc, #80]	; (8001af0 <voice_driving+0xd0>)
 8001aa0:	f001 fde2 	bl	8003668 <HAL_GPIO_WritePin>
  // updating PWM value
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_1);
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <voice_driving+0xc4>)
 8001aa6:	881a      	ldrh	r2, [r3, #0]
 8001aa8:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <voice_driving+0xe0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, PWM_2);
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <voice_driving+0xc8>)
 8001ab0:	881a      	ldrh	r2, [r3, #0]
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <voice_driving+0xe4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	639a      	str	r2, [r3, #56]	; 0x38
  if (cmd[0] == 'l' || cmd[0] == 'r') {
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <voice_driving+0xc0>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b6c      	cmp	r3, #108	; 0x6c
 8001ac0:	d004      	beq.n	8001acc <voice_driving+0xac>
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <voice_driving+0xc0>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b72      	cmp	r3, #114	; 0x72
 8001aca:	d106      	bne.n	8001ada <voice_driving+0xba>
    HAL_Delay(1000);
 8001acc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ad0:	f000 febc 	bl	800284c <HAL_Delay>
    cmd[0] = ' ';
 8001ad4:	4b02      	ldr	r3, [pc, #8]	; (8001ae0 <voice_driving+0xc0>)
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	701a      	strb	r2, [r3, #0]
  }
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200003e4 	.word	0x200003e4
 8001ae4:	20000090 	.word	0x20000090
 8001ae8:	20000092 	.word	0x20000092
 8001aec:	20000094 	.word	0x20000094
 8001af0:	40020c00 	.word	0x40020c00
 8001af4:	20000095 	.word	0x20000095
 8001af8:	20000096 	.word	0x20000096
 8001afc:	20000097 	.word	0x20000097
 8001b00:	20000250 	.word	0x20000250
 8001b04:	20000130 	.word	0x20000130

08001b08 <backward>:
 * 	@brief Driving control case I, IV, VII: forward and/or turn
 * 	@param None
 * 	@retval None
 */
static void backward()
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
	// motor direction
	BRIDGE_PIN_1_State = GPIO_PIN_SET;
 8001b0e:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <backward+0x124>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	701a      	strb	r2, [r3, #0]
	BRIDGE_PIN_2_State = GPIO_PIN_RESET;
 8001b14:	4b46      	ldr	r3, [pc, #280]	; (8001c30 <backward+0x128>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
	BRIDGE_PIN_3_State = GPIO_PIN_SET;
 8001b1a:	4b46      	ldr	r3, [pc, #280]	; (8001c34 <backward+0x12c>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]
	BRIDGE_PIN_4_State = GPIO_PIN_RESET;
 8001b20:	4b45      	ldr	r3, [pc, #276]	; (8001c38 <backward+0x130>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
	// PWM Mapping
	float PosY_Percent =
	    (float)(STICK_Y_MID - ADC_1) / STICK_Y_MID * PWM_DUTY_MAX;
 8001b26:	4b45      	ldr	r3, [pc, #276]	; (8001c3c <backward+0x134>)
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	f5c3 6306 	rsb	r3, r3, #2144	; 0x860
 8001b2e:	3308      	adds	r3, #8
 8001b30:	ee07 3a90 	vmov	s15, r3
 8001b34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b38:	eddf 6a41 	vldr	s13, [pc, #260]	; 8001c40 <backward+0x138>
 8001b3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	float PosY_Percent =
 8001b40:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001c44 <backward+0x13c>
 8001b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b48:	edc7 7a01 	vstr	s15, [r7, #4]
	if (ADC_2 > (STICK_X_MID + STICK_MARGIN))
 8001b4c:	4b3e      	ldr	r3, [pc, #248]	; (8001c48 <backward+0x140>)
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	f640 121d 	movw	r2, #2333	; 0x91d
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d927      	bls.n	8001ba8 <backward+0xa0>
	{
	  // Case I
    PWM_2 = PosY_Percent;
 8001b58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b60:	ee17 3a90 	vmov	r3, s15
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	4b39      	ldr	r3, [pc, #228]	; (8001c4c <backward+0x144>)
 8001b68:	801a      	strh	r2, [r3, #0]
    PWM_1 = (float)(ADC_MAX - ADC_2) / (ADC_MAX - STICK_X_MID) * PWM_2;
 8001b6a:	4b37      	ldr	r3, [pc, #220]	; (8001c48 <backward+0x140>)
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7a:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001c50 <backward+0x148>
 8001b7e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b82:	4b32      	ldr	r3, [pc, #200]	; (8001c4c <backward+0x144>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b96:	ee17 3a90 	vmov	r3, s15
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <backward+0x14c>)
 8001b9e:	801a      	strh	r2, [r3, #0]
    CASE = 1;
 8001ba0:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <backward+0x150>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]
	  // Case II
	  PWM_1 = PosY_Percent;
	  PWM_2 = PWM_1;
	  CASE = 2;
	}
}
 8001ba6:	e03b      	b.n	8001c20 <backward+0x118>
	else if (ADC_2 < (STICK_X_MID - STICK_MARGIN))
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <backward+0x140>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	f240 62c4 	movw	r2, #1732	; 0x6c4
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d825      	bhi.n	8001c00 <backward+0xf8>
	  PWM_1 = PosY_Percent;
 8001bb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bbc:	ee17 3a90 	vmov	r3, s15
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <backward+0x14c>)
 8001bc4:	801a      	strh	r2, [r3, #0]
    PWM_2 = (float)ADC_2 / STICK_X_MID * PWM_1;
 8001bc6:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <backward+0x140>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	ee07 3a90 	vmov	s15, r3
 8001bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bd2:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001c5c <backward+0x154>
 8001bd6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bda:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <backward+0x14c>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	ee07 3a90 	vmov	s15, r3
 8001be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bee:	ee17 3a90 	vmov	r3, s15
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <backward+0x144>)
 8001bf6:	801a      	strh	r2, [r3, #0]
    CASE = 3;
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <backward+0x150>)
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	601a      	str	r2, [r3, #0]
}
 8001bfe:	e00f      	b.n	8001c20 <backward+0x118>
	  PWM_1 = PosY_Percent;
 8001c00:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c08:	ee17 3a90 	vmov	r3, s15
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <backward+0x14c>)
 8001c10:	801a      	strh	r2, [r3, #0]
	  PWM_2 = PWM_1;
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <backward+0x14c>)
 8001c14:	881a      	ldrh	r2, [r3, #0]
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <backward+0x144>)
 8001c18:	801a      	strh	r2, [r3, #0]
	  CASE = 2;
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <backward+0x150>)
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	601a      	str	r2, [r3, #0]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	20000094 	.word	0x20000094
 8001c30:	20000095 	.word	0x20000095
 8001c34:	20000096 	.word	0x20000096
 8001c38:	20000097 	.word	0x20000097
 8001c3c:	2000008c 	.word	0x2000008c
 8001c40:	45068000 	.word	0x45068000
 8001c44:	42c80000 	.word	0x42c80000
 8001c48:	2000008e 	.word	0x2000008e
 8001c4c:	20000092 	.word	0x20000092
 8001c50:	4500f000 	.word	0x4500f000
 8001c54:	20000090 	.word	0x20000090
 8001c58:	2000039c 	.word	0x2000039c
 8001c5c:	44fe2000 	.word	0x44fe2000

08001c60 <forward>:
 * 	@brief Driving control case III, VI, IX: backward and/or turn
 * 	@param None
 * 	@retval None
 */
static void forward()
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
	// motor direction
	BRIDGE_PIN_1_State = GPIO_PIN_RESET;
 8001c66:	4b43      	ldr	r3, [pc, #268]	; (8001d74 <forward+0x114>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_2_State = GPIO_PIN_SET;
 8001c6c:	4b42      	ldr	r3, [pc, #264]	; (8001d78 <forward+0x118>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_3_State = GPIO_PIN_RESET;
 8001c72:	4b42      	ldr	r3, [pc, #264]	; (8001d7c <forward+0x11c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_4_State = GPIO_PIN_SET;
 8001c78:	4b41      	ldr	r3, [pc, #260]	; (8001d80 <forward+0x120>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
	// PWM Mapping
	float NegY_Percent =
	    (float)(ADC_1 - STICK_Y_MID) / (ADC_MAX - STICK_Y_MID) * PWM_DUTY_MAX;
 8001c7e:	4b41      	ldr	r3, [pc, #260]	; (8001d84 <forward+0x124>)
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 8001c86:	ee07 3a90 	vmov	s15, r3
 8001c8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c8e:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001d88 <forward+0x128>
 8001c92:	eec7 7a26 	vdiv.f32	s15, s14, s13
	float NegY_Percent =
 8001c96:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001d8c <forward+0x12c>
 8001c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c9e:	edc7 7a01 	vstr	s15, [r7, #4]
  if (ADC_2 > (STICK_X_MID + STICK_MARGIN))
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <forward+0x130>)
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	f640 121d 	movw	r2, #2333	; 0x91d
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d923      	bls.n	8001cf6 <forward+0x96>
  {
    // Case VII
    PWM_2 = NegY_Percent;
 8001cae:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cb6:	ee17 3a90 	vmov	r3, s15
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	4b35      	ldr	r3, [pc, #212]	; (8001d94 <forward+0x134>)
 8001cbe:	801a      	strh	r2, [r3, #0]
    PWM_1 = (float)(ADC_MAX - ADC_2) / (ADC_MAX - STICK_X_MID) * PWM_DUTY_MAX;
 8001cc0:	4b33      	ldr	r3, [pc, #204]	; (8001d90 <forward+0x130>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001cc8:	ee07 3a90 	vmov	s15, r3
 8001ccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cd0:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001d98 <forward+0x138>
 8001cd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd8:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001d8c <forward+0x12c>
 8001cdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ce4:	ee17 3a90 	vmov	r3, s15
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	4b2c      	ldr	r3, [pc, #176]	; (8001d9c <forward+0x13c>)
 8001cec:	801a      	strh	r2, [r3, #0]
    CASE = 7;
 8001cee:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <forward+0x140>)
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	601a      	str	r2, [r3, #0]
    // Case VIII
    PWM_1 = NegY_Percent;
    PWM_2 = PWM_1;
    CASE = 8;
  }
}
 8001cf4:	e037      	b.n	8001d66 <forward+0x106>
  else if (ADC_2 < (STICK_X_MID - STICK_MARGIN))
 8001cf6:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <forward+0x130>)
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	f240 62c4 	movw	r2, #1732	; 0x6c4
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d821      	bhi.n	8001d46 <forward+0xe6>
    PWM_1 = NegY_Percent;
 8001d02:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d0a:	ee17 3a90 	vmov	r3, s15
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <forward+0x13c>)
 8001d12:	801a      	strh	r2, [r3, #0]
    PWM_2 = (float)ADC_2 / STICK_X_MID * PWM_DUTY_MAX;
 8001d14:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <forward+0x130>)
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	ee07 3a90 	vmov	s15, r3
 8001d1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d20:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001da4 <forward+0x144>
 8001d24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d28:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001d8c <forward+0x12c>
 8001d2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d34:	ee17 3a90 	vmov	r3, s15
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <forward+0x134>)
 8001d3c:	801a      	strh	r2, [r3, #0]
    CASE = 9;
 8001d3e:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <forward+0x140>)
 8001d40:	2209      	movs	r2, #9
 8001d42:	601a      	str	r2, [r3, #0]
}
 8001d44:	e00f      	b.n	8001d66 <forward+0x106>
    PWM_1 = NegY_Percent;
 8001d46:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d4e:	ee17 3a90 	vmov	r3, s15
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <forward+0x13c>)
 8001d56:	801a      	strh	r2, [r3, #0]
    PWM_2 = PWM_1;
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <forward+0x13c>)
 8001d5a:	881a      	ldrh	r2, [r3, #0]
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <forward+0x134>)
 8001d5e:	801a      	strh	r2, [r3, #0]
    CASE = 8;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <forward+0x140>)
 8001d62:	2208      	movs	r2, #8
 8001d64:	601a      	str	r2, [r3, #0]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000094 	.word	0x20000094
 8001d78:	20000095 	.word	0x20000095
 8001d7c:	20000096 	.word	0x20000096
 8001d80:	20000097 	.word	0x20000097
 8001d84:	2000008c 	.word	0x2000008c
 8001d88:	44f30000 	.word	0x44f30000
 8001d8c:	42c80000 	.word	0x42c80000
 8001d90:	2000008e 	.word	0x2000008e
 8001d94:	20000092 	.word	0x20000092
 8001d98:	4500f000 	.word	0x4500f000
 8001d9c:	20000090 	.word	0x20000090
 8001da0:	2000039c 	.word	0x2000039c
 8001da4:	44fe2000 	.word	0x44fe2000

08001da8 <stop>:
 *  @brief Driving control case V: stop
 *  @param None
 *  @retval None
 */
static void stop()
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
	// motor direction
	BRIDGE_PIN_1_State = GPIO_PIN_RESET;
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <stop+0x34>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_2_State = GPIO_PIN_RESET;
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <stop+0x38>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_3_State = GPIO_PIN_RESET;
 8001db8:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <stop+0x3c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_4_State = GPIO_PIN_RESET;
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <stop+0x40>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
	// PWM mapping
	PWM_1 = 0;
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <stop+0x44>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	801a      	strh	r2, [r3, #0]
	PWM_2 = 0;
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <stop+0x48>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	801a      	strh	r2, [r3, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000094 	.word	0x20000094
 8001de0:	20000095 	.word	0x20000095
 8001de4:	20000096 	.word	0x20000096
 8001de8:	20000097 	.word	0x20000097
 8001dec:	20000090 	.word	0x20000090
 8001df0:	20000092 	.word	0x20000092

08001df4 <clockwise>:
 *  @brief Driving control case VII: rotate clockwise
 *  @param None
 *  @retval None
 */
static void clockwise()
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
	// motor direction
	BRIDGE_PIN_1_State = GPIO_PIN_SET;
 8001df8:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <clockwise+0x60>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_2_State = GPIO_PIN_RESET;
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <clockwise+0x64>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_3_State = GPIO_PIN_RESET;
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <clockwise+0x68>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_4_State = GPIO_PIN_SET;
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <clockwise+0x6c>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
	// PWM mapping
	PWM_1 = (float)(STICK_Y_MID - ADC_2) / STICK_Y_MID * PWM_DUTY_MAX;
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <clockwise+0x70>)
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	f5c3 6306 	rsb	r3, r3, #2144	; 0x860
 8001e18:	3308      	adds	r3, #8
 8001e1a:	ee07 3a90 	vmov	s15, r3
 8001e1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e22:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001e68 <clockwise+0x74>
 8001e26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e2a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001e6c <clockwise+0x78>
 8001e2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e36:	ee17 3a90 	vmov	r3, s15
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <clockwise+0x7c>)
 8001e3e:	801a      	strh	r2, [r3, #0]
	PWM_2 = PWM_1;
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <clockwise+0x7c>)
 8001e42:	881a      	ldrh	r2, [r3, #0]
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <clockwise+0x80>)
 8001e46:	801a      	strh	r2, [r3, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000094 	.word	0x20000094
 8001e58:	20000095 	.word	0x20000095
 8001e5c:	20000096 	.word	0x20000096
 8001e60:	20000097 	.word	0x20000097
 8001e64:	2000008e 	.word	0x2000008e
 8001e68:	45068000 	.word	0x45068000
 8001e6c:	42c80000 	.word	0x42c80000
 8001e70:	20000090 	.word	0x20000090
 8001e74:	20000092 	.word	0x20000092

08001e78 <counterclockwise>:
 *  @brief Driving control case II: rotate counter-clockwise
 *  @param None
 *  @retval None
 */
static void counterclockwise()
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
	// motor direction
	BRIDGE_PIN_1_State = GPIO_PIN_RESET;
 8001e7c:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <counterclockwise+0x5c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_2_State = GPIO_PIN_SET;
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <counterclockwise+0x60>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_3_State = GPIO_PIN_SET;
 8001e88:	4b14      	ldr	r3, [pc, #80]	; (8001edc <counterclockwise+0x64>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
  BRIDGE_PIN_4_State = GPIO_PIN_RESET;
 8001e8e:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <counterclockwise+0x68>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
	// PWM mapping
	PWM_1 = (float)(ADC_2 - STICK_Y_MID) / (ADC_MAX - STICK_Y_MID) * PWM_DUTY_MAX;
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <counterclockwise+0x6c>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 8001e9c:	ee07 3a90 	vmov	s15, r3
 8001ea0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ea4:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001ee8 <counterclockwise+0x70>
 8001ea8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eac:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001eec <counterclockwise+0x74>
 8001eb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eb8:	ee17 3a90 	vmov	r3, s15
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <counterclockwise+0x78>)
 8001ec0:	801a      	strh	r2, [r3, #0]
	PWM_2 = PWM_1;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <counterclockwise+0x78>)
 8001ec4:	881a      	ldrh	r2, [r3, #0]
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <counterclockwise+0x7c>)
 8001ec8:	801a      	strh	r2, [r3, #0]
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	20000094 	.word	0x20000094
 8001ed8:	20000095 	.word	0x20000095
 8001edc:	20000096 	.word	0x20000096
 8001ee0:	20000097 	.word	0x20000097
 8001ee4:	2000008e 	.word	0x2000008e
 8001ee8:	44f30000 	.word	0x44f30000
 8001eec:	42c80000 	.word	0x42c80000
 8001ef0:	20000090 	.word	0x20000090
 8001ef4:	20000092 	.word	0x20000092

08001ef8 <Ultrasonic_Read>:
 *  @param GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin
 *  @retval None
 */
static void Ultrasonic_Read(GPIO_TypeDef* GPIOx, uint16_t Trig_Pin,
    uint16_t Echo_Pin, uint16_t* count, uint16_t* distance)
{
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	817b      	strh	r3, [r7, #10]
 8001f06:	4613      	mov	r3, r2
 8001f08:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(GPIOx, Trig_Pin, GPIO_PIN_SET);
 8001f0a:	897b      	ldrh	r3, [r7, #10]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4619      	mov	r1, r3
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f001 fba9 	bl	8003668 <HAL_GPIO_WritePin>
  Delay_us(10);
 8001f16:	200a      	movs	r0, #10
 8001f18:	f000 f856 	bl	8001fc8 <Delay_us>
  HAL_GPIO_WritePin(GPIOx, Trig_Pin, GPIO_PIN_RESET);
 8001f1c:	897b      	ldrh	r3, [r7, #10]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	4619      	mov	r1, r3
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f001 fba0 	bl	8003668 <HAL_GPIO_WritePin>
  while (HAL_GPIO_ReadPin(GPIOx, Echo_Pin) == GPIO_PIN_RESET);
 8001f28:	bf00      	nop
 8001f2a:	893b      	ldrh	r3, [r7, #8]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f001 fb82 	bl	8003638 <HAL_GPIO_ReadPin>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f7      	beq.n	8001f2a <Ultrasonic_Read+0x32>
  Reset_Timer_us();
 8001f3a:	f000 f85d 	bl	8001ff8 <Reset_Timer_us>
  while ((HAL_GPIO_ReadPin(GPIOx, Echo_Pin) == GPIO_PIN_SET) && (Get_Timer_us() < 65535));
 8001f3e:	bf00      	nop
 8001f40:	893b      	ldrh	r3, [r7, #8]
 8001f42:	4619      	mov	r1, r3
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f001 fb77 	bl	8003638 <HAL_GPIO_ReadPin>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d107      	bne.n	8001f60 <Ultrasonic_Read+0x68>
 8001f50:	f000 f860 	bl	8002014 <Get_Timer_us>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
 8001f58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d1ef      	bne.n	8001f40 <Ultrasonic_Read+0x48>
  *count = Get_Timer_us();
 8001f60:	f000 f858 	bl	8002014 <Get_Timer_us>
 8001f64:	4603      	mov	r3, r0
 8001f66:	461a      	mov	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	801a      	strh	r2, [r3, #0]
  *distance = (float)(0.0343 * (*count) / 2);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fad7 	bl	8000524 <__aeabi_i2d>
 8001f76:	a312      	add	r3, pc, #72	; (adr r3, 8001fc0 <Ultrasonic_Read+0xc8>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	f7fe fb3c 	bl	80005f8 <__aeabi_dmul>
 8001f80:	4603      	mov	r3, r0
 8001f82:	460c      	mov	r4, r1
 8001f84:	4618      	mov	r0, r3
 8001f86:	4621      	mov	r1, r4
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f90:	f7fe fc5c 	bl	800084c <__aeabi_ddiv>
 8001f94:	4603      	mov	r3, r0
 8001f96:	460c      	mov	r4, r1
 8001f98:	4618      	mov	r0, r3
 8001f9a:	4621      	mov	r1, r4
 8001f9c:	f7fe fd3e 	bl	8000a1c <__aeabi_d2f>
 8001fa0:	ee07 0a90 	vmov	s15, r0
 8001fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fa8:	ee17 3a90 	vmov	r3, s15
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	801a      	strh	r2, [r3, #0]
}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd90      	pop	{r4, r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	f3af 8000 	nop.w
 8001fc0:	04816f00 	.word	0x04816f00
 8001fc4:	3fa18fc5 	.word	0x3fa18fc5

08001fc8 <Delay_us>:
 *  @brief Microsecond delay
 *  @param None
 *  @retval None
 */
static void Delay_us(uint16_t delay)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER (&htim1, 0);
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <Delay_us+0x2c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8001fda:	bf00      	nop
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <Delay_us+0x2c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d3f9      	bcc.n	8001fdc <Delay_us+0x14>
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	20000358 	.word	0x20000358

08001ff8 <Reset_Timer_us>:
/**
 *  @brief Reset Microsecond timer
 *  @param None
 *  @retval None
 */
static void Reset_Timer_us(){
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COUNTER (&htim1, 0);
 8001ffc:	4b04      	ldr	r3, [pc, #16]	; (8002010 <Reset_Timer_us+0x18>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2200      	movs	r2, #0
 8002002:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000358 	.word	0x20000358

08002014 <Get_Timer_us>:
 *  @brief Get Microsecond timer current count
 *  @param None
 *  @retval None
 */
static uint16_t Get_Timer_us()
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return __HAL_TIM_GET_COUNTER(&htim1);
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <Get_Timer_us+0x18>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	b29b      	uxth	r3, r3
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000358 	.word	0x20000358

08002030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_MspInit+0x4c>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	4a0f      	ldr	r2, [pc, #60]	; (800208c <HAL_MspInit+0x4c>)
 8002050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002054:	6453      	str	r3, [r2, #68]	; 0x44
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_MspInit+0x4c>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_MspInit+0x4c>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a08      	ldr	r2, [pc, #32]	; (800208c <HAL_MspInit+0x4c>)
 800206c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_MspInit+0x4c>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800

08002090 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08c      	sub	sp, #48	; 0x30
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 031c 	add.w	r3, r7, #28
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a2e      	ldr	r2, [pc, #184]	; (8002168 <HAL_ADC_MspInit+0xd8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d128      	bne.n	8002104 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
 80020b6:	4b2d      	ldr	r3, [pc, #180]	; (800216c <HAL_ADC_MspInit+0xdc>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	4a2c      	ldr	r2, [pc, #176]	; (800216c <HAL_ADC_MspInit+0xdc>)
 80020bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c0:	6453      	str	r3, [r2, #68]	; 0x44
 80020c2:	4b2a      	ldr	r3, [pc, #168]	; (800216c <HAL_ADC_MspInit+0xdc>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ca:	61bb      	str	r3, [r7, #24]
 80020cc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	4b26      	ldr	r3, [pc, #152]	; (800216c <HAL_ADC_MspInit+0xdc>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a25      	ldr	r2, [pc, #148]	; (800216c <HAL_ADC_MspInit+0xdc>)
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b23      	ldr	r3, [pc, #140]	; (800216c <HAL_ADC_MspInit+0xdc>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PC4     ------> ADC1_IN14 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020ea:	2310      	movs	r3, #16
 80020ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ee:	2303      	movs	r3, #3
 80020f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f6:	f107 031c 	add.w	r3, r7, #28
 80020fa:	4619      	mov	r1, r3
 80020fc:	481c      	ldr	r0, [pc, #112]	; (8002170 <HAL_ADC_MspInit+0xe0>)
 80020fe:	f001 f901 	bl	8003304 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002102:	e02c      	b.n	800215e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a1a      	ldr	r2, [pc, #104]	; (8002174 <HAL_ADC_MspInit+0xe4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d127      	bne.n	800215e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	4b16      	ldr	r3, [pc, #88]	; (800216c <HAL_ADC_MspInit+0xdc>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	4a15      	ldr	r2, [pc, #84]	; (800216c <HAL_ADC_MspInit+0xdc>)
 8002118:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800211c:	6453      	str	r3, [r2, #68]	; 0x44
 800211e:	4b13      	ldr	r3, [pc, #76]	; (800216c <HAL_ADC_MspInit+0xdc>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b0f      	ldr	r3, [pc, #60]	; (800216c <HAL_ADC_MspInit+0xdc>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a0e      	ldr	r2, [pc, #56]	; (800216c <HAL_ADC_MspInit+0xdc>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <HAL_ADC_MspInit+0xdc>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002146:	2320      	movs	r3, #32
 8002148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800214a:	2303      	movs	r3, #3
 800214c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002152:	f107 031c 	add.w	r3, r7, #28
 8002156:	4619      	mov	r1, r3
 8002158:	4805      	ldr	r0, [pc, #20]	; (8002170 <HAL_ADC_MspInit+0xe0>)
 800215a:	f001 f8d3 	bl	8003304 <HAL_GPIO_Init>
}
 800215e:	bf00      	nop
 8002160:	3730      	adds	r7, #48	; 0x30
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40012000 	.word	0x40012000
 800216c:	40023800 	.word	0x40023800
 8002170:	40020800 	.word	0x40020800
 8002174:	40012100 	.word	0x40012100

08002178 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08a      	sub	sp, #40	; 0x28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <HAL_DAC_MspInit+0x7c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d127      	bne.n	80021ea <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <HAL_DAC_MspInit+0x80>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	4a15      	ldr	r2, [pc, #84]	; (80021f8 <HAL_DAC_MspInit+0x80>)
 80021a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021a8:	6413      	str	r3, [r2, #64]	; 0x40
 80021aa:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <HAL_DAC_MspInit+0x80>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <HAL_DAC_MspInit+0x80>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <HAL_DAC_MspInit+0x80>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <HAL_DAC_MspInit+0x80>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021d2:	2330      	movs	r3, #48	; 0x30
 80021d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021d6:	2303      	movs	r3, #3
 80021d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4619      	mov	r1, r3
 80021e4:	4805      	ldr	r0, [pc, #20]	; (80021fc <HAL_DAC_MspInit+0x84>)
 80021e6:	f001 f88d 	bl	8003304 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80021ea:	bf00      	nop
 80021ec:	3728      	adds	r7, #40	; 0x28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40007400 	.word	0x40007400
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40020000 	.word	0x40020000

08002200 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08c      	sub	sp, #48	; 0x30
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 031c 	add.w	r3, r7, #28
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a42      	ldr	r2, [pc, #264]	; (8002328 <HAL_I2C_MspInit+0x128>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d12d      	bne.n	800227e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	4b41      	ldr	r3, [pc, #260]	; (800232c <HAL_I2C_MspInit+0x12c>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a40      	ldr	r2, [pc, #256]	; (800232c <HAL_I2C_MspInit+0x12c>)
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b3e      	ldr	r3, [pc, #248]	; (800232c <HAL_I2C_MspInit+0x12c>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800223e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002244:	2312      	movs	r3, #18
 8002246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002248:	2301      	movs	r3, #1
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	2300      	movs	r3, #0
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002250:	2304      	movs	r3, #4
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002254:	f107 031c 	add.w	r3, r7, #28
 8002258:	4619      	mov	r1, r3
 800225a:	4835      	ldr	r0, [pc, #212]	; (8002330 <HAL_I2C_MspInit+0x130>)
 800225c:	f001 f852 	bl	8003304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	4b31      	ldr	r3, [pc, #196]	; (800232c <HAL_I2C_MspInit+0x12c>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	4a30      	ldr	r2, [pc, #192]	; (800232c <HAL_I2C_MspInit+0x12c>)
 800226a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800226e:	6413      	str	r3, [r2, #64]	; 0x40
 8002270:	4b2e      	ldr	r3, [pc, #184]	; (800232c <HAL_I2C_MspInit+0x12c>)
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800227c:	e050      	b.n	8002320 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a2c      	ldr	r2, [pc, #176]	; (8002334 <HAL_I2C_MspInit+0x134>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d14b      	bne.n	8002320 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	4b27      	ldr	r3, [pc, #156]	; (800232c <HAL_I2C_MspInit+0x12c>)
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	4a26      	ldr	r2, [pc, #152]	; (800232c <HAL_I2C_MspInit+0x12c>)
 8002292:	f043 0304 	orr.w	r3, r3, #4
 8002296:	6313      	str	r3, [r2, #48]	; 0x30
 8002298:	4b24      	ldr	r3, [pc, #144]	; (800232c <HAL_I2C_MspInit+0x12c>)
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a4:	2300      	movs	r3, #0
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_I2C_MspInit+0x12c>)
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	4a1f      	ldr	r2, [pc, #124]	; (800232c <HAL_I2C_MspInit+0x12c>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6313      	str	r3, [r2, #48]	; 0x30
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_I2C_MspInit+0x12c>)
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022c6:	2312      	movs	r3, #18
 80022c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ca:	2301      	movs	r3, #1
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ce:	2303      	movs	r3, #3
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022d2:	2304      	movs	r3, #4
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d6:	f107 031c 	add.w	r3, r7, #28
 80022da:	4619      	mov	r1, r3
 80022dc:	4816      	ldr	r0, [pc, #88]	; (8002338 <HAL_I2C_MspInit+0x138>)
 80022de:	f001 f811 	bl	8003304 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022e8:	2312      	movs	r3, #18
 80022ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ec:	2301      	movs	r3, #1
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f0:	2303      	movs	r3, #3
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022f4:	2304      	movs	r3, #4
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	f107 031c 	add.w	r3, r7, #28
 80022fc:	4619      	mov	r1, r3
 80022fe:	480f      	ldr	r0, [pc, #60]	; (800233c <HAL_I2C_MspInit+0x13c>)
 8002300:	f001 f800 	bl	8003304 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	4b08      	ldr	r3, [pc, #32]	; (800232c <HAL_I2C_MspInit+0x12c>)
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	4a07      	ldr	r2, [pc, #28]	; (800232c <HAL_I2C_MspInit+0x12c>)
 800230e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002312:	6413      	str	r3, [r2, #64]	; 0x40
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_I2C_MspInit+0x12c>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	68bb      	ldr	r3, [r7, #8]
}
 8002320:	bf00      	nop
 8002322:	3730      	adds	r7, #48	; 0x30
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40005400 	.word	0x40005400
 800232c:	40023800 	.word	0x40023800
 8002330:	40020400 	.word	0x40020400
 8002334:	40005c00 	.word	0x40005c00
 8002338:	40020800 	.word	0x40020800
 800233c:	40020000 	.word	0x40020000

08002340 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002340:	b480      	push	{r7}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a1f      	ldr	r2, [pc, #124]	; (80023cc <HAL_TIM_Base_MspInit+0x8c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d10e      	bne.n	8002370 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <HAL_TIM_Base_MspInit+0x90>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <HAL_TIM_Base_MspInit+0x90>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6453      	str	r3, [r2, #68]	; 0x44
 8002362:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <HAL_TIM_Base_MspInit+0x90>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800236e:	e026      	b.n	80023be <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a17      	ldr	r2, [pc, #92]	; (80023d4 <HAL_TIM_Base_MspInit+0x94>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d10e      	bne.n	8002398 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <HAL_TIM_Base_MspInit+0x90>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	4a13      	ldr	r2, [pc, #76]	; (80023d0 <HAL_TIM_Base_MspInit+0x90>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	6413      	str	r3, [r2, #64]	; 0x40
 800238a:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_TIM_Base_MspInit+0x90>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	693b      	ldr	r3, [r7, #16]
}
 8002396:	e012      	b.n	80023be <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <HAL_TIM_Base_MspInit+0x98>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d10d      	bne.n	80023be <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <HAL_TIM_Base_MspInit+0x90>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <HAL_TIM_Base_MspInit+0x90>)
 80023ac:	f043 0304 	orr.w	r3, r3, #4
 80023b0:	6413      	str	r3, [r2, #64]	; 0x40
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <HAL_TIM_Base_MspInit+0x90>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
}
 80023be:	bf00      	nop
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40010000 	.word	0x40010000
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40000400 	.word	0x40000400
 80023d8:	40000800 	.word	0x40000800

080023dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a24      	ldr	r2, [pc, #144]	; (800248c <HAL_TIM_MspPostInit+0xb0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d11e      	bne.n	800243c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_TIM_MspPostInit+0xb4>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a22      	ldr	r2, [pc, #136]	; (8002490 <HAL_TIM_MspPostInit+0xb4>)
 8002408:	f043 0304 	orr.w	r3, r3, #4
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b20      	ldr	r3, [pc, #128]	; (8002490 <HAL_TIM_MspPostInit+0xb4>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800241a:	2340      	movs	r3, #64	; 0x40
 800241c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800242a:	2302      	movs	r3, #2
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800242e:	f107 0314 	add.w	r3, r7, #20
 8002432:	4619      	mov	r1, r3
 8002434:	4817      	ldr	r0, [pc, #92]	; (8002494 <HAL_TIM_MspPostInit+0xb8>)
 8002436:	f000 ff65 	bl	8003304 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800243a:	e022      	b.n	8002482 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a15      	ldr	r2, [pc, #84]	; (8002498 <HAL_TIM_MspPostInit+0xbc>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d11d      	bne.n	8002482 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_TIM_MspPostInit+0xb4>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a10      	ldr	r2, [pc, #64]	; (8002490 <HAL_TIM_MspPostInit+0xb4>)
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <HAL_TIM_MspPostInit+0xb4>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2300      	movs	r3, #0
 8002470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002472:	2302      	movs	r3, #2
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4619      	mov	r1, r3
 800247c:	4807      	ldr	r0, [pc, #28]	; (800249c <HAL_TIM_MspPostInit+0xc0>)
 800247e:	f000 ff41 	bl	8003304 <HAL_GPIO_Init>
}
 8002482:	bf00      	nop
 8002484:	3728      	adds	r7, #40	; 0x28
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40000400 	.word	0x40000400
 8002490:	40023800 	.word	0x40023800
 8002494:	40020800 	.word	0x40020800
 8002498:	40000800 	.word	0x40000800
 800249c:	40020400 	.word	0x40020400

080024a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08c      	sub	sp, #48	; 0x30
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 031c 	add.w	r3, r7, #28
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a42      	ldr	r2, [pc, #264]	; (80025c8 <HAL_UART_MspInit+0x128>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d12c      	bne.n	800251c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
 80024c6:	4b41      	ldr	r3, [pc, #260]	; (80025cc <HAL_UART_MspInit+0x12c>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	4a40      	ldr	r2, [pc, #256]	; (80025cc <HAL_UART_MspInit+0x12c>)
 80024cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d0:	6413      	str	r3, [r2, #64]	; 0x40
 80024d2:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <HAL_UART_MspInit+0x12c>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	61bb      	str	r3, [r7, #24]
 80024dc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	4b3a      	ldr	r3, [pc, #232]	; (80025cc <HAL_UART_MspInit+0x12c>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a39      	ldr	r2, [pc, #228]	; (80025cc <HAL_UART_MspInit+0x12c>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b37      	ldr	r3, [pc, #220]	; (80025cc <HAL_UART_MspInit+0x12c>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024fa:	230c      	movs	r3, #12
 80024fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002506:	2303      	movs	r3, #3
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800250a:	2307      	movs	r3, #7
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250e:	f107 031c 	add.w	r3, r7, #28
 8002512:	4619      	mov	r1, r3
 8002514:	482e      	ldr	r0, [pc, #184]	; (80025d0 <HAL_UART_MspInit+0x130>)
 8002516:	f000 fef5 	bl	8003304 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800251a:	e050      	b.n	80025be <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a2c      	ldr	r2, [pc, #176]	; (80025d4 <HAL_UART_MspInit+0x134>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d14b      	bne.n	80025be <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	4b28      	ldr	r3, [pc, #160]	; (80025cc <HAL_UART_MspInit+0x12c>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	4a27      	ldr	r2, [pc, #156]	; (80025cc <HAL_UART_MspInit+0x12c>)
 8002530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002534:	6413      	str	r3, [r2, #64]	; 0x40
 8002536:	4b25      	ldr	r3, [pc, #148]	; (80025cc <HAL_UART_MspInit+0x12c>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	4b21      	ldr	r3, [pc, #132]	; (80025cc <HAL_UART_MspInit+0x12c>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	4a20      	ldr	r2, [pc, #128]	; (80025cc <HAL_UART_MspInit+0x12c>)
 800254c:	f043 0302 	orr.w	r3, r3, #2
 8002550:	6313      	str	r3, [r2, #48]	; 0x30
 8002552:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <HAL_UART_MspInit+0x12c>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <HAL_UART_MspInit+0x12c>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a19      	ldr	r2, [pc, #100]	; (80025cc <HAL_UART_MspInit+0x12c>)
 8002568:	f043 0308 	orr.w	r3, r3, #8
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b17      	ldr	r3, [pc, #92]	; (80025cc <HAL_UART_MspInit+0x12c>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800257a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800257e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002588:	2303      	movs	r3, #3
 800258a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800258c:	2307      	movs	r3, #7
 800258e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002590:	f107 031c 	add.w	r3, r7, #28
 8002594:	4619      	mov	r1, r3
 8002596:	4810      	ldr	r0, [pc, #64]	; (80025d8 <HAL_UART_MspInit+0x138>)
 8002598:	f000 feb4 	bl	8003304 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800259c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025aa:	2303      	movs	r3, #3
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025ae:	2307      	movs	r3, #7
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025b2:	f107 031c 	add.w	r3, r7, #28
 80025b6:	4619      	mov	r1, r3
 80025b8:	4808      	ldr	r0, [pc, #32]	; (80025dc <HAL_UART_MspInit+0x13c>)
 80025ba:	f000 fea3 	bl	8003304 <HAL_GPIO_Init>
}
 80025be:	bf00      	nop
 80025c0:	3730      	adds	r7, #48	; 0x30
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40004400 	.word	0x40004400
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40020000 	.word	0x40020000
 80025d4:	40004800 	.word	0x40004800
 80025d8:	40020400 	.word	0x40020400
 80025dc:	40020c00 	.word	0x40020c00

080025e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f2:	e7fe      	b.n	80025f2 <HardFault_Handler+0x4>

080025f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <MemManage_Handler+0x4>

080025fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fe:	e7fe      	b.n	80025fe <BusFault_Handler+0x4>

08002600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002604:	e7fe      	b.n	8002604 <UsageFault_Handler+0x4>

08002606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002634:	f000 f8ea 	bl	800280c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}

0800263c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  while(1)
  {
    HAL_GPIO_WritePin(GPIOD, HBridge_STBY_Pin, GPIO_PIN_RESET);
 8002640:	2200      	movs	r2, #0
 8002642:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002646:	4802      	ldr	r0, [pc, #8]	; (8002650 <EXTI0_IRQHandler+0x14>)
 8002648:	f001 f80e 	bl	8003668 <HAL_GPIO_WritePin>
 800264c:	e7f8      	b.n	8002640 <EXTI0_IRQHandler+0x4>
 800264e:	bf00      	nop
 8002650:	40020c00 	.word	0x40020c00

08002654 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  voice = (!voice);
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <EXTI9_5_IRQHandler+0x34>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	bf0c      	ite	eq
 8002662:	2301      	moveq	r3, #1
 8002664:	2300      	movne	r3, #0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	4b07      	ldr	r3, [pc, #28]	; (8002688 <EXTI9_5_IRQHandler+0x34>)
 800266c:	701a      	strb	r2, [r3, #0]
  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
  HAL_Delay(100);
 800266e:	2064      	movs	r0, #100	; 0x64
 8002670:	f000 f8ec 	bl	800284c <HAL_Delay>
  cmd[0] = ' ';
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <EXTI9_5_IRQHandler+0x38>)
 8002676:	2220      	movs	r2, #32
 8002678:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800267a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800267e:	f001 f80d 	bl	800369c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000098 	.word	0x20000098
 800268c:	200003e4 	.word	0x200003e4

08002690 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <_sbrk+0x50>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d102      	bne.n	80026a6 <_sbrk+0x16>
		heap_end = &end;
 80026a0:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <_sbrk+0x50>)
 80026a2:	4a10      	ldr	r2, [pc, #64]	; (80026e4 <_sbrk+0x54>)
 80026a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80026a6:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <_sbrk+0x50>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <_sbrk+0x50>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4413      	add	r3, r2
 80026b4:	466a      	mov	r2, sp
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d907      	bls.n	80026ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80026ba:	f003 f8cb 	bl	8005854 <__errno>
 80026be:	4602      	mov	r2, r0
 80026c0:	230c      	movs	r3, #12
 80026c2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80026c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026c8:	e006      	b.n	80026d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80026ca:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <_sbrk+0x50>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	4a03      	ldr	r2, [pc, #12]	; (80026e0 <_sbrk+0x50>)
 80026d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80026d6:	68fb      	ldr	r3, [r7, #12]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	2000009c 	.word	0x2000009c
 80026e4:	200003f0 	.word	0x200003f0

080026e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <SystemInit+0x28>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f2:	4a07      	ldr	r2, [pc, #28]	; (8002710 <SystemInit+0x28>)
 80026f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026fc:	4b04      	ldr	r3, [pc, #16]	; (8002710 <SystemInit+0x28>)
 80026fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002702:	609a      	str	r2, [r3, #8]
#endif
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800274c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002718:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800271a:	e003      	b.n	8002724 <LoopCopyDataInit>

0800271c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800271e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002720:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002722:	3104      	adds	r1, #4

08002724 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002724:	480b      	ldr	r0, [pc, #44]	; (8002754 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002728:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800272a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800272c:	d3f6      	bcc.n	800271c <CopyDataInit>
  ldr  r2, =_sbss
 800272e:	4a0b      	ldr	r2, [pc, #44]	; (800275c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002730:	e002      	b.n	8002738 <LoopFillZerobss>

08002732 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002732:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002734:	f842 3b04 	str.w	r3, [r2], #4

08002738 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800273a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800273c:	d3f9      	bcc.n	8002732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800273e:	f7ff ffd3 	bl	80026e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002742:	f003 f88d 	bl	8005860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002746:	f7fe fb39 	bl	8000dbc <main>
  bx  lr    
 800274a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800274c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002750:	080061b4 	.word	0x080061b4
  ldr  r0, =_sdata
 8002754:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002758:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800275c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002760:	200003f0 	.word	0x200003f0

08002764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002764:	e7fe      	b.n	8002764 <ADC_IRQHandler>
	...

08002768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <HAL_Init+0x40>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0d      	ldr	r2, [pc, #52]	; (80027a8 <HAL_Init+0x40>)
 8002772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002776:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_Init+0x40>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <HAL_Init+0x40>)
 800277e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002782:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <HAL_Init+0x40>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a07      	ldr	r2, [pc, #28]	; (80027a8 <HAL_Init+0x40>)
 800278a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002790:	2003      	movs	r0, #3
 8002792:	f000 fd07 	bl	80031a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002796:	2000      	movs	r0, #0
 8002798:	f000 f808 	bl	80027ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800279c:	f7ff fc50 	bl	8002040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023c00 	.word	0x40023c00

080027ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_InitTick+0x54>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_InitTick+0x58>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	4619      	mov	r1, r3
 80027be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fd1f 	bl	800320e <HAL_SYSTICK_Config>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e00e      	b.n	80027f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b0f      	cmp	r3, #15
 80027de:	d80a      	bhi.n	80027f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e0:	2200      	movs	r2, #0
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027e8:	f000 fce7 	bl	80031ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027ec:	4a06      	ldr	r2, [pc, #24]	; (8002808 <HAL_InitTick+0x5c>)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	e000      	b.n	80027f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20000000 	.word	0x20000000
 8002804:	20000008 	.word	0x20000008
 8002808:	20000004 	.word	0x20000004

0800280c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_IncTick+0x20>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_IncTick+0x24>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4413      	add	r3, r2
 800281c:	4a04      	ldr	r2, [pc, #16]	; (8002830 <HAL_IncTick+0x24>)
 800281e:	6013      	str	r3, [r2, #0]
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000008 	.word	0x20000008
 8002830:	200003e8 	.word	0x200003e8

08002834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return uwTick;
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <HAL_GetTick+0x14>)
 800283a:	681b      	ldr	r3, [r3, #0]
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	200003e8 	.word	0x200003e8

0800284c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002854:	f7ff ffee 	bl	8002834 <HAL_GetTick>
 8002858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002864:	d005      	beq.n	8002872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_Delay+0x40>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4413      	add	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002872:	bf00      	nop
 8002874:	f7ff ffde 	bl	8002834 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	429a      	cmp	r2, r3
 8002882:	d8f7      	bhi.n	8002874 <HAL_Delay+0x28>
  {
  }
}
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000008 	.word	0x20000008

08002890 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e033      	b.n	800290e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff fbee 	bl	8002090 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d118      	bne.n	8002900 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028d6:	f023 0302 	bic.w	r3, r3, #2
 80028da:	f043 0202 	orr.w	r2, r3, #2
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fa92 	bl	8002e0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f023 0303 	bic.w	r3, r3, #3
 80028f6:	f043 0201 	orr.w	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
 80028fe:	e001      	b.n	8002904 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_ADC_Start+0x1a>
 800292e:	2302      	movs	r3, #2
 8002930:	e0a5      	b.n	8002a7e <HAL_ADC_Start+0x166>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b01      	cmp	r3, #1
 8002946:	d018      	beq.n	800297a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002958:	4b4c      	ldr	r3, [pc, #304]	; (8002a8c <HAL_ADC_Start+0x174>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a4c      	ldr	r2, [pc, #304]	; (8002a90 <HAL_ADC_Start+0x178>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	0c9a      	lsrs	r2, r3, #18
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800296c:	e002      	b.n	8002974 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	3b01      	subs	r3, #1
 8002972:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f9      	bne.n	800296e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b01      	cmp	r3, #1
 8002986:	d179      	bne.n	8002a7c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002990:	f023 0301 	bic.w	r3, r3, #1
 8002994:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c6:	d106      	bne.n	80029d6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	f023 0206 	bic.w	r2, r3, #6
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	645a      	str	r2, [r3, #68]	; 0x44
 80029d4:	e002      	b.n	80029dc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029e4:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <HAL_ADC_Start+0x17c>)
 80029e6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80029f0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d12a      	bne.n	8002a54 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a25      	ldr	r2, [pc, #148]	; (8002a98 <HAL_ADC_Start+0x180>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d015      	beq.n	8002a34 <HAL_ADC_Start+0x11c>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <HAL_ADC_Start+0x184>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d105      	bne.n	8002a1e <HAL_ADC_Start+0x106>
 8002a12:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_ADC_Start+0x17c>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <HAL_ADC_Start+0x188>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d129      	bne.n	8002a7c <HAL_ADC_Start+0x164>
 8002a28:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <HAL_ADC_Start+0x17c>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	2b0f      	cmp	r3, #15
 8002a32:	d823      	bhi.n	8002a7c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d11c      	bne.n	8002a7c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a50:	609a      	str	r2, [r3, #8]
 8002a52:	e013      	b.n	8002a7c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0f      	ldr	r2, [pc, #60]	; (8002a98 <HAL_ADC_Start+0x180>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10e      	bne.n	8002a7c <HAL_ADC_Start+0x164>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d107      	bne.n	8002a7c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a7a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	431bde83 	.word	0x431bde83
 8002a94:	40012300 	.word	0x40012300
 8002a98:	40012000 	.word	0x40012000
 8002a9c:	40012100 	.word	0x40012100
 8002aa0:	40012200 	.word	0x40012200

08002aa4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac0:	d113      	bne.n	8002aea <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad0:	d10b      	bne.n	8002aea <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f043 0220 	orr.w	r2, r3, #32
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e05c      	b.n	8002ba4 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002aea:	f7ff fea3 	bl	8002834 <HAL_GetTick>
 8002aee:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002af0:	e01a      	b.n	8002b28 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af8:	d016      	beq.n	8002b28 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_ADC_PollForConversion+0x6c>
 8002b00:	f7ff fe98 	bl	8002834 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d20b      	bcs.n	8002b28 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f043 0204 	orr.w	r2, r3, #4
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e03d      	b.n	8002ba4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d1dd      	bne.n	8002af2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f06f 0212 	mvn.w	r2, #18
 8002b3e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d123      	bne.n	8002ba2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d11f      	bne.n	8002ba2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d006      	beq.n	8002b7e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d111      	bne.n	8002ba2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d105      	bne.n	8002ba2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f043 0201 	orr.w	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x1c>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e105      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x228>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b09      	cmp	r3, #9
 8002bf2:	d925      	bls.n	8002c40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68d9      	ldr	r1, [r3, #12]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	4613      	mov	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	4413      	add	r3, r2
 8002c08:	3b1e      	subs	r3, #30
 8002c0a:	2207      	movs	r2, #7
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43da      	mvns	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	400a      	ands	r2, r1
 8002c18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68d9      	ldr	r1, [r3, #12]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	4403      	add	r3, r0
 8002c32:	3b1e      	subs	r3, #30
 8002c34:	409a      	lsls	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	e022      	b.n	8002c86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6919      	ldr	r1, [r3, #16]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4613      	mov	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4413      	add	r3, r2
 8002c54:	2207      	movs	r2, #7
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	400a      	ands	r2, r1
 8002c62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6919      	ldr	r1, [r3, #16]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	4618      	mov	r0, r3
 8002c76:	4603      	mov	r3, r0
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4403      	add	r3, r0
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b06      	cmp	r3, #6
 8002c8c:	d824      	bhi.n	8002cd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3b05      	subs	r3, #5
 8002ca0:	221f      	movs	r2, #31
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	400a      	ands	r2, r1
 8002cae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3b05      	subs	r3, #5
 8002cca:	fa00 f203 	lsl.w	r2, r0, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	635a      	str	r2, [r3, #52]	; 0x34
 8002cd6:	e04c      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b0c      	cmp	r3, #12
 8002cde:	d824      	bhi.n	8002d2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	3b23      	subs	r3, #35	; 0x23
 8002cf2:	221f      	movs	r2, #31
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43da      	mvns	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	400a      	ands	r2, r1
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	4618      	mov	r0, r3
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	3b23      	subs	r3, #35	; 0x23
 8002d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
 8002d28:	e023      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	3b41      	subs	r3, #65	; 0x41
 8002d3c:	221f      	movs	r2, #31
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43da      	mvns	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	400a      	ands	r2, r1
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	4618      	mov	r0, r3
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	3b41      	subs	r3, #65	; 0x41
 8002d66:	fa00 f203 	lsl.w	r2, r0, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d72:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <HAL_ADC_ConfigChannel+0x234>)
 8002d74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a21      	ldr	r2, [pc, #132]	; (8002e00 <HAL_ADC_ConfigChannel+0x238>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d109      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x1cc>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b12      	cmp	r3, #18
 8002d86:	d105      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a19      	ldr	r2, [pc, #100]	; (8002e00 <HAL_ADC_ConfigChannel+0x238>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d123      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x21e>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b10      	cmp	r3, #16
 8002da4:	d003      	beq.n	8002dae <HAL_ADC_ConfigChannel+0x1e6>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b11      	cmp	r3, #17
 8002dac:	d11b      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2b10      	cmp	r3, #16
 8002dc0:	d111      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dc2:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <HAL_ADC_ConfigChannel+0x23c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a10      	ldr	r2, [pc, #64]	; (8002e08 <HAL_ADC_ConfigChannel+0x240>)
 8002dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dcc:	0c9a      	lsrs	r2, r3, #18
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002dd8:	e002      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f9      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	40012300 	.word	0x40012300
 8002e00:	40012000 	.word	0x40012000
 8002e04:	20000000 	.word	0x20000000
 8002e08:	431bde83 	.word	0x431bde83

08002e0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e14:	4b79      	ldr	r3, [pc, #484]	; (8002ffc <ADC_Init+0x1f0>)
 8002e16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6859      	ldr	r1, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	021a      	lsls	r2, r3, #8
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6859      	ldr	r1, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6899      	ldr	r1, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	4a58      	ldr	r2, [pc, #352]	; (8003000 <ADC_Init+0x1f4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d022      	beq.n	8002eea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002eb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6899      	ldr	r1, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ed4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6899      	ldr	r1, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	e00f      	b.n	8002f0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ef8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0202 	bic.w	r2, r2, #2
 8002f18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6899      	ldr	r1, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7e1b      	ldrb	r3, [r3, #24]
 8002f24:	005a      	lsls	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d01b      	beq.n	8002f70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6859      	ldr	r1, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	3b01      	subs	r3, #1
 8002f64:	035a      	lsls	r2, r3, #13
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	e007      	b.n	8002f80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	051a      	lsls	r2, r3, #20
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6899      	ldr	r1, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fc2:	025a      	lsls	r2, r3, #9
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6899      	ldr	r1, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	029a      	lsls	r2, r3, #10
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	609a      	str	r2, [r3, #8]
}
 8002ff0:	bf00      	nop
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40012300 	.word	0x40012300
 8003000:	0f000001 	.word	0x0f000001

08003004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <__NVIC_SetPriorityGrouping+0x44>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003020:	4013      	ands	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800302c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003036:	4a04      	ldr	r2, [pc, #16]	; (8003048 <__NVIC_SetPriorityGrouping+0x44>)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	60d3      	str	r3, [r2, #12]
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003050:	4b04      	ldr	r3, [pc, #16]	; (8003064 <__NVIC_GetPriorityGrouping+0x18>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	0a1b      	lsrs	r3, r3, #8
 8003056:	f003 0307 	and.w	r3, r3, #7
}
 800305a:	4618      	mov	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	2b00      	cmp	r3, #0
 8003078:	db0b      	blt.n	8003092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	f003 021f 	and.w	r2, r3, #31
 8003080:	4907      	ldr	r1, [pc, #28]	; (80030a0 <__NVIC_EnableIRQ+0x38>)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	2001      	movs	r0, #1
 800308a:	fa00 f202 	lsl.w	r2, r0, r2
 800308e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	e000e100 	.word	0xe000e100

080030a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	6039      	str	r1, [r7, #0]
 80030ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	db0a      	blt.n	80030ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	490c      	ldr	r1, [pc, #48]	; (80030f0 <__NVIC_SetPriority+0x4c>)
 80030be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c2:	0112      	lsls	r2, r2, #4
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	440b      	add	r3, r1
 80030c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030cc:	e00a      	b.n	80030e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	4908      	ldr	r1, [pc, #32]	; (80030f4 <__NVIC_SetPriority+0x50>)
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	3b04      	subs	r3, #4
 80030dc:	0112      	lsls	r2, r2, #4
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	440b      	add	r3, r1
 80030e2:	761a      	strb	r2, [r3, #24]
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	e000e100 	.word	0xe000e100
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b089      	sub	sp, #36	; 0x24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f1c3 0307 	rsb	r3, r3, #7
 8003112:	2b04      	cmp	r3, #4
 8003114:	bf28      	it	cs
 8003116:	2304      	movcs	r3, #4
 8003118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3304      	adds	r3, #4
 800311e:	2b06      	cmp	r3, #6
 8003120:	d902      	bls.n	8003128 <NVIC_EncodePriority+0x30>
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3b03      	subs	r3, #3
 8003126:	e000      	b.n	800312a <NVIC_EncodePriority+0x32>
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800312c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43da      	mvns	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	401a      	ands	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003140:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	fa01 f303 	lsl.w	r3, r1, r3
 800314a:	43d9      	mvns	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003150:	4313      	orrs	r3, r2
         );
}
 8003152:	4618      	mov	r0, r3
 8003154:	3724      	adds	r7, #36	; 0x24
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3b01      	subs	r3, #1
 800316c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003170:	d301      	bcc.n	8003176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003172:	2301      	movs	r3, #1
 8003174:	e00f      	b.n	8003196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003176:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <SysTick_Config+0x40>)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3b01      	subs	r3, #1
 800317c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800317e:	210f      	movs	r1, #15
 8003180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003184:	f7ff ff8e 	bl	80030a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <SysTick_Config+0x40>)
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800318e:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <SysTick_Config+0x40>)
 8003190:	2207      	movs	r2, #7
 8003192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	e000e010 	.word	0xe000e010

080031a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff ff29 	bl	8003004 <__NVIC_SetPriorityGrouping>
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b086      	sub	sp, #24
 80031be:	af00      	add	r7, sp, #0
 80031c0:	4603      	mov	r3, r0
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031cc:	f7ff ff3e 	bl	800304c <__NVIC_GetPriorityGrouping>
 80031d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	6978      	ldr	r0, [r7, #20]
 80031d8:	f7ff ff8e 	bl	80030f8 <NVIC_EncodePriority>
 80031dc:	4602      	mov	r2, r0
 80031de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031e2:	4611      	mov	r1, r2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff5d 	bl	80030a4 <__NVIC_SetPriority>
}
 80031ea:	bf00      	nop
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	4603      	mov	r3, r0
 80031fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff ff31 	bl	8003068 <__NVIC_EnableIRQ>
}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff ffa2 	bl	8003160 <SysTick_Config>
 800321c:	4603      	mov	r3, r0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e014      	b.n	8003262 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	791b      	ldrb	r3, [r3, #4]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d105      	bne.n	800324e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7fe ff95 	bl	8002178 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2202      	movs	r2, #2
 8003252:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800326a:	b480      	push	{r7}
 800326c:	b087      	sub	sp, #28
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	2300      	movs	r3, #0
 800327c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	795b      	ldrb	r3, [r3, #5]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_DAC_ConfigChannel+0x20>
 8003286:	2302      	movs	r3, #2
 8003288:	e036      	b.n	80032f8 <HAL_DAC_ConfigChannel+0x8e>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2202      	movs	r2, #2
 8003294:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800329e:	f640 72fe 	movw	r2, #4094	; 0xffe
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4013      	ands	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6819      	ldr	r1, [r3, #0]
 80032d8:	22c0      	movs	r2, #192	; 0xc0
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43da      	mvns	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	400a      	ands	r2, r1
 80032e8:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	; 0x24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003316:	2300      	movs	r3, #0
 8003318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	e16b      	b.n	80035f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003320:	2201      	movs	r2, #1
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	429a      	cmp	r2, r3
 800333a:	f040 815a 	bne.w	80035f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d00b      	beq.n	800335e <HAL_GPIO_Init+0x5a>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d007      	beq.n	800335e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003352:	2b11      	cmp	r3, #17
 8003354:	d003      	beq.n	800335e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b12      	cmp	r3, #18
 800335c:	d130      	bne.n	80033c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	2203      	movs	r2, #3
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003394:	2201      	movs	r2, #1
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f003 0201 	and.w	r2, r3, #1
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	2203      	movs	r2, #3
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d003      	beq.n	8003400 <HAL_GPIO_Init+0xfc>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b12      	cmp	r3, #18
 80033fe:	d123      	bne.n	8003448 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	08da      	lsrs	r2, r3, #3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3208      	adds	r2, #8
 8003408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800340c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	220f      	movs	r2, #15
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	08da      	lsrs	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3208      	adds	r2, #8
 8003442:	69b9      	ldr	r1, [r7, #24]
 8003444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	2203      	movs	r2, #3
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 0203 	and.w	r2, r3, #3
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4313      	orrs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80b4 	beq.w	80035f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	4b5f      	ldr	r3, [pc, #380]	; (800360c <HAL_GPIO_Init+0x308>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	4a5e      	ldr	r2, [pc, #376]	; (800360c <HAL_GPIO_Init+0x308>)
 8003494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003498:	6453      	str	r3, [r2, #68]	; 0x44
 800349a:	4b5c      	ldr	r3, [pc, #368]	; (800360c <HAL_GPIO_Init+0x308>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034a6:	4a5a      	ldr	r2, [pc, #360]	; (8003610 <HAL_GPIO_Init+0x30c>)
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	089b      	lsrs	r3, r3, #2
 80034ac:	3302      	adds	r3, #2
 80034ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	220f      	movs	r2, #15
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a51      	ldr	r2, [pc, #324]	; (8003614 <HAL_GPIO_Init+0x310>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d02b      	beq.n	800352a <HAL_GPIO_Init+0x226>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a50      	ldr	r2, [pc, #320]	; (8003618 <HAL_GPIO_Init+0x314>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d025      	beq.n	8003526 <HAL_GPIO_Init+0x222>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a4f      	ldr	r2, [pc, #316]	; (800361c <HAL_GPIO_Init+0x318>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d01f      	beq.n	8003522 <HAL_GPIO_Init+0x21e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a4e      	ldr	r2, [pc, #312]	; (8003620 <HAL_GPIO_Init+0x31c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d019      	beq.n	800351e <HAL_GPIO_Init+0x21a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a4d      	ldr	r2, [pc, #308]	; (8003624 <HAL_GPIO_Init+0x320>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <HAL_GPIO_Init+0x216>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a4c      	ldr	r2, [pc, #304]	; (8003628 <HAL_GPIO_Init+0x324>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00d      	beq.n	8003516 <HAL_GPIO_Init+0x212>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a4b      	ldr	r2, [pc, #300]	; (800362c <HAL_GPIO_Init+0x328>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d007      	beq.n	8003512 <HAL_GPIO_Init+0x20e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a4a      	ldr	r2, [pc, #296]	; (8003630 <HAL_GPIO_Init+0x32c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d101      	bne.n	800350e <HAL_GPIO_Init+0x20a>
 800350a:	2307      	movs	r3, #7
 800350c:	e00e      	b.n	800352c <HAL_GPIO_Init+0x228>
 800350e:	2308      	movs	r3, #8
 8003510:	e00c      	b.n	800352c <HAL_GPIO_Init+0x228>
 8003512:	2306      	movs	r3, #6
 8003514:	e00a      	b.n	800352c <HAL_GPIO_Init+0x228>
 8003516:	2305      	movs	r3, #5
 8003518:	e008      	b.n	800352c <HAL_GPIO_Init+0x228>
 800351a:	2304      	movs	r3, #4
 800351c:	e006      	b.n	800352c <HAL_GPIO_Init+0x228>
 800351e:	2303      	movs	r3, #3
 8003520:	e004      	b.n	800352c <HAL_GPIO_Init+0x228>
 8003522:	2302      	movs	r3, #2
 8003524:	e002      	b.n	800352c <HAL_GPIO_Init+0x228>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <HAL_GPIO_Init+0x228>
 800352a:	2300      	movs	r3, #0
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	f002 0203 	and.w	r2, r2, #3
 8003532:	0092      	lsls	r2, r2, #2
 8003534:	4093      	lsls	r3, r2
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4313      	orrs	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800353c:	4934      	ldr	r1, [pc, #208]	; (8003610 <HAL_GPIO_Init+0x30c>)
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	089b      	lsrs	r3, r3, #2
 8003542:	3302      	adds	r3, #2
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800354a:	4b3a      	ldr	r3, [pc, #232]	; (8003634 <HAL_GPIO_Init+0x330>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	43db      	mvns	r3, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4013      	ands	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800356e:	4a31      	ldr	r2, [pc, #196]	; (8003634 <HAL_GPIO_Init+0x330>)
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003574:	4b2f      	ldr	r3, [pc, #188]	; (8003634 <HAL_GPIO_Init+0x330>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003598:	4a26      	ldr	r2, [pc, #152]	; (8003634 <HAL_GPIO_Init+0x330>)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800359e:	4b25      	ldr	r3, [pc, #148]	; (8003634 <HAL_GPIO_Init+0x330>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4013      	ands	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035c2:	4a1c      	ldr	r2, [pc, #112]	; (8003634 <HAL_GPIO_Init+0x330>)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035c8:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <HAL_GPIO_Init+0x330>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	43db      	mvns	r3, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4013      	ands	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035ec:	4a11      	ldr	r2, [pc, #68]	; (8003634 <HAL_GPIO_Init+0x330>)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3301      	adds	r3, #1
 80035f6:	61fb      	str	r3, [r7, #28]
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	2b0f      	cmp	r3, #15
 80035fc:	f67f ae90 	bls.w	8003320 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003600:	bf00      	nop
 8003602:	3724      	adds	r7, #36	; 0x24
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	40023800 	.word	0x40023800
 8003610:	40013800 	.word	0x40013800
 8003614:	40020000 	.word	0x40020000
 8003618:	40020400 	.word	0x40020400
 800361c:	40020800 	.word	0x40020800
 8003620:	40020c00 	.word	0x40020c00
 8003624:	40021000 	.word	0x40021000
 8003628:	40021400 	.word	0x40021400
 800362c:	40021800 	.word	0x40021800
 8003630:	40021c00 	.word	0x40021c00
 8003634:	40013c00 	.word	0x40013c00

08003638 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	887b      	ldrh	r3, [r7, #2]
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	e001      	b.n	800365a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003656:	2300      	movs	r3, #0
 8003658:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800365a:	7bfb      	ldrb	r3, [r7, #15]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	807b      	strh	r3, [r7, #2]
 8003674:	4613      	mov	r3, r2
 8003676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003678:	787b      	ldrb	r3, [r7, #1]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800367e:	887a      	ldrh	r2, [r7, #2]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003684:	e003      	b.n	800368e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003686:	887b      	ldrh	r3, [r7, #2]
 8003688:	041a      	lsls	r2, r3, #16
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	619a      	str	r2, [r3, #24]
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036a6:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d006      	beq.n	80036c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036b2:	4a05      	ldr	r2, [pc, #20]	; (80036c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 f806 	bl	80036cc <HAL_GPIO_EXTI_Callback>
  }
}
 80036c0:	bf00      	nop
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40013c00 	.word	0x40013c00

080036cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
	...

080036e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e11f      	b.n	8003936 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fe fd78 	bl	8002200 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2224      	movs	r2, #36	; 0x24
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0201 	bic.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003736:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003746:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003748:	f000 fd3e 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 800374c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	4a7b      	ldr	r2, [pc, #492]	; (8003940 <HAL_I2C_Init+0x25c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d807      	bhi.n	8003768 <HAL_I2C_Init+0x84>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4a7a      	ldr	r2, [pc, #488]	; (8003944 <HAL_I2C_Init+0x260>)
 800375c:	4293      	cmp	r3, r2
 800375e:	bf94      	ite	ls
 8003760:	2301      	movls	r3, #1
 8003762:	2300      	movhi	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	e006      	b.n	8003776 <HAL_I2C_Init+0x92>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4a77      	ldr	r2, [pc, #476]	; (8003948 <HAL_I2C_Init+0x264>)
 800376c:	4293      	cmp	r3, r2
 800376e:	bf94      	ite	ls
 8003770:	2301      	movls	r3, #1
 8003772:	2300      	movhi	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e0db      	b.n	8003936 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4a72      	ldr	r2, [pc, #456]	; (800394c <HAL_I2C_Init+0x268>)
 8003782:	fba2 2303 	umull	r2, r3, r2, r3
 8003786:	0c9b      	lsrs	r3, r3, #18
 8003788:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	430a      	orrs	r2, r1
 800379c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	4a64      	ldr	r2, [pc, #400]	; (8003940 <HAL_I2C_Init+0x25c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d802      	bhi.n	80037b8 <HAL_I2C_Init+0xd4>
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	3301      	adds	r3, #1
 80037b6:	e009      	b.n	80037cc <HAL_I2C_Init+0xe8>
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037be:	fb02 f303 	mul.w	r3, r2, r3
 80037c2:	4a63      	ldr	r2, [pc, #396]	; (8003950 <HAL_I2C_Init+0x26c>)
 80037c4:	fba2 2303 	umull	r2, r3, r2, r3
 80037c8:	099b      	lsrs	r3, r3, #6
 80037ca:	3301      	adds	r3, #1
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	430b      	orrs	r3, r1
 80037d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4956      	ldr	r1, [pc, #344]	; (8003940 <HAL_I2C_Init+0x25c>)
 80037e8:	428b      	cmp	r3, r1
 80037ea:	d80d      	bhi.n	8003808 <HAL_I2C_Init+0x124>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1e59      	subs	r1, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80037fa:	3301      	adds	r3, #1
 80037fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003800:	2b04      	cmp	r3, #4
 8003802:	bf38      	it	cc
 8003804:	2304      	movcc	r3, #4
 8003806:	e04f      	b.n	80038a8 <HAL_I2C_Init+0x1c4>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d111      	bne.n	8003834 <HAL_I2C_Init+0x150>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	1e58      	subs	r0, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6859      	ldr	r1, [r3, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	440b      	add	r3, r1
 800381e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003822:	3301      	adds	r3, #1
 8003824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf0c      	ite	eq
 800382c:	2301      	moveq	r3, #1
 800382e:	2300      	movne	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e012      	b.n	800385a <HAL_I2C_Init+0x176>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	1e58      	subs	r0, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6859      	ldr	r1, [r3, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	0099      	lsls	r1, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	fbb0 f3f3 	udiv	r3, r0, r3
 800384a:	3301      	adds	r3, #1
 800384c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf0c      	ite	eq
 8003854:	2301      	moveq	r3, #1
 8003856:	2300      	movne	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_I2C_Init+0x17e>
 800385e:	2301      	movs	r3, #1
 8003860:	e022      	b.n	80038a8 <HAL_I2C_Init+0x1c4>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10e      	bne.n	8003888 <HAL_I2C_Init+0x1a4>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	1e58      	subs	r0, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6859      	ldr	r1, [r3, #4]
 8003872:	460b      	mov	r3, r1
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	440b      	add	r3, r1
 8003878:	fbb0 f3f3 	udiv	r3, r0, r3
 800387c:	3301      	adds	r3, #1
 800387e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003886:	e00f      	b.n	80038a8 <HAL_I2C_Init+0x1c4>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1e58      	subs	r0, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6859      	ldr	r1, [r3, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	0099      	lsls	r1, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	fbb0 f3f3 	udiv	r3, r0, r3
 800389e:	3301      	adds	r3, #1
 80038a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	6809      	ldr	r1, [r1, #0]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69da      	ldr	r2, [r3, #28]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6911      	ldr	r1, [r2, #16]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68d2      	ldr	r2, [r2, #12]
 80038e2:	4311      	orrs	r1, r2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	430b      	orrs	r3, r1
 80038ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695a      	ldr	r2, [r3, #20]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	000186a0 	.word	0x000186a0
 8003944:	001e847f 	.word	0x001e847f
 8003948:	003d08ff 	.word	0x003d08ff
 800394c:	431bde83 	.word	0x431bde83
 8003950:	10624dd3 	.word	0x10624dd3

08003954 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e25b      	b.n	8003e1e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d075      	beq.n	8003a5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003972:	4ba3      	ldr	r3, [pc, #652]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b04      	cmp	r3, #4
 800397c:	d00c      	beq.n	8003998 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397e:	4ba0      	ldr	r3, [pc, #640]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003986:	2b08      	cmp	r3, #8
 8003988:	d112      	bne.n	80039b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398a:	4b9d      	ldr	r3, [pc, #628]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003996:	d10b      	bne.n	80039b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003998:	4b99      	ldr	r3, [pc, #612]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d05b      	beq.n	8003a5c <HAL_RCC_OscConfig+0x108>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d157      	bne.n	8003a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e236      	b.n	8003e1e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d106      	bne.n	80039c8 <HAL_RCC_OscConfig+0x74>
 80039ba:	4b91      	ldr	r3, [pc, #580]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a90      	ldr	r2, [pc, #576]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e01d      	b.n	8003a04 <HAL_RCC_OscConfig+0xb0>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x98>
 80039d2:	4b8b      	ldr	r3, [pc, #556]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a8a      	ldr	r2, [pc, #552]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b88      	ldr	r3, [pc, #544]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a87      	ldr	r2, [pc, #540]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e00b      	b.n	8003a04 <HAL_RCC_OscConfig+0xb0>
 80039ec:	4b84      	ldr	r3, [pc, #528]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a83      	ldr	r2, [pc, #524]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4b81      	ldr	r3, [pc, #516]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a80      	ldr	r2, [pc, #512]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 80039fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fe ff12 	bl	8002834 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fe ff0e 	bl	8002834 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	; 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e1fb      	b.n	8003e1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	4b76      	ldr	r3, [pc, #472]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0xc0>
 8003a32:	e014      	b.n	8003a5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fe fefe 	bl	8002834 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fe fefa 	bl	8002834 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e1e7      	b.n	8003e1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	4b6c      	ldr	r3, [pc, #432]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0xe8>
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d063      	beq.n	8003b32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a6a:	4b65      	ldr	r3, [pc, #404]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a76:	4b62      	ldr	r3, [pc, #392]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d11c      	bne.n	8003abc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a82:	4b5f      	ldr	r3, [pc, #380]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d116      	bne.n	8003abc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8e:	4b5c      	ldr	r3, [pc, #368]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x152>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e1bb      	b.n	8003e1e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa6:	4b56      	ldr	r3, [pc, #344]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4952      	ldr	r1, [pc, #328]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aba:	e03a      	b.n	8003b32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac4:	4b4f      	ldr	r3, [pc, #316]	; (8003c04 <HAL_RCC_OscConfig+0x2b0>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fe feb3 	bl	8002834 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fe feaf 	bl	8002834 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e19c      	b.n	8003e1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae4:	4b46      	ldr	r3, [pc, #280]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af0:	4b43      	ldr	r3, [pc, #268]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4940      	ldr	r1, [pc, #256]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	600b      	str	r3, [r1, #0]
 8003b04:	e015      	b.n	8003b32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b06:	4b3f      	ldr	r3, [pc, #252]	; (8003c04 <HAL_RCC_OscConfig+0x2b0>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fe fe92 	bl	8002834 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b14:	f7fe fe8e 	bl	8002834 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e17b      	b.n	8003e1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b26:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d030      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d016      	beq.n	8003b74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b46:	4b30      	ldr	r3, [pc, #192]	; (8003c08 <HAL_RCC_OscConfig+0x2b4>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7fe fe72 	bl	8002834 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b54:	f7fe fe6e 	bl	8002834 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e15b      	b.n	8003e1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b66:	4b26      	ldr	r3, [pc, #152]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x200>
 8003b72:	e015      	b.n	8003ba0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b74:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <HAL_RCC_OscConfig+0x2b4>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7a:	f7fe fe5b 	bl	8002834 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b82:	f7fe fe57 	bl	8002834 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e144      	b.n	8003e1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b94:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1f0      	bne.n	8003b82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80a0 	beq.w	8003cee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb2:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10f      	bne.n	8003bde <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	4a0e      	ldr	r2, [pc, #56]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bce:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bde:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_RCC_OscConfig+0x2b8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d121      	bne.n	8003c2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bea:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <HAL_RCC_OscConfig+0x2b8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a07      	ldr	r2, [pc, #28]	; (8003c0c <HAL_RCC_OscConfig+0x2b8>)
 8003bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf6:	f7fe fe1d 	bl	8002834 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfc:	e011      	b.n	8003c22 <HAL_RCC_OscConfig+0x2ce>
 8003bfe:	bf00      	nop
 8003c00:	40023800 	.word	0x40023800
 8003c04:	42470000 	.word	0x42470000
 8003c08:	42470e80 	.word	0x42470e80
 8003c0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c10:	f7fe fe10 	bl	8002834 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e0fd      	b.n	8003e1e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c22:	4b81      	ldr	r3, [pc, #516]	; (8003e28 <HAL_RCC_OscConfig+0x4d4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d106      	bne.n	8003c44 <HAL_RCC_OscConfig+0x2f0>
 8003c36:	4b7d      	ldr	r3, [pc, #500]	; (8003e2c <HAL_RCC_OscConfig+0x4d8>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	4a7c      	ldr	r2, [pc, #496]	; (8003e2c <HAL_RCC_OscConfig+0x4d8>)
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	6713      	str	r3, [r2, #112]	; 0x70
 8003c42:	e01c      	b.n	8003c7e <HAL_RCC_OscConfig+0x32a>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b05      	cmp	r3, #5
 8003c4a:	d10c      	bne.n	8003c66 <HAL_RCC_OscConfig+0x312>
 8003c4c:	4b77      	ldr	r3, [pc, #476]	; (8003e2c <HAL_RCC_OscConfig+0x4d8>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	4a76      	ldr	r2, [pc, #472]	; (8003e2c <HAL_RCC_OscConfig+0x4d8>)
 8003c52:	f043 0304 	orr.w	r3, r3, #4
 8003c56:	6713      	str	r3, [r2, #112]	; 0x70
 8003c58:	4b74      	ldr	r3, [pc, #464]	; (8003e2c <HAL_RCC_OscConfig+0x4d8>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	4a73      	ldr	r2, [pc, #460]	; (8003e2c <HAL_RCC_OscConfig+0x4d8>)
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	6713      	str	r3, [r2, #112]	; 0x70
 8003c64:	e00b      	b.n	8003c7e <HAL_RCC_OscConfig+0x32a>
 8003c66:	4b71      	ldr	r3, [pc, #452]	; (8003e2c <HAL_RCC_OscConfig+0x4d8>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	4a70      	ldr	r2, [pc, #448]	; (8003e2c <HAL_RCC_OscConfig+0x4d8>)
 8003c6c:	f023 0301 	bic.w	r3, r3, #1
 8003c70:	6713      	str	r3, [r2, #112]	; 0x70
 8003c72:	4b6e      	ldr	r3, [pc, #440]	; (8003e2c <HAL_RCC_OscConfig+0x4d8>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c76:	4a6d      	ldr	r2, [pc, #436]	; (8003e2c <HAL_RCC_OscConfig+0x4d8>)
 8003c78:	f023 0304 	bic.w	r3, r3, #4
 8003c7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d015      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c86:	f7fe fdd5 	bl	8002834 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8c:	e00a      	b.n	8003ca4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c8e:	f7fe fdd1 	bl	8002834 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e0bc      	b.n	8003e1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca4:	4b61      	ldr	r3, [pc, #388]	; (8003e2c <HAL_RCC_OscConfig+0x4d8>)
 8003ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0ee      	beq.n	8003c8e <HAL_RCC_OscConfig+0x33a>
 8003cb0:	e014      	b.n	8003cdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb2:	f7fe fdbf 	bl	8002834 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb8:	e00a      	b.n	8003cd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cba:	f7fe fdbb 	bl	8002834 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e0a6      	b.n	8003e1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd0:	4b56      	ldr	r3, [pc, #344]	; (8003e2c <HAL_RCC_OscConfig+0x4d8>)
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1ee      	bne.n	8003cba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d105      	bne.n	8003cee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce2:	4b52      	ldr	r3, [pc, #328]	; (8003e2c <HAL_RCC_OscConfig+0x4d8>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	4a51      	ldr	r2, [pc, #324]	; (8003e2c <HAL_RCC_OscConfig+0x4d8>)
 8003ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 8092 	beq.w	8003e1c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cf8:	4b4c      	ldr	r3, [pc, #304]	; (8003e2c <HAL_RCC_OscConfig+0x4d8>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 030c 	and.w	r3, r3, #12
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d05c      	beq.n	8003dbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d141      	bne.n	8003d90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0c:	4b48      	ldr	r3, [pc, #288]	; (8003e30 <HAL_RCC_OscConfig+0x4dc>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d12:	f7fe fd8f 	bl	8002834 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1a:	f7fe fd8b 	bl	8002834 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e078      	b.n	8003e1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2c:	4b3f      	ldr	r3, [pc, #252]	; (8003e2c <HAL_RCC_OscConfig+0x4d8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f0      	bne.n	8003d1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69da      	ldr	r2, [r3, #28]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	019b      	lsls	r3, r3, #6
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	3b01      	subs	r3, #1
 8003d52:	041b      	lsls	r3, r3, #16
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	061b      	lsls	r3, r3, #24
 8003d5c:	4933      	ldr	r1, [pc, #204]	; (8003e2c <HAL_RCC_OscConfig+0x4d8>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d62:	4b33      	ldr	r3, [pc, #204]	; (8003e30 <HAL_RCC_OscConfig+0x4dc>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7fe fd64 	bl	8002834 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d70:	f7fe fd60 	bl	8002834 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e04d      	b.n	8003e1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d82:	4b2a      	ldr	r3, [pc, #168]	; (8003e2c <HAL_RCC_OscConfig+0x4d8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x41c>
 8003d8e:	e045      	b.n	8003e1c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d90:	4b27      	ldr	r3, [pc, #156]	; (8003e30 <HAL_RCC_OscConfig+0x4dc>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d96:	f7fe fd4d 	bl	8002834 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9e:	f7fe fd49 	bl	8002834 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e036      	b.n	8003e1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db0:	4b1e      	ldr	r3, [pc, #120]	; (8003e2c <HAL_RCC_OscConfig+0x4d8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1f0      	bne.n	8003d9e <HAL_RCC_OscConfig+0x44a>
 8003dbc:	e02e      	b.n	8003e1c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e029      	b.n	8003e1e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dca:	4b18      	ldr	r3, [pc, #96]	; (8003e2c <HAL_RCC_OscConfig+0x4d8>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d11c      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d115      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003df2:	4013      	ands	r3, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d10d      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d106      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e000      	b.n	8003e1e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40007000 	.word	0x40007000
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	42470060 	.word	0x42470060

08003e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0cc      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e48:	4b68      	ldr	r3, [pc, #416]	; (8003fec <HAL_RCC_ClockConfig+0x1b8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d90c      	bls.n	8003e70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e56:	4b65      	ldr	r3, [pc, #404]	; (8003fec <HAL_RCC_ClockConfig+0x1b8>)
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5e:	4b63      	ldr	r3, [pc, #396]	; (8003fec <HAL_RCC_ClockConfig+0x1b8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e0b8      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d020      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e88:	4b59      	ldr	r3, [pc, #356]	; (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4a58      	ldr	r2, [pc, #352]	; (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ea0:	4b53      	ldr	r3, [pc, #332]	; (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	4a52      	ldr	r2, [pc, #328]	; (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eac:	4b50      	ldr	r3, [pc, #320]	; (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	494d      	ldr	r1, [pc, #308]	; (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d044      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d107      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed2:	4b47      	ldr	r3, [pc, #284]	; (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d119      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e07f      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d003      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eee:	2b03      	cmp	r3, #3
 8003ef0:	d107      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef2:	4b3f      	ldr	r3, [pc, #252]	; (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d109      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e06f      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f02:	4b3b      	ldr	r3, [pc, #236]	; (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e067      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f12:	4b37      	ldr	r3, [pc, #220]	; (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f023 0203 	bic.w	r2, r3, #3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	4934      	ldr	r1, [pc, #208]	; (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f24:	f7fe fc86 	bl	8002834 <HAL_GetTick>
 8003f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2a:	e00a      	b.n	8003f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f2c:	f7fe fc82 	bl	8002834 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e04f      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f42:	4b2b      	ldr	r3, [pc, #172]	; (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 020c 	and.w	r2, r3, #12
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d1eb      	bne.n	8003f2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f54:	4b25      	ldr	r3, [pc, #148]	; (8003fec <HAL_RCC_ClockConfig+0x1b8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 030f 	and.w	r3, r3, #15
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d20c      	bcs.n	8003f7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f62:	4b22      	ldr	r3, [pc, #136]	; (8003fec <HAL_RCC_ClockConfig+0x1b8>)
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6a:	4b20      	ldr	r3, [pc, #128]	; (8003fec <HAL_RCC_ClockConfig+0x1b8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d001      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e032      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f88:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	4916      	ldr	r1, [pc, #88]	; (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d009      	beq.n	8003fba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fa6:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	490e      	ldr	r1, [pc, #56]	; (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fba:	f000 f821 	bl	8004000 <HAL_RCC_GetSysClockFreq>
 8003fbe:	4601      	mov	r1, r0
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	091b      	lsrs	r3, r3, #4
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	4a0a      	ldr	r2, [pc, #40]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8003fcc:	5cd3      	ldrb	r3, [r2, r3]
 8003fce:	fa21 f303 	lsr.w	r3, r1, r3
 8003fd2:	4a09      	ldr	r2, [pc, #36]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fd6:	4b09      	ldr	r3, [pc, #36]	; (8003ffc <HAL_RCC_ClockConfig+0x1c8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe fbe6 	bl	80027ac <HAL_InitTick>

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40023c00 	.word	0x40023c00
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	08006158 	.word	0x08006158
 8003ff8:	20000000 	.word	0x20000000
 8003ffc:	20000004 	.word	0x20000004

08004000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	607b      	str	r3, [r7, #4]
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	2300      	movs	r3, #0
 8004010:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004016:	4b63      	ldr	r3, [pc, #396]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	2b04      	cmp	r3, #4
 8004020:	d007      	beq.n	8004032 <HAL_RCC_GetSysClockFreq+0x32>
 8004022:	2b08      	cmp	r3, #8
 8004024:	d008      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x38>
 8004026:	2b00      	cmp	r3, #0
 8004028:	f040 80b4 	bne.w	8004194 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800402c:	4b5e      	ldr	r3, [pc, #376]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800402e:	60bb      	str	r3, [r7, #8]
       break;
 8004030:	e0b3      	b.n	800419a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004032:	4b5e      	ldr	r3, [pc, #376]	; (80041ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004034:	60bb      	str	r3, [r7, #8]
      break;
 8004036:	e0b0      	b.n	800419a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004038:	4b5a      	ldr	r3, [pc, #360]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004040:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004042:	4b58      	ldr	r3, [pc, #352]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d04a      	beq.n	80040e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800404e:	4b55      	ldr	r3, [pc, #340]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	099b      	lsrs	r3, r3, #6
 8004054:	f04f 0400 	mov.w	r4, #0
 8004058:	f240 11ff 	movw	r1, #511	; 0x1ff
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	ea03 0501 	and.w	r5, r3, r1
 8004064:	ea04 0602 	and.w	r6, r4, r2
 8004068:	4629      	mov	r1, r5
 800406a:	4632      	mov	r2, r6
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	f04f 0400 	mov.w	r4, #0
 8004074:	0154      	lsls	r4, r2, #5
 8004076:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800407a:	014b      	lsls	r3, r1, #5
 800407c:	4619      	mov	r1, r3
 800407e:	4622      	mov	r2, r4
 8004080:	1b49      	subs	r1, r1, r5
 8004082:	eb62 0206 	sbc.w	r2, r2, r6
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	f04f 0400 	mov.w	r4, #0
 800408e:	0194      	lsls	r4, r2, #6
 8004090:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004094:	018b      	lsls	r3, r1, #6
 8004096:	1a5b      	subs	r3, r3, r1
 8004098:	eb64 0402 	sbc.w	r4, r4, r2
 800409c:	f04f 0100 	mov.w	r1, #0
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	00e2      	lsls	r2, r4, #3
 80040a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040aa:	00d9      	lsls	r1, r3, #3
 80040ac:	460b      	mov	r3, r1
 80040ae:	4614      	mov	r4, r2
 80040b0:	195b      	adds	r3, r3, r5
 80040b2:	eb44 0406 	adc.w	r4, r4, r6
 80040b6:	f04f 0100 	mov.w	r1, #0
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	0262      	lsls	r2, r4, #9
 80040c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80040c4:	0259      	lsls	r1, r3, #9
 80040c6:	460b      	mov	r3, r1
 80040c8:	4614      	mov	r4, r2
 80040ca:	4618      	mov	r0, r3
 80040cc:	4621      	mov	r1, r4
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f04f 0400 	mov.w	r4, #0
 80040d4:	461a      	mov	r2, r3
 80040d6:	4623      	mov	r3, r4
 80040d8:	f7fc fcf0 	bl	8000abc <__aeabi_uldivmod>
 80040dc:	4603      	mov	r3, r0
 80040de:	460c      	mov	r4, r1
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	e049      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e4:	4b2f      	ldr	r3, [pc, #188]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	099b      	lsrs	r3, r3, #6
 80040ea:	f04f 0400 	mov.w	r4, #0
 80040ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	ea03 0501 	and.w	r5, r3, r1
 80040fa:	ea04 0602 	and.w	r6, r4, r2
 80040fe:	4629      	mov	r1, r5
 8004100:	4632      	mov	r2, r6
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	f04f 0400 	mov.w	r4, #0
 800410a:	0154      	lsls	r4, r2, #5
 800410c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004110:	014b      	lsls	r3, r1, #5
 8004112:	4619      	mov	r1, r3
 8004114:	4622      	mov	r2, r4
 8004116:	1b49      	subs	r1, r1, r5
 8004118:	eb62 0206 	sbc.w	r2, r2, r6
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	f04f 0400 	mov.w	r4, #0
 8004124:	0194      	lsls	r4, r2, #6
 8004126:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800412a:	018b      	lsls	r3, r1, #6
 800412c:	1a5b      	subs	r3, r3, r1
 800412e:	eb64 0402 	sbc.w	r4, r4, r2
 8004132:	f04f 0100 	mov.w	r1, #0
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	00e2      	lsls	r2, r4, #3
 800413c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004140:	00d9      	lsls	r1, r3, #3
 8004142:	460b      	mov	r3, r1
 8004144:	4614      	mov	r4, r2
 8004146:	195b      	adds	r3, r3, r5
 8004148:	eb44 0406 	adc.w	r4, r4, r6
 800414c:	f04f 0100 	mov.w	r1, #0
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	02a2      	lsls	r2, r4, #10
 8004156:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800415a:	0299      	lsls	r1, r3, #10
 800415c:	460b      	mov	r3, r1
 800415e:	4614      	mov	r4, r2
 8004160:	4618      	mov	r0, r3
 8004162:	4621      	mov	r1, r4
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f04f 0400 	mov.w	r4, #0
 800416a:	461a      	mov	r2, r3
 800416c:	4623      	mov	r3, r4
 800416e:	f7fc fca5 	bl	8000abc <__aeabi_uldivmod>
 8004172:	4603      	mov	r3, r0
 8004174:	460c      	mov	r4, r1
 8004176:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004178:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	0c1b      	lsrs	r3, r3, #16
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	3301      	adds	r3, #1
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004190:	60bb      	str	r3, [r7, #8]
      break;
 8004192:	e002      	b.n	800419a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004196:	60bb      	str	r3, [r7, #8]
      break;
 8004198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800419a:	68bb      	ldr	r3, [r7, #8]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041a4:	40023800 	.word	0x40023800
 80041a8:	00f42400 	.word	0x00f42400
 80041ac:	007a1200 	.word	0x007a1200

080041b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b4:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041b6:	681b      	ldr	r3, [r3, #0]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	20000000 	.word	0x20000000

080041c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041cc:	f7ff fff0 	bl	80041b0 <HAL_RCC_GetHCLKFreq>
 80041d0:	4601      	mov	r1, r0
 80041d2:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	0a9b      	lsrs	r3, r3, #10
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	4a03      	ldr	r2, [pc, #12]	; (80041ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80041de:	5cd3      	ldrb	r3, [r2, r3]
 80041e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40023800 	.word	0x40023800
 80041ec:	08006168 	.word	0x08006168

080041f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041f4:	f7ff ffdc 	bl	80041b0 <HAL_RCC_GetHCLKFreq>
 80041f8:	4601      	mov	r1, r0
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	0b5b      	lsrs	r3, r3, #13
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	4a03      	ldr	r2, [pc, #12]	; (8004214 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004206:	5cd3      	ldrb	r3, [r2, r3]
 8004208:	fa21 f303 	lsr.w	r3, r1, r3
}
 800420c:	4618      	mov	r0, r3
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40023800 	.word	0x40023800
 8004214:	08006168 	.word	0x08006168

08004218 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e01d      	b.n	8004266 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fe f87e 	bl	8002340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3304      	adds	r3, #4
 8004254:	4619      	mov	r1, r3
 8004256:	4610      	mov	r0, r2
 8004258:	f000 fa1e 	bl	8004698 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800426e:	b480      	push	{r7}
 8004270:	b085      	sub	sp, #20
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2202      	movs	r2, #2
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b06      	cmp	r3, #6
 800428e:	d007      	beq.n	80042a0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e01d      	b.n	8004304 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d106      	bne.n	80042e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f815 	bl	800430c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2202      	movs	r2, #2
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3304      	adds	r3, #4
 80042f2:	4619      	mov	r1, r3
 80042f4:	4610      	mov	r0, r2
 80042f6:	f000 f9cf 	bl	8004698 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2201      	movs	r2, #1
 8004330:	6839      	ldr	r1, [r7, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fc9a 	bl	8004c6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a15      	ldr	r2, [pc, #84]	; (8004394 <HAL_TIM_PWM_Start+0x74>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <HAL_TIM_PWM_Start+0x2c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a14      	ldr	r2, [pc, #80]	; (8004398 <HAL_TIM_PWM_Start+0x78>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d101      	bne.n	8004350 <HAL_TIM_PWM_Start+0x30>
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <HAL_TIM_PWM_Start+0x32>
 8004350:	2300      	movs	r3, #0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d007      	beq.n	8004366 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004364:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b06      	cmp	r3, #6
 8004376:	d007      	beq.n	8004388 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40010000 	.word	0x40010000
 8004398:	40010400 	.word	0x40010400

0800439c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e0b4      	b.n	8004520 <HAL_TIM_PWM_ConfigChannel+0x184>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2202      	movs	r2, #2
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	f200 809f 	bhi.w	800450c <HAL_TIM_PWM_ConfigChannel+0x170>
 80043ce:	a201      	add	r2, pc, #4	; (adr r2, 80043d4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80043d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d4:	08004409 	.word	0x08004409
 80043d8:	0800450d 	.word	0x0800450d
 80043dc:	0800450d 	.word	0x0800450d
 80043e0:	0800450d 	.word	0x0800450d
 80043e4:	08004449 	.word	0x08004449
 80043e8:	0800450d 	.word	0x0800450d
 80043ec:	0800450d 	.word	0x0800450d
 80043f0:	0800450d 	.word	0x0800450d
 80043f4:	0800448b 	.word	0x0800448b
 80043f8:	0800450d 	.word	0x0800450d
 80043fc:	0800450d 	.word	0x0800450d
 8004400:	0800450d 	.word	0x0800450d
 8004404:	080044cb 	.word	0x080044cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	4618      	mov	r0, r3
 8004410:	f000 f9e2 	bl	80047d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0208 	orr.w	r2, r2, #8
 8004422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0204 	bic.w	r2, r2, #4
 8004432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6999      	ldr	r1, [r3, #24]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	619a      	str	r2, [r3, #24]
      break;
 8004446:	e062      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68b9      	ldr	r1, [r7, #8]
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fa32 	bl	80048b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699a      	ldr	r2, [r3, #24]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6999      	ldr	r1, [r3, #24]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	021a      	lsls	r2, r3, #8
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	619a      	str	r2, [r3, #24]
      break;
 8004488:	e041      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fa87 	bl	80049a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69da      	ldr	r2, [r3, #28]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0208 	orr.w	r2, r2, #8
 80044a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0204 	bic.w	r2, r2, #4
 80044b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69d9      	ldr	r1, [r3, #28]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	61da      	str	r2, [r3, #28]
      break;
 80044c8:	e021      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fadb 	bl	8004a8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69da      	ldr	r2, [r3, #28]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69da      	ldr	r2, [r3, #28]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69d9      	ldr	r1, [r3, #28]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	021a      	lsls	r2, r3, #8
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	61da      	str	r2, [r3, #28]
      break;
 800450a:	e000      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800450c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <HAL_TIM_ConfigClockSource+0x18>
 800453c:	2302      	movs	r3, #2
 800453e:	e0a6      	b.n	800468e <HAL_TIM_ConfigClockSource+0x166>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800455e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004566:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b40      	cmp	r3, #64	; 0x40
 8004576:	d067      	beq.n	8004648 <HAL_TIM_ConfigClockSource+0x120>
 8004578:	2b40      	cmp	r3, #64	; 0x40
 800457a:	d80b      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x6c>
 800457c:	2b10      	cmp	r3, #16
 800457e:	d073      	beq.n	8004668 <HAL_TIM_ConfigClockSource+0x140>
 8004580:	2b10      	cmp	r3, #16
 8004582:	d802      	bhi.n	800458a <HAL_TIM_ConfigClockSource+0x62>
 8004584:	2b00      	cmp	r3, #0
 8004586:	d06f      	beq.n	8004668 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004588:	e078      	b.n	800467c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800458a:	2b20      	cmp	r3, #32
 800458c:	d06c      	beq.n	8004668 <HAL_TIM_ConfigClockSource+0x140>
 800458e:	2b30      	cmp	r3, #48	; 0x30
 8004590:	d06a      	beq.n	8004668 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004592:	e073      	b.n	800467c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004594:	2b70      	cmp	r3, #112	; 0x70
 8004596:	d00d      	beq.n	80045b4 <HAL_TIM_ConfigClockSource+0x8c>
 8004598:	2b70      	cmp	r3, #112	; 0x70
 800459a:	d804      	bhi.n	80045a6 <HAL_TIM_ConfigClockSource+0x7e>
 800459c:	2b50      	cmp	r3, #80	; 0x50
 800459e:	d033      	beq.n	8004608 <HAL_TIM_ConfigClockSource+0xe0>
 80045a0:	2b60      	cmp	r3, #96	; 0x60
 80045a2:	d041      	beq.n	8004628 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80045a4:	e06a      	b.n	800467c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80045a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045aa:	d066      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x152>
 80045ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045b0:	d017      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80045b2:	e063      	b.n	800467c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	6899      	ldr	r1, [r3, #8]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f000 fb32 	bl	8004c2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	609a      	str	r2, [r3, #8]
      break;
 80045e0:	e04c      	b.n	800467c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6899      	ldr	r1, [r3, #8]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f000 fb1b 	bl	8004c2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004604:	609a      	str	r2, [r3, #8]
      break;
 8004606:	e039      	b.n	800467c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6818      	ldr	r0, [r3, #0]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	6859      	ldr	r1, [r3, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	461a      	mov	r2, r3
 8004616:	f000 fa8f 	bl	8004b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2150      	movs	r1, #80	; 0x50
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fae8 	bl	8004bf6 <TIM_ITRx_SetConfig>
      break;
 8004626:	e029      	b.n	800467c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6818      	ldr	r0, [r3, #0]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	6859      	ldr	r1, [r3, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	461a      	mov	r2, r3
 8004636:	f000 faae 	bl	8004b96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2160      	movs	r1, #96	; 0x60
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fad8 	bl	8004bf6 <TIM_ITRx_SetConfig>
      break;
 8004646:	e019      	b.n	800467c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	6859      	ldr	r1, [r3, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	461a      	mov	r2, r3
 8004656:	f000 fa6f 	bl	8004b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2140      	movs	r1, #64	; 0x40
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fac8 	bl	8004bf6 <TIM_ITRx_SetConfig>
      break;
 8004666:	e009      	b.n	800467c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f000 fabf 	bl	8004bf6 <TIM_ITRx_SetConfig>
      break;
 8004678:	e000      	b.n	800467c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800467a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a40      	ldr	r2, [pc, #256]	; (80047ac <TIM_Base_SetConfig+0x114>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d013      	beq.n	80046d8 <TIM_Base_SetConfig+0x40>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b6:	d00f      	beq.n	80046d8 <TIM_Base_SetConfig+0x40>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a3d      	ldr	r2, [pc, #244]	; (80047b0 <TIM_Base_SetConfig+0x118>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00b      	beq.n	80046d8 <TIM_Base_SetConfig+0x40>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a3c      	ldr	r2, [pc, #240]	; (80047b4 <TIM_Base_SetConfig+0x11c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d007      	beq.n	80046d8 <TIM_Base_SetConfig+0x40>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a3b      	ldr	r2, [pc, #236]	; (80047b8 <TIM_Base_SetConfig+0x120>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d003      	beq.n	80046d8 <TIM_Base_SetConfig+0x40>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a3a      	ldr	r2, [pc, #232]	; (80047bc <TIM_Base_SetConfig+0x124>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d108      	bne.n	80046ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a2f      	ldr	r2, [pc, #188]	; (80047ac <TIM_Base_SetConfig+0x114>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d02b      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f8:	d027      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a2c      	ldr	r2, [pc, #176]	; (80047b0 <TIM_Base_SetConfig+0x118>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d023      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a2b      	ldr	r2, [pc, #172]	; (80047b4 <TIM_Base_SetConfig+0x11c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d01f      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a2a      	ldr	r2, [pc, #168]	; (80047b8 <TIM_Base_SetConfig+0x120>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d01b      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a29      	ldr	r2, [pc, #164]	; (80047bc <TIM_Base_SetConfig+0x124>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d017      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a28      	ldr	r2, [pc, #160]	; (80047c0 <TIM_Base_SetConfig+0x128>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d013      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a27      	ldr	r2, [pc, #156]	; (80047c4 <TIM_Base_SetConfig+0x12c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00f      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a26      	ldr	r2, [pc, #152]	; (80047c8 <TIM_Base_SetConfig+0x130>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00b      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a25      	ldr	r2, [pc, #148]	; (80047cc <TIM_Base_SetConfig+0x134>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d007      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a24      	ldr	r2, [pc, #144]	; (80047d0 <TIM_Base_SetConfig+0x138>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d003      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a23      	ldr	r2, [pc, #140]	; (80047d4 <TIM_Base_SetConfig+0x13c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d108      	bne.n	800475c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a0a      	ldr	r2, [pc, #40]	; (80047ac <TIM_Base_SetConfig+0x114>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d003      	beq.n	8004790 <TIM_Base_SetConfig+0xf8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a0c      	ldr	r2, [pc, #48]	; (80047bc <TIM_Base_SetConfig+0x124>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d103      	bne.n	8004798 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	615a      	str	r2, [r3, #20]
}
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40010000 	.word	0x40010000
 80047b0:	40000400 	.word	0x40000400
 80047b4:	40000800 	.word	0x40000800
 80047b8:	40000c00 	.word	0x40000c00
 80047bc:	40010400 	.word	0x40010400
 80047c0:	40014000 	.word	0x40014000
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40014800 	.word	0x40014800
 80047cc:	40001800 	.word	0x40001800
 80047d0:	40001c00 	.word	0x40001c00
 80047d4:	40002000 	.word	0x40002000

080047d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	f023 0201 	bic.w	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0303 	bic.w	r3, r3, #3
 800480e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f023 0302 	bic.w	r3, r3, #2
 8004820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4313      	orrs	r3, r2
 800482a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a20      	ldr	r2, [pc, #128]	; (80048b0 <TIM_OC1_SetConfig+0xd8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d003      	beq.n	800483c <TIM_OC1_SetConfig+0x64>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a1f      	ldr	r2, [pc, #124]	; (80048b4 <TIM_OC1_SetConfig+0xdc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d10c      	bne.n	8004856 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f023 0308 	bic.w	r3, r3, #8
 8004842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f023 0304 	bic.w	r3, r3, #4
 8004854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a15      	ldr	r2, [pc, #84]	; (80048b0 <TIM_OC1_SetConfig+0xd8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d003      	beq.n	8004866 <TIM_OC1_SetConfig+0x8e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a14      	ldr	r2, [pc, #80]	; (80048b4 <TIM_OC1_SetConfig+0xdc>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d111      	bne.n	800488a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800486c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	621a      	str	r2, [r3, #32]
}
 80048a4:	bf00      	nop
 80048a6:	371c      	adds	r7, #28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	40010000 	.word	0x40010000
 80048b4:	40010400 	.word	0x40010400

080048b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	f023 0210 	bic.w	r2, r3, #16
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f023 0320 	bic.w	r3, r3, #32
 8004902:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a22      	ldr	r2, [pc, #136]	; (800499c <TIM_OC2_SetConfig+0xe4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d003      	beq.n	8004920 <TIM_OC2_SetConfig+0x68>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a21      	ldr	r2, [pc, #132]	; (80049a0 <TIM_OC2_SetConfig+0xe8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d10d      	bne.n	800493c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800493a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a17      	ldr	r2, [pc, #92]	; (800499c <TIM_OC2_SetConfig+0xe4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d003      	beq.n	800494c <TIM_OC2_SetConfig+0x94>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a16      	ldr	r2, [pc, #88]	; (80049a0 <TIM_OC2_SetConfig+0xe8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d113      	bne.n	8004974 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004952:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800495a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	621a      	str	r2, [r3, #32]
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40010000 	.word	0x40010000
 80049a0:	40010400 	.word	0x40010400

080049a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a21      	ldr	r2, [pc, #132]	; (8004a84 <TIM_OC3_SetConfig+0xe0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d003      	beq.n	8004a0a <TIM_OC3_SetConfig+0x66>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a20      	ldr	r2, [pc, #128]	; (8004a88 <TIM_OC3_SetConfig+0xe4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d10d      	bne.n	8004a26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	021b      	lsls	r3, r3, #8
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a16      	ldr	r2, [pc, #88]	; (8004a84 <TIM_OC3_SetConfig+0xe0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d003      	beq.n	8004a36 <TIM_OC3_SetConfig+0x92>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a15      	ldr	r2, [pc, #84]	; (8004a88 <TIM_OC3_SetConfig+0xe4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d113      	bne.n	8004a5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	621a      	str	r2, [r3, #32]
}
 8004a78:	bf00      	nop
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	40010000 	.word	0x40010000
 8004a88:	40010400 	.word	0x40010400

08004a8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	021b      	lsls	r3, r3, #8
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	031b      	lsls	r3, r3, #12
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a12      	ldr	r2, [pc, #72]	; (8004b30 <TIM_OC4_SetConfig+0xa4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d003      	beq.n	8004af4 <TIM_OC4_SetConfig+0x68>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a11      	ldr	r2, [pc, #68]	; (8004b34 <TIM_OC4_SetConfig+0xa8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d109      	bne.n	8004b08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004afa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	019b      	lsls	r3, r3, #6
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	621a      	str	r2, [r3, #32]
}
 8004b22:	bf00      	nop
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40010000 	.word	0x40010000
 8004b34:	40010400 	.word	0x40010400

08004b38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	f023 0201 	bic.w	r2, r3, #1
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f023 030a 	bic.w	r3, r3, #10
 8004b74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b087      	sub	sp, #28
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	f023 0210 	bic.w	r2, r3, #16
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	031b      	lsls	r3, r3, #12
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	621a      	str	r2, [r3, #32]
}
 8004bea:	bf00      	nop
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f043 0307 	orr.w	r3, r3, #7
 8004c18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	609a      	str	r2, [r3, #8]
}
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	021a      	lsls	r2, r3, #8
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	609a      	str	r2, [r3, #8]
}
 8004c60:	bf00      	nop
 8004c62:	371c      	adds	r7, #28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 031f 	and.w	r3, r3, #31
 8004c7e:	2201      	movs	r2, #1
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a1a      	ldr	r2, [r3, #32]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	401a      	ands	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a1a      	ldr	r2, [r3, #32]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 031f 	and.w	r3, r3, #31
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	621a      	str	r2, [r3, #32]
}
 8004caa:	bf00      	nop
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
	...

08004cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e05a      	b.n	8004d86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a21      	ldr	r2, [pc, #132]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d022      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d1c:	d01d      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a1d      	ldr	r2, [pc, #116]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d018      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a1b      	ldr	r2, [pc, #108]	; (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d013      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a1a      	ldr	r2, [pc, #104]	; (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00e      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a18      	ldr	r2, [pc, #96]	; (8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d009      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a17      	ldr	r2, [pc, #92]	; (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d004      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a15      	ldr	r2, [pc, #84]	; (8004dac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d10c      	bne.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40010000 	.word	0x40010000
 8004d98:	40000400 	.word	0x40000400
 8004d9c:	40000800 	.word	0x40000800
 8004da0:	40000c00 	.word	0x40000c00
 8004da4:	40010400 	.word	0x40010400
 8004da8:	40014000 	.word	0x40014000
 8004dac:	40001800 	.word	0x40001800

08004db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e03f      	b.n	8004e42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fd fb62 	bl	80024a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2224      	movs	r2, #36	; 0x24
 8004de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f9b1 	bl	800515c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695a      	ldr	r2, [r3, #20]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b088      	sub	sp, #32
 8004e4e:	af02      	add	r7, sp, #8
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	603b      	str	r3, [r7, #0]
 8004e56:	4613      	mov	r3, r2
 8004e58:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b20      	cmp	r3, #32
 8004e68:	f040 8083 	bne.w	8004f72 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <HAL_UART_Transmit+0x2e>
 8004e72:	88fb      	ldrh	r3, [r7, #6]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e07b      	b.n	8004f74 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d101      	bne.n	8004e8a <HAL_UART_Transmit+0x40>
 8004e86:	2302      	movs	r3, #2
 8004e88:	e074      	b.n	8004f74 <HAL_UART_Transmit+0x12a>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2221      	movs	r2, #33	; 0x21
 8004e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004ea0:	f7fd fcc8 	bl	8002834 <HAL_GetTick>
 8004ea4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	88fa      	ldrh	r2, [r7, #6]
 8004eaa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	88fa      	ldrh	r2, [r7, #6]
 8004eb0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004eba:	e042      	b.n	8004f42 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed2:	d122      	bne.n	8004f1a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2200      	movs	r2, #0
 8004edc:	2180      	movs	r1, #128	; 0x80
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 f8f2 	bl	80050c8 <UART_WaitOnFlagUntilTimeout>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e042      	b.n	8004f74 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f00:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d103      	bne.n	8004f12 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	3302      	adds	r3, #2
 8004f0e:	60bb      	str	r3, [r7, #8]
 8004f10:	e017      	b.n	8004f42 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	3301      	adds	r3, #1
 8004f16:	60bb      	str	r3, [r7, #8]
 8004f18:	e013      	b.n	8004f42 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2200      	movs	r2, #0
 8004f22:	2180      	movs	r1, #128	; 0x80
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 f8cf 	bl	80050c8 <UART_WaitOnFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e01f      	b.n	8004f74 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	60ba      	str	r2, [r7, #8]
 8004f3a:	781a      	ldrb	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1b7      	bne.n	8004ebc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2200      	movs	r2, #0
 8004f54:	2140      	movs	r1, #64	; 0x40
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f8b6 	bl	80050c8 <UART_WaitOnFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e006      	b.n	8004f74 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	e000      	b.n	8004f74 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004f72:	2302      	movs	r3, #2
  }
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b20      	cmp	r3, #32
 8004f9a:	f040 8090 	bne.w	80050be <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <HAL_UART_Receive+0x2e>
 8004fa4:	88fb      	ldrh	r3, [r7, #6]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e088      	b.n	80050c0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <HAL_UART_Receive+0x40>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e081      	b.n	80050c0 <HAL_UART_Receive+0x144>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2222      	movs	r2, #34	; 0x22
 8004fce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004fd2:	f7fd fc2f 	bl	8002834 <HAL_GetTick>
 8004fd6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	88fa      	ldrh	r2, [r7, #6]
 8004fdc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	88fa      	ldrh	r2, [r7, #6]
 8004fe2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004fec:	e05c      	b.n	80050a8 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005004:	d12b      	bne.n	800505e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2200      	movs	r2, #0
 800500e:	2120      	movs	r1, #32
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 f859 	bl	80050c8 <UART_WaitOnFlagUntilTimeout>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e04f      	b.n	80050c0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10c      	bne.n	8005046 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	b29b      	uxth	r3, r3
 8005034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005038:	b29a      	uxth	r2, r3
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	3302      	adds	r3, #2
 8005042:	60bb      	str	r3, [r7, #8]
 8005044:	e030      	b.n	80050a8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	b29b      	uxth	r3, r3
 800504e:	b2db      	uxtb	r3, r3
 8005050:	b29a      	uxth	r2, r3
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	3301      	adds	r3, #1
 800505a:	60bb      	str	r3, [r7, #8]
 800505c:	e024      	b.n	80050a8 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2200      	movs	r2, #0
 8005066:	2120      	movs	r1, #32
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 f82d 	bl	80050c8 <UART_WaitOnFlagUntilTimeout>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e023      	b.n	80050c0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d108      	bne.n	8005092 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6859      	ldr	r1, [r3, #4]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	60ba      	str	r2, [r7, #8]
 800508c:	b2ca      	uxtb	r2, r1
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	e00a      	b.n	80050a8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	b2da      	uxtb	r2, r3
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	1c59      	adds	r1, r3, #1
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d19d      	bne.n	8004fee <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e000      	b.n	80050c0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80050be:	2302      	movs	r3, #2
  }
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	4613      	mov	r3, r2
 80050d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d8:	e02c      	b.n	8005134 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050e0:	d028      	beq.n	8005134 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d007      	beq.n	80050f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80050e8:	f7fd fba4 	bl	8002834 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d21d      	bcs.n	8005134 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005106:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695a      	ldr	r2, [r3, #20]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0201 	bic.w	r2, r2, #1
 8005116:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e00f      	b.n	8005154 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	4013      	ands	r3, r2
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	429a      	cmp	r2, r3
 8005142:	bf0c      	ite	eq
 8005144:	2301      	moveq	r3, #1
 8005146:	2300      	movne	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	461a      	mov	r2, r3
 800514c:	79fb      	ldrb	r3, [r7, #7]
 800514e:	429a      	cmp	r2, r3
 8005150:	d0c3      	beq.n	80050da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800515c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005160:	b085      	sub	sp, #20
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800519e:	f023 030c 	bic.w	r3, r3, #12
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6812      	ldr	r2, [r2, #0]
 80051a6:	68f9      	ldr	r1, [r7, #12]
 80051a8:	430b      	orrs	r3, r1
 80051aa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699a      	ldr	r2, [r3, #24]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ca:	f040 818b 	bne.w	80054e4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4ac1      	ldr	r2, [pc, #772]	; (80054d8 <UART_SetConfig+0x37c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d005      	beq.n	80051e4 <UART_SetConfig+0x88>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4abf      	ldr	r2, [pc, #764]	; (80054dc <UART_SetConfig+0x380>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	f040 80bd 	bne.w	800535e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051e4:	f7ff f804 	bl	80041f0 <HAL_RCC_GetPCLK2Freq>
 80051e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	461d      	mov	r5, r3
 80051ee:	f04f 0600 	mov.w	r6, #0
 80051f2:	46a8      	mov	r8, r5
 80051f4:	46b1      	mov	r9, r6
 80051f6:	eb18 0308 	adds.w	r3, r8, r8
 80051fa:	eb49 0409 	adc.w	r4, r9, r9
 80051fe:	4698      	mov	r8, r3
 8005200:	46a1      	mov	r9, r4
 8005202:	eb18 0805 	adds.w	r8, r8, r5
 8005206:	eb49 0906 	adc.w	r9, r9, r6
 800520a:	f04f 0100 	mov.w	r1, #0
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005216:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800521a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800521e:	4688      	mov	r8, r1
 8005220:	4691      	mov	r9, r2
 8005222:	eb18 0005 	adds.w	r0, r8, r5
 8005226:	eb49 0106 	adc.w	r1, r9, r6
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	461d      	mov	r5, r3
 8005230:	f04f 0600 	mov.w	r6, #0
 8005234:	196b      	adds	r3, r5, r5
 8005236:	eb46 0406 	adc.w	r4, r6, r6
 800523a:	461a      	mov	r2, r3
 800523c:	4623      	mov	r3, r4
 800523e:	f7fb fc3d 	bl	8000abc <__aeabi_uldivmod>
 8005242:	4603      	mov	r3, r0
 8005244:	460c      	mov	r4, r1
 8005246:	461a      	mov	r2, r3
 8005248:	4ba5      	ldr	r3, [pc, #660]	; (80054e0 <UART_SetConfig+0x384>)
 800524a:	fba3 2302 	umull	r2, r3, r3, r2
 800524e:	095b      	lsrs	r3, r3, #5
 8005250:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	461d      	mov	r5, r3
 8005258:	f04f 0600 	mov.w	r6, #0
 800525c:	46a9      	mov	r9, r5
 800525e:	46b2      	mov	sl, r6
 8005260:	eb19 0309 	adds.w	r3, r9, r9
 8005264:	eb4a 040a 	adc.w	r4, sl, sl
 8005268:	4699      	mov	r9, r3
 800526a:	46a2      	mov	sl, r4
 800526c:	eb19 0905 	adds.w	r9, r9, r5
 8005270:	eb4a 0a06 	adc.w	sl, sl, r6
 8005274:	f04f 0100 	mov.w	r1, #0
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005280:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005284:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005288:	4689      	mov	r9, r1
 800528a:	4692      	mov	sl, r2
 800528c:	eb19 0005 	adds.w	r0, r9, r5
 8005290:	eb4a 0106 	adc.w	r1, sl, r6
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	461d      	mov	r5, r3
 800529a:	f04f 0600 	mov.w	r6, #0
 800529e:	196b      	adds	r3, r5, r5
 80052a0:	eb46 0406 	adc.w	r4, r6, r6
 80052a4:	461a      	mov	r2, r3
 80052a6:	4623      	mov	r3, r4
 80052a8:	f7fb fc08 	bl	8000abc <__aeabi_uldivmod>
 80052ac:	4603      	mov	r3, r0
 80052ae:	460c      	mov	r4, r1
 80052b0:	461a      	mov	r2, r3
 80052b2:	4b8b      	ldr	r3, [pc, #556]	; (80054e0 <UART_SetConfig+0x384>)
 80052b4:	fba3 1302 	umull	r1, r3, r3, r2
 80052b8:	095b      	lsrs	r3, r3, #5
 80052ba:	2164      	movs	r1, #100	; 0x64
 80052bc:	fb01 f303 	mul.w	r3, r1, r3
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	3332      	adds	r3, #50	; 0x32
 80052c6:	4a86      	ldr	r2, [pc, #536]	; (80054e0 <UART_SetConfig+0x384>)
 80052c8:	fba2 2303 	umull	r2, r3, r2, r3
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052d4:	4498      	add	r8, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	461d      	mov	r5, r3
 80052da:	f04f 0600 	mov.w	r6, #0
 80052de:	46a9      	mov	r9, r5
 80052e0:	46b2      	mov	sl, r6
 80052e2:	eb19 0309 	adds.w	r3, r9, r9
 80052e6:	eb4a 040a 	adc.w	r4, sl, sl
 80052ea:	4699      	mov	r9, r3
 80052ec:	46a2      	mov	sl, r4
 80052ee:	eb19 0905 	adds.w	r9, r9, r5
 80052f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80052f6:	f04f 0100 	mov.w	r1, #0
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005302:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005306:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800530a:	4689      	mov	r9, r1
 800530c:	4692      	mov	sl, r2
 800530e:	eb19 0005 	adds.w	r0, r9, r5
 8005312:	eb4a 0106 	adc.w	r1, sl, r6
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	461d      	mov	r5, r3
 800531c:	f04f 0600 	mov.w	r6, #0
 8005320:	196b      	adds	r3, r5, r5
 8005322:	eb46 0406 	adc.w	r4, r6, r6
 8005326:	461a      	mov	r2, r3
 8005328:	4623      	mov	r3, r4
 800532a:	f7fb fbc7 	bl	8000abc <__aeabi_uldivmod>
 800532e:	4603      	mov	r3, r0
 8005330:	460c      	mov	r4, r1
 8005332:	461a      	mov	r2, r3
 8005334:	4b6a      	ldr	r3, [pc, #424]	; (80054e0 <UART_SetConfig+0x384>)
 8005336:	fba3 1302 	umull	r1, r3, r3, r2
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	2164      	movs	r1, #100	; 0x64
 800533e:	fb01 f303 	mul.w	r3, r1, r3
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	3332      	adds	r3, #50	; 0x32
 8005348:	4a65      	ldr	r2, [pc, #404]	; (80054e0 <UART_SetConfig+0x384>)
 800534a:	fba2 2303 	umull	r2, r3, r2, r3
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	f003 0207 	and.w	r2, r3, #7
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4442      	add	r2, r8
 800535a:	609a      	str	r2, [r3, #8]
 800535c:	e26f      	b.n	800583e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800535e:	f7fe ff33 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 8005362:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	461d      	mov	r5, r3
 8005368:	f04f 0600 	mov.w	r6, #0
 800536c:	46a8      	mov	r8, r5
 800536e:	46b1      	mov	r9, r6
 8005370:	eb18 0308 	adds.w	r3, r8, r8
 8005374:	eb49 0409 	adc.w	r4, r9, r9
 8005378:	4698      	mov	r8, r3
 800537a:	46a1      	mov	r9, r4
 800537c:	eb18 0805 	adds.w	r8, r8, r5
 8005380:	eb49 0906 	adc.w	r9, r9, r6
 8005384:	f04f 0100 	mov.w	r1, #0
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005390:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005394:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005398:	4688      	mov	r8, r1
 800539a:	4691      	mov	r9, r2
 800539c:	eb18 0005 	adds.w	r0, r8, r5
 80053a0:	eb49 0106 	adc.w	r1, r9, r6
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	461d      	mov	r5, r3
 80053aa:	f04f 0600 	mov.w	r6, #0
 80053ae:	196b      	adds	r3, r5, r5
 80053b0:	eb46 0406 	adc.w	r4, r6, r6
 80053b4:	461a      	mov	r2, r3
 80053b6:	4623      	mov	r3, r4
 80053b8:	f7fb fb80 	bl	8000abc <__aeabi_uldivmod>
 80053bc:	4603      	mov	r3, r0
 80053be:	460c      	mov	r4, r1
 80053c0:	461a      	mov	r2, r3
 80053c2:	4b47      	ldr	r3, [pc, #284]	; (80054e0 <UART_SetConfig+0x384>)
 80053c4:	fba3 2302 	umull	r2, r3, r3, r2
 80053c8:	095b      	lsrs	r3, r3, #5
 80053ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	461d      	mov	r5, r3
 80053d2:	f04f 0600 	mov.w	r6, #0
 80053d6:	46a9      	mov	r9, r5
 80053d8:	46b2      	mov	sl, r6
 80053da:	eb19 0309 	adds.w	r3, r9, r9
 80053de:	eb4a 040a 	adc.w	r4, sl, sl
 80053e2:	4699      	mov	r9, r3
 80053e4:	46a2      	mov	sl, r4
 80053e6:	eb19 0905 	adds.w	r9, r9, r5
 80053ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80053ee:	f04f 0100 	mov.w	r1, #0
 80053f2:	f04f 0200 	mov.w	r2, #0
 80053f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005402:	4689      	mov	r9, r1
 8005404:	4692      	mov	sl, r2
 8005406:	eb19 0005 	adds.w	r0, r9, r5
 800540a:	eb4a 0106 	adc.w	r1, sl, r6
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	461d      	mov	r5, r3
 8005414:	f04f 0600 	mov.w	r6, #0
 8005418:	196b      	adds	r3, r5, r5
 800541a:	eb46 0406 	adc.w	r4, r6, r6
 800541e:	461a      	mov	r2, r3
 8005420:	4623      	mov	r3, r4
 8005422:	f7fb fb4b 	bl	8000abc <__aeabi_uldivmod>
 8005426:	4603      	mov	r3, r0
 8005428:	460c      	mov	r4, r1
 800542a:	461a      	mov	r2, r3
 800542c:	4b2c      	ldr	r3, [pc, #176]	; (80054e0 <UART_SetConfig+0x384>)
 800542e:	fba3 1302 	umull	r1, r3, r3, r2
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	2164      	movs	r1, #100	; 0x64
 8005436:	fb01 f303 	mul.w	r3, r1, r3
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	3332      	adds	r3, #50	; 0x32
 8005440:	4a27      	ldr	r2, [pc, #156]	; (80054e0 <UART_SetConfig+0x384>)
 8005442:	fba2 2303 	umull	r2, r3, r2, r3
 8005446:	095b      	lsrs	r3, r3, #5
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800544e:	4498      	add	r8, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	461d      	mov	r5, r3
 8005454:	f04f 0600 	mov.w	r6, #0
 8005458:	46a9      	mov	r9, r5
 800545a:	46b2      	mov	sl, r6
 800545c:	eb19 0309 	adds.w	r3, r9, r9
 8005460:	eb4a 040a 	adc.w	r4, sl, sl
 8005464:	4699      	mov	r9, r3
 8005466:	46a2      	mov	sl, r4
 8005468:	eb19 0905 	adds.w	r9, r9, r5
 800546c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005470:	f04f 0100 	mov.w	r1, #0
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800547c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005480:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005484:	4689      	mov	r9, r1
 8005486:	4692      	mov	sl, r2
 8005488:	eb19 0005 	adds.w	r0, r9, r5
 800548c:	eb4a 0106 	adc.w	r1, sl, r6
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	461d      	mov	r5, r3
 8005496:	f04f 0600 	mov.w	r6, #0
 800549a:	196b      	adds	r3, r5, r5
 800549c:	eb46 0406 	adc.w	r4, r6, r6
 80054a0:	461a      	mov	r2, r3
 80054a2:	4623      	mov	r3, r4
 80054a4:	f7fb fb0a 	bl	8000abc <__aeabi_uldivmod>
 80054a8:	4603      	mov	r3, r0
 80054aa:	460c      	mov	r4, r1
 80054ac:	461a      	mov	r2, r3
 80054ae:	4b0c      	ldr	r3, [pc, #48]	; (80054e0 <UART_SetConfig+0x384>)
 80054b0:	fba3 1302 	umull	r1, r3, r3, r2
 80054b4:	095b      	lsrs	r3, r3, #5
 80054b6:	2164      	movs	r1, #100	; 0x64
 80054b8:	fb01 f303 	mul.w	r3, r1, r3
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	3332      	adds	r3, #50	; 0x32
 80054c2:	4a07      	ldr	r2, [pc, #28]	; (80054e0 <UART_SetConfig+0x384>)
 80054c4:	fba2 2303 	umull	r2, r3, r2, r3
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	f003 0207 	and.w	r2, r3, #7
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4442      	add	r2, r8
 80054d4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80054d6:	e1b2      	b.n	800583e <UART_SetConfig+0x6e2>
 80054d8:	40011000 	.word	0x40011000
 80054dc:	40011400 	.word	0x40011400
 80054e0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4ad7      	ldr	r2, [pc, #860]	; (8005848 <UART_SetConfig+0x6ec>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d005      	beq.n	80054fa <UART_SetConfig+0x39e>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4ad6      	ldr	r2, [pc, #856]	; (800584c <UART_SetConfig+0x6f0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	f040 80d1 	bne.w	800569c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80054fa:	f7fe fe79 	bl	80041f0 <HAL_RCC_GetPCLK2Freq>
 80054fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	469a      	mov	sl, r3
 8005504:	f04f 0b00 	mov.w	fp, #0
 8005508:	46d0      	mov	r8, sl
 800550a:	46d9      	mov	r9, fp
 800550c:	eb18 0308 	adds.w	r3, r8, r8
 8005510:	eb49 0409 	adc.w	r4, r9, r9
 8005514:	4698      	mov	r8, r3
 8005516:	46a1      	mov	r9, r4
 8005518:	eb18 080a 	adds.w	r8, r8, sl
 800551c:	eb49 090b 	adc.w	r9, r9, fp
 8005520:	f04f 0100 	mov.w	r1, #0
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800552c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005530:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005534:	4688      	mov	r8, r1
 8005536:	4691      	mov	r9, r2
 8005538:	eb1a 0508 	adds.w	r5, sl, r8
 800553c:	eb4b 0609 	adc.w	r6, fp, r9
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	4619      	mov	r1, r3
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	f04f 0400 	mov.w	r4, #0
 8005552:	0094      	lsls	r4, r2, #2
 8005554:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005558:	008b      	lsls	r3, r1, #2
 800555a:	461a      	mov	r2, r3
 800555c:	4623      	mov	r3, r4
 800555e:	4628      	mov	r0, r5
 8005560:	4631      	mov	r1, r6
 8005562:	f7fb faab 	bl	8000abc <__aeabi_uldivmod>
 8005566:	4603      	mov	r3, r0
 8005568:	460c      	mov	r4, r1
 800556a:	461a      	mov	r2, r3
 800556c:	4bb8      	ldr	r3, [pc, #736]	; (8005850 <UART_SetConfig+0x6f4>)
 800556e:	fba3 2302 	umull	r2, r3, r3, r2
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	469b      	mov	fp, r3
 800557c:	f04f 0c00 	mov.w	ip, #0
 8005580:	46d9      	mov	r9, fp
 8005582:	46e2      	mov	sl, ip
 8005584:	eb19 0309 	adds.w	r3, r9, r9
 8005588:	eb4a 040a 	adc.w	r4, sl, sl
 800558c:	4699      	mov	r9, r3
 800558e:	46a2      	mov	sl, r4
 8005590:	eb19 090b 	adds.w	r9, r9, fp
 8005594:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005598:	f04f 0100 	mov.w	r1, #0
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055ac:	4689      	mov	r9, r1
 80055ae:	4692      	mov	sl, r2
 80055b0:	eb1b 0509 	adds.w	r5, fp, r9
 80055b4:	eb4c 060a 	adc.w	r6, ip, sl
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	4619      	mov	r1, r3
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	f04f 0300 	mov.w	r3, #0
 80055c6:	f04f 0400 	mov.w	r4, #0
 80055ca:	0094      	lsls	r4, r2, #2
 80055cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055d0:	008b      	lsls	r3, r1, #2
 80055d2:	461a      	mov	r2, r3
 80055d4:	4623      	mov	r3, r4
 80055d6:	4628      	mov	r0, r5
 80055d8:	4631      	mov	r1, r6
 80055da:	f7fb fa6f 	bl	8000abc <__aeabi_uldivmod>
 80055de:	4603      	mov	r3, r0
 80055e0:	460c      	mov	r4, r1
 80055e2:	461a      	mov	r2, r3
 80055e4:	4b9a      	ldr	r3, [pc, #616]	; (8005850 <UART_SetConfig+0x6f4>)
 80055e6:	fba3 1302 	umull	r1, r3, r3, r2
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	2164      	movs	r1, #100	; 0x64
 80055ee:	fb01 f303 	mul.w	r3, r1, r3
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	3332      	adds	r3, #50	; 0x32
 80055f8:	4a95      	ldr	r2, [pc, #596]	; (8005850 <UART_SetConfig+0x6f4>)
 80055fa:	fba2 2303 	umull	r2, r3, r2, r3
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005604:	4498      	add	r8, r3
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	469b      	mov	fp, r3
 800560a:	f04f 0c00 	mov.w	ip, #0
 800560e:	46d9      	mov	r9, fp
 8005610:	46e2      	mov	sl, ip
 8005612:	eb19 0309 	adds.w	r3, r9, r9
 8005616:	eb4a 040a 	adc.w	r4, sl, sl
 800561a:	4699      	mov	r9, r3
 800561c:	46a2      	mov	sl, r4
 800561e:	eb19 090b 	adds.w	r9, r9, fp
 8005622:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005626:	f04f 0100 	mov.w	r1, #0
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005632:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005636:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800563a:	4689      	mov	r9, r1
 800563c:	4692      	mov	sl, r2
 800563e:	eb1b 0509 	adds.w	r5, fp, r9
 8005642:	eb4c 060a 	adc.w	r6, ip, sl
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	4619      	mov	r1, r3
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	f04f 0300 	mov.w	r3, #0
 8005654:	f04f 0400 	mov.w	r4, #0
 8005658:	0094      	lsls	r4, r2, #2
 800565a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800565e:	008b      	lsls	r3, r1, #2
 8005660:	461a      	mov	r2, r3
 8005662:	4623      	mov	r3, r4
 8005664:	4628      	mov	r0, r5
 8005666:	4631      	mov	r1, r6
 8005668:	f7fb fa28 	bl	8000abc <__aeabi_uldivmod>
 800566c:	4603      	mov	r3, r0
 800566e:	460c      	mov	r4, r1
 8005670:	461a      	mov	r2, r3
 8005672:	4b77      	ldr	r3, [pc, #476]	; (8005850 <UART_SetConfig+0x6f4>)
 8005674:	fba3 1302 	umull	r1, r3, r3, r2
 8005678:	095b      	lsrs	r3, r3, #5
 800567a:	2164      	movs	r1, #100	; 0x64
 800567c:	fb01 f303 	mul.w	r3, r1, r3
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	3332      	adds	r3, #50	; 0x32
 8005686:	4a72      	ldr	r2, [pc, #456]	; (8005850 <UART_SetConfig+0x6f4>)
 8005688:	fba2 2303 	umull	r2, r3, r2, r3
 800568c:	095b      	lsrs	r3, r3, #5
 800568e:	f003 020f 	and.w	r2, r3, #15
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4442      	add	r2, r8
 8005698:	609a      	str	r2, [r3, #8]
 800569a:	e0d0      	b.n	800583e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800569c:	f7fe fd94 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 80056a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	469a      	mov	sl, r3
 80056a6:	f04f 0b00 	mov.w	fp, #0
 80056aa:	46d0      	mov	r8, sl
 80056ac:	46d9      	mov	r9, fp
 80056ae:	eb18 0308 	adds.w	r3, r8, r8
 80056b2:	eb49 0409 	adc.w	r4, r9, r9
 80056b6:	4698      	mov	r8, r3
 80056b8:	46a1      	mov	r9, r4
 80056ba:	eb18 080a 	adds.w	r8, r8, sl
 80056be:	eb49 090b 	adc.w	r9, r9, fp
 80056c2:	f04f 0100 	mov.w	r1, #0
 80056c6:	f04f 0200 	mov.w	r2, #0
 80056ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80056ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80056d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80056d6:	4688      	mov	r8, r1
 80056d8:	4691      	mov	r9, r2
 80056da:	eb1a 0508 	adds.w	r5, sl, r8
 80056de:	eb4b 0609 	adc.w	r6, fp, r9
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	4619      	mov	r1, r3
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	f04f 0400 	mov.w	r4, #0
 80056f4:	0094      	lsls	r4, r2, #2
 80056f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056fa:	008b      	lsls	r3, r1, #2
 80056fc:	461a      	mov	r2, r3
 80056fe:	4623      	mov	r3, r4
 8005700:	4628      	mov	r0, r5
 8005702:	4631      	mov	r1, r6
 8005704:	f7fb f9da 	bl	8000abc <__aeabi_uldivmod>
 8005708:	4603      	mov	r3, r0
 800570a:	460c      	mov	r4, r1
 800570c:	461a      	mov	r2, r3
 800570e:	4b50      	ldr	r3, [pc, #320]	; (8005850 <UART_SetConfig+0x6f4>)
 8005710:	fba3 2302 	umull	r2, r3, r3, r2
 8005714:	095b      	lsrs	r3, r3, #5
 8005716:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	469b      	mov	fp, r3
 800571e:	f04f 0c00 	mov.w	ip, #0
 8005722:	46d9      	mov	r9, fp
 8005724:	46e2      	mov	sl, ip
 8005726:	eb19 0309 	adds.w	r3, r9, r9
 800572a:	eb4a 040a 	adc.w	r4, sl, sl
 800572e:	4699      	mov	r9, r3
 8005730:	46a2      	mov	sl, r4
 8005732:	eb19 090b 	adds.w	r9, r9, fp
 8005736:	eb4a 0a0c 	adc.w	sl, sl, ip
 800573a:	f04f 0100 	mov.w	r1, #0
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005746:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800574a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800574e:	4689      	mov	r9, r1
 8005750:	4692      	mov	sl, r2
 8005752:	eb1b 0509 	adds.w	r5, fp, r9
 8005756:	eb4c 060a 	adc.w	r6, ip, sl
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	4619      	mov	r1, r3
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	f04f 0400 	mov.w	r4, #0
 800576c:	0094      	lsls	r4, r2, #2
 800576e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005772:	008b      	lsls	r3, r1, #2
 8005774:	461a      	mov	r2, r3
 8005776:	4623      	mov	r3, r4
 8005778:	4628      	mov	r0, r5
 800577a:	4631      	mov	r1, r6
 800577c:	f7fb f99e 	bl	8000abc <__aeabi_uldivmod>
 8005780:	4603      	mov	r3, r0
 8005782:	460c      	mov	r4, r1
 8005784:	461a      	mov	r2, r3
 8005786:	4b32      	ldr	r3, [pc, #200]	; (8005850 <UART_SetConfig+0x6f4>)
 8005788:	fba3 1302 	umull	r1, r3, r3, r2
 800578c:	095b      	lsrs	r3, r3, #5
 800578e:	2164      	movs	r1, #100	; 0x64
 8005790:	fb01 f303 	mul.w	r3, r1, r3
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	3332      	adds	r3, #50	; 0x32
 800579a:	4a2d      	ldr	r2, [pc, #180]	; (8005850 <UART_SetConfig+0x6f4>)
 800579c:	fba2 2303 	umull	r2, r3, r2, r3
 80057a0:	095b      	lsrs	r3, r3, #5
 80057a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057a6:	4498      	add	r8, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	469b      	mov	fp, r3
 80057ac:	f04f 0c00 	mov.w	ip, #0
 80057b0:	46d9      	mov	r9, fp
 80057b2:	46e2      	mov	sl, ip
 80057b4:	eb19 0309 	adds.w	r3, r9, r9
 80057b8:	eb4a 040a 	adc.w	r4, sl, sl
 80057bc:	4699      	mov	r9, r3
 80057be:	46a2      	mov	sl, r4
 80057c0:	eb19 090b 	adds.w	r9, r9, fp
 80057c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80057c8:	f04f 0100 	mov.w	r1, #0
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057dc:	4689      	mov	r9, r1
 80057de:	4692      	mov	sl, r2
 80057e0:	eb1b 0509 	adds.w	r5, fp, r9
 80057e4:	eb4c 060a 	adc.w	r6, ip, sl
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	4619      	mov	r1, r3
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	f04f 0400 	mov.w	r4, #0
 80057fa:	0094      	lsls	r4, r2, #2
 80057fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005800:	008b      	lsls	r3, r1, #2
 8005802:	461a      	mov	r2, r3
 8005804:	4623      	mov	r3, r4
 8005806:	4628      	mov	r0, r5
 8005808:	4631      	mov	r1, r6
 800580a:	f7fb f957 	bl	8000abc <__aeabi_uldivmod>
 800580e:	4603      	mov	r3, r0
 8005810:	460c      	mov	r4, r1
 8005812:	461a      	mov	r2, r3
 8005814:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <UART_SetConfig+0x6f4>)
 8005816:	fba3 1302 	umull	r1, r3, r3, r2
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	2164      	movs	r1, #100	; 0x64
 800581e:	fb01 f303 	mul.w	r3, r1, r3
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	3332      	adds	r3, #50	; 0x32
 8005828:	4a09      	ldr	r2, [pc, #36]	; (8005850 <UART_SetConfig+0x6f4>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	f003 020f 	and.w	r2, r3, #15
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4442      	add	r2, r8
 800583a:	609a      	str	r2, [r3, #8]
}
 800583c:	e7ff      	b.n	800583e <UART_SetConfig+0x6e2>
 800583e:	bf00      	nop
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005848:	40011000 	.word	0x40011000
 800584c:	40011400 	.word	0x40011400
 8005850:	51eb851f 	.word	0x51eb851f

08005854 <__errno>:
 8005854:	4b01      	ldr	r3, [pc, #4]	; (800585c <__errno+0x8>)
 8005856:	6818      	ldr	r0, [r3, #0]
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	2000000c 	.word	0x2000000c

08005860 <__libc_init_array>:
 8005860:	b570      	push	{r4, r5, r6, lr}
 8005862:	4e0d      	ldr	r6, [pc, #52]	; (8005898 <__libc_init_array+0x38>)
 8005864:	4c0d      	ldr	r4, [pc, #52]	; (800589c <__libc_init_array+0x3c>)
 8005866:	1ba4      	subs	r4, r4, r6
 8005868:	10a4      	asrs	r4, r4, #2
 800586a:	2500      	movs	r5, #0
 800586c:	42a5      	cmp	r5, r4
 800586e:	d109      	bne.n	8005884 <__libc_init_array+0x24>
 8005870:	4e0b      	ldr	r6, [pc, #44]	; (80058a0 <__libc_init_array+0x40>)
 8005872:	4c0c      	ldr	r4, [pc, #48]	; (80058a4 <__libc_init_array+0x44>)
 8005874:	f000 fc26 	bl	80060c4 <_init>
 8005878:	1ba4      	subs	r4, r4, r6
 800587a:	10a4      	asrs	r4, r4, #2
 800587c:	2500      	movs	r5, #0
 800587e:	42a5      	cmp	r5, r4
 8005880:	d105      	bne.n	800588e <__libc_init_array+0x2e>
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005888:	4798      	blx	r3
 800588a:	3501      	adds	r5, #1
 800588c:	e7ee      	b.n	800586c <__libc_init_array+0xc>
 800588e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005892:	4798      	blx	r3
 8005894:	3501      	adds	r5, #1
 8005896:	e7f2      	b.n	800587e <__libc_init_array+0x1e>
 8005898:	080061ac 	.word	0x080061ac
 800589c:	080061ac 	.word	0x080061ac
 80058a0:	080061ac 	.word	0x080061ac
 80058a4:	080061b0 	.word	0x080061b0

080058a8 <memset>:
 80058a8:	4402      	add	r2, r0
 80058aa:	4603      	mov	r3, r0
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d100      	bne.n	80058b2 <memset+0xa>
 80058b0:	4770      	bx	lr
 80058b2:	f803 1b01 	strb.w	r1, [r3], #1
 80058b6:	e7f9      	b.n	80058ac <memset+0x4>

080058b8 <siprintf>:
 80058b8:	b40e      	push	{r1, r2, r3}
 80058ba:	b500      	push	{lr}
 80058bc:	b09c      	sub	sp, #112	; 0x70
 80058be:	ab1d      	add	r3, sp, #116	; 0x74
 80058c0:	9002      	str	r0, [sp, #8]
 80058c2:	9006      	str	r0, [sp, #24]
 80058c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058c8:	4809      	ldr	r0, [pc, #36]	; (80058f0 <siprintf+0x38>)
 80058ca:	9107      	str	r1, [sp, #28]
 80058cc:	9104      	str	r1, [sp, #16]
 80058ce:	4909      	ldr	r1, [pc, #36]	; (80058f4 <siprintf+0x3c>)
 80058d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80058d4:	9105      	str	r1, [sp, #20]
 80058d6:	6800      	ldr	r0, [r0, #0]
 80058d8:	9301      	str	r3, [sp, #4]
 80058da:	a902      	add	r1, sp, #8
 80058dc:	f000 f866 	bl	80059ac <_svfiprintf_r>
 80058e0:	9b02      	ldr	r3, [sp, #8]
 80058e2:	2200      	movs	r2, #0
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	b01c      	add	sp, #112	; 0x70
 80058e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058ec:	b003      	add	sp, #12
 80058ee:	4770      	bx	lr
 80058f0:	2000000c 	.word	0x2000000c
 80058f4:	ffff0208 	.word	0xffff0208

080058f8 <__ssputs_r>:
 80058f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058fc:	688e      	ldr	r6, [r1, #8]
 80058fe:	429e      	cmp	r6, r3
 8005900:	4682      	mov	sl, r0
 8005902:	460c      	mov	r4, r1
 8005904:	4690      	mov	r8, r2
 8005906:	4699      	mov	r9, r3
 8005908:	d837      	bhi.n	800597a <__ssputs_r+0x82>
 800590a:	898a      	ldrh	r2, [r1, #12]
 800590c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005910:	d031      	beq.n	8005976 <__ssputs_r+0x7e>
 8005912:	6825      	ldr	r5, [r4, #0]
 8005914:	6909      	ldr	r1, [r1, #16]
 8005916:	1a6f      	subs	r7, r5, r1
 8005918:	6965      	ldr	r5, [r4, #20]
 800591a:	2302      	movs	r3, #2
 800591c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005920:	fb95 f5f3 	sdiv	r5, r5, r3
 8005924:	f109 0301 	add.w	r3, r9, #1
 8005928:	443b      	add	r3, r7
 800592a:	429d      	cmp	r5, r3
 800592c:	bf38      	it	cc
 800592e:	461d      	movcc	r5, r3
 8005930:	0553      	lsls	r3, r2, #21
 8005932:	d530      	bpl.n	8005996 <__ssputs_r+0x9e>
 8005934:	4629      	mov	r1, r5
 8005936:	f000 fb2b 	bl	8005f90 <_malloc_r>
 800593a:	4606      	mov	r6, r0
 800593c:	b950      	cbnz	r0, 8005954 <__ssputs_r+0x5c>
 800593e:	230c      	movs	r3, #12
 8005940:	f8ca 3000 	str.w	r3, [sl]
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800594a:	81a3      	strh	r3, [r4, #12]
 800594c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005954:	463a      	mov	r2, r7
 8005956:	6921      	ldr	r1, [r4, #16]
 8005958:	f000 faa8 	bl	8005eac <memcpy>
 800595c:	89a3      	ldrh	r3, [r4, #12]
 800595e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005966:	81a3      	strh	r3, [r4, #12]
 8005968:	6126      	str	r6, [r4, #16]
 800596a:	6165      	str	r5, [r4, #20]
 800596c:	443e      	add	r6, r7
 800596e:	1bed      	subs	r5, r5, r7
 8005970:	6026      	str	r6, [r4, #0]
 8005972:	60a5      	str	r5, [r4, #8]
 8005974:	464e      	mov	r6, r9
 8005976:	454e      	cmp	r6, r9
 8005978:	d900      	bls.n	800597c <__ssputs_r+0x84>
 800597a:	464e      	mov	r6, r9
 800597c:	4632      	mov	r2, r6
 800597e:	4641      	mov	r1, r8
 8005980:	6820      	ldr	r0, [r4, #0]
 8005982:	f000 fa9e 	bl	8005ec2 <memmove>
 8005986:	68a3      	ldr	r3, [r4, #8]
 8005988:	1b9b      	subs	r3, r3, r6
 800598a:	60a3      	str	r3, [r4, #8]
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	441e      	add	r6, r3
 8005990:	6026      	str	r6, [r4, #0]
 8005992:	2000      	movs	r0, #0
 8005994:	e7dc      	b.n	8005950 <__ssputs_r+0x58>
 8005996:	462a      	mov	r2, r5
 8005998:	f000 fb54 	bl	8006044 <_realloc_r>
 800599c:	4606      	mov	r6, r0
 800599e:	2800      	cmp	r0, #0
 80059a0:	d1e2      	bne.n	8005968 <__ssputs_r+0x70>
 80059a2:	6921      	ldr	r1, [r4, #16]
 80059a4:	4650      	mov	r0, sl
 80059a6:	f000 faa5 	bl	8005ef4 <_free_r>
 80059aa:	e7c8      	b.n	800593e <__ssputs_r+0x46>

080059ac <_svfiprintf_r>:
 80059ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b0:	461d      	mov	r5, r3
 80059b2:	898b      	ldrh	r3, [r1, #12]
 80059b4:	061f      	lsls	r7, r3, #24
 80059b6:	b09d      	sub	sp, #116	; 0x74
 80059b8:	4680      	mov	r8, r0
 80059ba:	460c      	mov	r4, r1
 80059bc:	4616      	mov	r6, r2
 80059be:	d50f      	bpl.n	80059e0 <_svfiprintf_r+0x34>
 80059c0:	690b      	ldr	r3, [r1, #16]
 80059c2:	b96b      	cbnz	r3, 80059e0 <_svfiprintf_r+0x34>
 80059c4:	2140      	movs	r1, #64	; 0x40
 80059c6:	f000 fae3 	bl	8005f90 <_malloc_r>
 80059ca:	6020      	str	r0, [r4, #0]
 80059cc:	6120      	str	r0, [r4, #16]
 80059ce:	b928      	cbnz	r0, 80059dc <_svfiprintf_r+0x30>
 80059d0:	230c      	movs	r3, #12
 80059d2:	f8c8 3000 	str.w	r3, [r8]
 80059d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059da:	e0c8      	b.n	8005b6e <_svfiprintf_r+0x1c2>
 80059dc:	2340      	movs	r3, #64	; 0x40
 80059de:	6163      	str	r3, [r4, #20]
 80059e0:	2300      	movs	r3, #0
 80059e2:	9309      	str	r3, [sp, #36]	; 0x24
 80059e4:	2320      	movs	r3, #32
 80059e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059ea:	2330      	movs	r3, #48	; 0x30
 80059ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059f0:	9503      	str	r5, [sp, #12]
 80059f2:	f04f 0b01 	mov.w	fp, #1
 80059f6:	4637      	mov	r7, r6
 80059f8:	463d      	mov	r5, r7
 80059fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80059fe:	b10b      	cbz	r3, 8005a04 <_svfiprintf_r+0x58>
 8005a00:	2b25      	cmp	r3, #37	; 0x25
 8005a02:	d13e      	bne.n	8005a82 <_svfiprintf_r+0xd6>
 8005a04:	ebb7 0a06 	subs.w	sl, r7, r6
 8005a08:	d00b      	beq.n	8005a22 <_svfiprintf_r+0x76>
 8005a0a:	4653      	mov	r3, sl
 8005a0c:	4632      	mov	r2, r6
 8005a0e:	4621      	mov	r1, r4
 8005a10:	4640      	mov	r0, r8
 8005a12:	f7ff ff71 	bl	80058f8 <__ssputs_r>
 8005a16:	3001      	adds	r0, #1
 8005a18:	f000 80a4 	beq.w	8005b64 <_svfiprintf_r+0x1b8>
 8005a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a1e:	4453      	add	r3, sl
 8005a20:	9309      	str	r3, [sp, #36]	; 0x24
 8005a22:	783b      	ldrb	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 809d 	beq.w	8005b64 <_svfiprintf_r+0x1b8>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a34:	9304      	str	r3, [sp, #16]
 8005a36:	9307      	str	r3, [sp, #28]
 8005a38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a3c:	931a      	str	r3, [sp, #104]	; 0x68
 8005a3e:	462f      	mov	r7, r5
 8005a40:	2205      	movs	r2, #5
 8005a42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005a46:	4850      	ldr	r0, [pc, #320]	; (8005b88 <_svfiprintf_r+0x1dc>)
 8005a48:	f7fa fbca 	bl	80001e0 <memchr>
 8005a4c:	9b04      	ldr	r3, [sp, #16]
 8005a4e:	b9d0      	cbnz	r0, 8005a86 <_svfiprintf_r+0xda>
 8005a50:	06d9      	lsls	r1, r3, #27
 8005a52:	bf44      	itt	mi
 8005a54:	2220      	movmi	r2, #32
 8005a56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a5a:	071a      	lsls	r2, r3, #28
 8005a5c:	bf44      	itt	mi
 8005a5e:	222b      	movmi	r2, #43	; 0x2b
 8005a60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a64:	782a      	ldrb	r2, [r5, #0]
 8005a66:	2a2a      	cmp	r2, #42	; 0x2a
 8005a68:	d015      	beq.n	8005a96 <_svfiprintf_r+0xea>
 8005a6a:	9a07      	ldr	r2, [sp, #28]
 8005a6c:	462f      	mov	r7, r5
 8005a6e:	2000      	movs	r0, #0
 8005a70:	250a      	movs	r5, #10
 8005a72:	4639      	mov	r1, r7
 8005a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a78:	3b30      	subs	r3, #48	; 0x30
 8005a7a:	2b09      	cmp	r3, #9
 8005a7c:	d94d      	bls.n	8005b1a <_svfiprintf_r+0x16e>
 8005a7e:	b1b8      	cbz	r0, 8005ab0 <_svfiprintf_r+0x104>
 8005a80:	e00f      	b.n	8005aa2 <_svfiprintf_r+0xf6>
 8005a82:	462f      	mov	r7, r5
 8005a84:	e7b8      	b.n	80059f8 <_svfiprintf_r+0x4c>
 8005a86:	4a40      	ldr	r2, [pc, #256]	; (8005b88 <_svfiprintf_r+0x1dc>)
 8005a88:	1a80      	subs	r0, r0, r2
 8005a8a:	fa0b f000 	lsl.w	r0, fp, r0
 8005a8e:	4318      	orrs	r0, r3
 8005a90:	9004      	str	r0, [sp, #16]
 8005a92:	463d      	mov	r5, r7
 8005a94:	e7d3      	b.n	8005a3e <_svfiprintf_r+0x92>
 8005a96:	9a03      	ldr	r2, [sp, #12]
 8005a98:	1d11      	adds	r1, r2, #4
 8005a9a:	6812      	ldr	r2, [r2, #0]
 8005a9c:	9103      	str	r1, [sp, #12]
 8005a9e:	2a00      	cmp	r2, #0
 8005aa0:	db01      	blt.n	8005aa6 <_svfiprintf_r+0xfa>
 8005aa2:	9207      	str	r2, [sp, #28]
 8005aa4:	e004      	b.n	8005ab0 <_svfiprintf_r+0x104>
 8005aa6:	4252      	negs	r2, r2
 8005aa8:	f043 0302 	orr.w	r3, r3, #2
 8005aac:	9207      	str	r2, [sp, #28]
 8005aae:	9304      	str	r3, [sp, #16]
 8005ab0:	783b      	ldrb	r3, [r7, #0]
 8005ab2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ab4:	d10c      	bne.n	8005ad0 <_svfiprintf_r+0x124>
 8005ab6:	787b      	ldrb	r3, [r7, #1]
 8005ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aba:	d133      	bne.n	8005b24 <_svfiprintf_r+0x178>
 8005abc:	9b03      	ldr	r3, [sp, #12]
 8005abe:	1d1a      	adds	r2, r3, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	9203      	str	r2, [sp, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bfb8      	it	lt
 8005ac8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005acc:	3702      	adds	r7, #2
 8005ace:	9305      	str	r3, [sp, #20]
 8005ad0:	4d2e      	ldr	r5, [pc, #184]	; (8005b8c <_svfiprintf_r+0x1e0>)
 8005ad2:	7839      	ldrb	r1, [r7, #0]
 8005ad4:	2203      	movs	r2, #3
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f7fa fb82 	bl	80001e0 <memchr>
 8005adc:	b138      	cbz	r0, 8005aee <_svfiprintf_r+0x142>
 8005ade:	2340      	movs	r3, #64	; 0x40
 8005ae0:	1b40      	subs	r0, r0, r5
 8005ae2:	fa03 f000 	lsl.w	r0, r3, r0
 8005ae6:	9b04      	ldr	r3, [sp, #16]
 8005ae8:	4303      	orrs	r3, r0
 8005aea:	3701      	adds	r7, #1
 8005aec:	9304      	str	r3, [sp, #16]
 8005aee:	7839      	ldrb	r1, [r7, #0]
 8005af0:	4827      	ldr	r0, [pc, #156]	; (8005b90 <_svfiprintf_r+0x1e4>)
 8005af2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005af6:	2206      	movs	r2, #6
 8005af8:	1c7e      	adds	r6, r7, #1
 8005afa:	f7fa fb71 	bl	80001e0 <memchr>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d038      	beq.n	8005b74 <_svfiprintf_r+0x1c8>
 8005b02:	4b24      	ldr	r3, [pc, #144]	; (8005b94 <_svfiprintf_r+0x1e8>)
 8005b04:	bb13      	cbnz	r3, 8005b4c <_svfiprintf_r+0x1a0>
 8005b06:	9b03      	ldr	r3, [sp, #12]
 8005b08:	3307      	adds	r3, #7
 8005b0a:	f023 0307 	bic.w	r3, r3, #7
 8005b0e:	3308      	adds	r3, #8
 8005b10:	9303      	str	r3, [sp, #12]
 8005b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b14:	444b      	add	r3, r9
 8005b16:	9309      	str	r3, [sp, #36]	; 0x24
 8005b18:	e76d      	b.n	80059f6 <_svfiprintf_r+0x4a>
 8005b1a:	fb05 3202 	mla	r2, r5, r2, r3
 8005b1e:	2001      	movs	r0, #1
 8005b20:	460f      	mov	r7, r1
 8005b22:	e7a6      	b.n	8005a72 <_svfiprintf_r+0xc6>
 8005b24:	2300      	movs	r3, #0
 8005b26:	3701      	adds	r7, #1
 8005b28:	9305      	str	r3, [sp, #20]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	250a      	movs	r5, #10
 8005b2e:	4638      	mov	r0, r7
 8005b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b34:	3a30      	subs	r2, #48	; 0x30
 8005b36:	2a09      	cmp	r2, #9
 8005b38:	d903      	bls.n	8005b42 <_svfiprintf_r+0x196>
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0c8      	beq.n	8005ad0 <_svfiprintf_r+0x124>
 8005b3e:	9105      	str	r1, [sp, #20]
 8005b40:	e7c6      	b.n	8005ad0 <_svfiprintf_r+0x124>
 8005b42:	fb05 2101 	mla	r1, r5, r1, r2
 8005b46:	2301      	movs	r3, #1
 8005b48:	4607      	mov	r7, r0
 8005b4a:	e7f0      	b.n	8005b2e <_svfiprintf_r+0x182>
 8005b4c:	ab03      	add	r3, sp, #12
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	4622      	mov	r2, r4
 8005b52:	4b11      	ldr	r3, [pc, #68]	; (8005b98 <_svfiprintf_r+0x1ec>)
 8005b54:	a904      	add	r1, sp, #16
 8005b56:	4640      	mov	r0, r8
 8005b58:	f3af 8000 	nop.w
 8005b5c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005b60:	4681      	mov	r9, r0
 8005b62:	d1d6      	bne.n	8005b12 <_svfiprintf_r+0x166>
 8005b64:	89a3      	ldrh	r3, [r4, #12]
 8005b66:	065b      	lsls	r3, r3, #25
 8005b68:	f53f af35 	bmi.w	80059d6 <_svfiprintf_r+0x2a>
 8005b6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b6e:	b01d      	add	sp, #116	; 0x74
 8005b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b74:	ab03      	add	r3, sp, #12
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	4622      	mov	r2, r4
 8005b7a:	4b07      	ldr	r3, [pc, #28]	; (8005b98 <_svfiprintf_r+0x1ec>)
 8005b7c:	a904      	add	r1, sp, #16
 8005b7e:	4640      	mov	r0, r8
 8005b80:	f000 f882 	bl	8005c88 <_printf_i>
 8005b84:	e7ea      	b.n	8005b5c <_svfiprintf_r+0x1b0>
 8005b86:	bf00      	nop
 8005b88:	08006170 	.word	0x08006170
 8005b8c:	08006176 	.word	0x08006176
 8005b90:	0800617a 	.word	0x0800617a
 8005b94:	00000000 	.word	0x00000000
 8005b98:	080058f9 	.word	0x080058f9

08005b9c <_printf_common>:
 8005b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba0:	4691      	mov	r9, r2
 8005ba2:	461f      	mov	r7, r3
 8005ba4:	688a      	ldr	r2, [r1, #8]
 8005ba6:	690b      	ldr	r3, [r1, #16]
 8005ba8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bac:	4293      	cmp	r3, r2
 8005bae:	bfb8      	it	lt
 8005bb0:	4613      	movlt	r3, r2
 8005bb2:	f8c9 3000 	str.w	r3, [r9]
 8005bb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bba:	4606      	mov	r6, r0
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	b112      	cbz	r2, 8005bc6 <_printf_common+0x2a>
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	f8c9 3000 	str.w	r3, [r9]
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	0699      	lsls	r1, r3, #26
 8005bca:	bf42      	ittt	mi
 8005bcc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005bd0:	3302      	addmi	r3, #2
 8005bd2:	f8c9 3000 	strmi.w	r3, [r9]
 8005bd6:	6825      	ldr	r5, [r4, #0]
 8005bd8:	f015 0506 	ands.w	r5, r5, #6
 8005bdc:	d107      	bne.n	8005bee <_printf_common+0x52>
 8005bde:	f104 0a19 	add.w	sl, r4, #25
 8005be2:	68e3      	ldr	r3, [r4, #12]
 8005be4:	f8d9 2000 	ldr.w	r2, [r9]
 8005be8:	1a9b      	subs	r3, r3, r2
 8005bea:	42ab      	cmp	r3, r5
 8005bec:	dc28      	bgt.n	8005c40 <_printf_common+0xa4>
 8005bee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005bf2:	6822      	ldr	r2, [r4, #0]
 8005bf4:	3300      	adds	r3, #0
 8005bf6:	bf18      	it	ne
 8005bf8:	2301      	movne	r3, #1
 8005bfa:	0692      	lsls	r2, r2, #26
 8005bfc:	d42d      	bmi.n	8005c5a <_printf_common+0xbe>
 8005bfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c02:	4639      	mov	r1, r7
 8005c04:	4630      	mov	r0, r6
 8005c06:	47c0      	blx	r8
 8005c08:	3001      	adds	r0, #1
 8005c0a:	d020      	beq.n	8005c4e <_printf_common+0xb2>
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	68e5      	ldr	r5, [r4, #12]
 8005c10:	f8d9 2000 	ldr.w	r2, [r9]
 8005c14:	f003 0306 	and.w	r3, r3, #6
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	bf08      	it	eq
 8005c1c:	1aad      	subeq	r5, r5, r2
 8005c1e:	68a3      	ldr	r3, [r4, #8]
 8005c20:	6922      	ldr	r2, [r4, #16]
 8005c22:	bf0c      	ite	eq
 8005c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c28:	2500      	movne	r5, #0
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	bfc4      	itt	gt
 8005c2e:	1a9b      	subgt	r3, r3, r2
 8005c30:	18ed      	addgt	r5, r5, r3
 8005c32:	f04f 0900 	mov.w	r9, #0
 8005c36:	341a      	adds	r4, #26
 8005c38:	454d      	cmp	r5, r9
 8005c3a:	d11a      	bne.n	8005c72 <_printf_common+0xd6>
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	e008      	b.n	8005c52 <_printf_common+0xb6>
 8005c40:	2301      	movs	r3, #1
 8005c42:	4652      	mov	r2, sl
 8005c44:	4639      	mov	r1, r7
 8005c46:	4630      	mov	r0, r6
 8005c48:	47c0      	blx	r8
 8005c4a:	3001      	adds	r0, #1
 8005c4c:	d103      	bne.n	8005c56 <_printf_common+0xba>
 8005c4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c56:	3501      	adds	r5, #1
 8005c58:	e7c3      	b.n	8005be2 <_printf_common+0x46>
 8005c5a:	18e1      	adds	r1, r4, r3
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	2030      	movs	r0, #48	; 0x30
 8005c60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c64:	4422      	add	r2, r4
 8005c66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c6e:	3302      	adds	r3, #2
 8005c70:	e7c5      	b.n	8005bfe <_printf_common+0x62>
 8005c72:	2301      	movs	r3, #1
 8005c74:	4622      	mov	r2, r4
 8005c76:	4639      	mov	r1, r7
 8005c78:	4630      	mov	r0, r6
 8005c7a:	47c0      	blx	r8
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	d0e6      	beq.n	8005c4e <_printf_common+0xb2>
 8005c80:	f109 0901 	add.w	r9, r9, #1
 8005c84:	e7d8      	b.n	8005c38 <_printf_common+0x9c>
	...

08005c88 <_printf_i>:
 8005c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005c90:	460c      	mov	r4, r1
 8005c92:	7e09      	ldrb	r1, [r1, #24]
 8005c94:	b085      	sub	sp, #20
 8005c96:	296e      	cmp	r1, #110	; 0x6e
 8005c98:	4617      	mov	r7, r2
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	4698      	mov	r8, r3
 8005c9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ca0:	f000 80b3 	beq.w	8005e0a <_printf_i+0x182>
 8005ca4:	d822      	bhi.n	8005cec <_printf_i+0x64>
 8005ca6:	2963      	cmp	r1, #99	; 0x63
 8005ca8:	d036      	beq.n	8005d18 <_printf_i+0x90>
 8005caa:	d80a      	bhi.n	8005cc2 <_printf_i+0x3a>
 8005cac:	2900      	cmp	r1, #0
 8005cae:	f000 80b9 	beq.w	8005e24 <_printf_i+0x19c>
 8005cb2:	2958      	cmp	r1, #88	; 0x58
 8005cb4:	f000 8083 	beq.w	8005dbe <_printf_i+0x136>
 8005cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cbc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005cc0:	e032      	b.n	8005d28 <_printf_i+0xa0>
 8005cc2:	2964      	cmp	r1, #100	; 0x64
 8005cc4:	d001      	beq.n	8005cca <_printf_i+0x42>
 8005cc6:	2969      	cmp	r1, #105	; 0x69
 8005cc8:	d1f6      	bne.n	8005cb8 <_printf_i+0x30>
 8005cca:	6820      	ldr	r0, [r4, #0]
 8005ccc:	6813      	ldr	r3, [r2, #0]
 8005cce:	0605      	lsls	r5, r0, #24
 8005cd0:	f103 0104 	add.w	r1, r3, #4
 8005cd4:	d52a      	bpl.n	8005d2c <_printf_i+0xa4>
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6011      	str	r1, [r2, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	da03      	bge.n	8005ce6 <_printf_i+0x5e>
 8005cde:	222d      	movs	r2, #45	; 0x2d
 8005ce0:	425b      	negs	r3, r3
 8005ce2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005ce6:	486f      	ldr	r0, [pc, #444]	; (8005ea4 <_printf_i+0x21c>)
 8005ce8:	220a      	movs	r2, #10
 8005cea:	e039      	b.n	8005d60 <_printf_i+0xd8>
 8005cec:	2973      	cmp	r1, #115	; 0x73
 8005cee:	f000 809d 	beq.w	8005e2c <_printf_i+0x1a4>
 8005cf2:	d808      	bhi.n	8005d06 <_printf_i+0x7e>
 8005cf4:	296f      	cmp	r1, #111	; 0x6f
 8005cf6:	d020      	beq.n	8005d3a <_printf_i+0xb2>
 8005cf8:	2970      	cmp	r1, #112	; 0x70
 8005cfa:	d1dd      	bne.n	8005cb8 <_printf_i+0x30>
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	f043 0320 	orr.w	r3, r3, #32
 8005d02:	6023      	str	r3, [r4, #0]
 8005d04:	e003      	b.n	8005d0e <_printf_i+0x86>
 8005d06:	2975      	cmp	r1, #117	; 0x75
 8005d08:	d017      	beq.n	8005d3a <_printf_i+0xb2>
 8005d0a:	2978      	cmp	r1, #120	; 0x78
 8005d0c:	d1d4      	bne.n	8005cb8 <_printf_i+0x30>
 8005d0e:	2378      	movs	r3, #120	; 0x78
 8005d10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d14:	4864      	ldr	r0, [pc, #400]	; (8005ea8 <_printf_i+0x220>)
 8005d16:	e055      	b.n	8005dc4 <_printf_i+0x13c>
 8005d18:	6813      	ldr	r3, [r2, #0]
 8005d1a:	1d19      	adds	r1, r3, #4
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6011      	str	r1, [r2, #0]
 8005d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e08c      	b.n	8005e46 <_printf_i+0x1be>
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6011      	str	r1, [r2, #0]
 8005d30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d34:	bf18      	it	ne
 8005d36:	b21b      	sxthne	r3, r3
 8005d38:	e7cf      	b.n	8005cda <_printf_i+0x52>
 8005d3a:	6813      	ldr	r3, [r2, #0]
 8005d3c:	6825      	ldr	r5, [r4, #0]
 8005d3e:	1d18      	adds	r0, r3, #4
 8005d40:	6010      	str	r0, [r2, #0]
 8005d42:	0628      	lsls	r0, r5, #24
 8005d44:	d501      	bpl.n	8005d4a <_printf_i+0xc2>
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	e002      	b.n	8005d50 <_printf_i+0xc8>
 8005d4a:	0668      	lsls	r0, r5, #25
 8005d4c:	d5fb      	bpl.n	8005d46 <_printf_i+0xbe>
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	4854      	ldr	r0, [pc, #336]	; (8005ea4 <_printf_i+0x21c>)
 8005d52:	296f      	cmp	r1, #111	; 0x6f
 8005d54:	bf14      	ite	ne
 8005d56:	220a      	movne	r2, #10
 8005d58:	2208      	moveq	r2, #8
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d60:	6865      	ldr	r5, [r4, #4]
 8005d62:	60a5      	str	r5, [r4, #8]
 8005d64:	2d00      	cmp	r5, #0
 8005d66:	f2c0 8095 	blt.w	8005e94 <_printf_i+0x20c>
 8005d6a:	6821      	ldr	r1, [r4, #0]
 8005d6c:	f021 0104 	bic.w	r1, r1, #4
 8005d70:	6021      	str	r1, [r4, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d13d      	bne.n	8005df2 <_printf_i+0x16a>
 8005d76:	2d00      	cmp	r5, #0
 8005d78:	f040 808e 	bne.w	8005e98 <_printf_i+0x210>
 8005d7c:	4665      	mov	r5, ip
 8005d7e:	2a08      	cmp	r2, #8
 8005d80:	d10b      	bne.n	8005d9a <_printf_i+0x112>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	07db      	lsls	r3, r3, #31
 8005d86:	d508      	bpl.n	8005d9a <_printf_i+0x112>
 8005d88:	6923      	ldr	r3, [r4, #16]
 8005d8a:	6862      	ldr	r2, [r4, #4]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	bfde      	ittt	le
 8005d90:	2330      	movle	r3, #48	; 0x30
 8005d92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d96:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005d9a:	ebac 0305 	sub.w	r3, ip, r5
 8005d9e:	6123      	str	r3, [r4, #16]
 8005da0:	f8cd 8000 	str.w	r8, [sp]
 8005da4:	463b      	mov	r3, r7
 8005da6:	aa03      	add	r2, sp, #12
 8005da8:	4621      	mov	r1, r4
 8005daa:	4630      	mov	r0, r6
 8005dac:	f7ff fef6 	bl	8005b9c <_printf_common>
 8005db0:	3001      	adds	r0, #1
 8005db2:	d14d      	bne.n	8005e50 <_printf_i+0x1c8>
 8005db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005db8:	b005      	add	sp, #20
 8005dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dbe:	4839      	ldr	r0, [pc, #228]	; (8005ea4 <_printf_i+0x21c>)
 8005dc0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005dc4:	6813      	ldr	r3, [r2, #0]
 8005dc6:	6821      	ldr	r1, [r4, #0]
 8005dc8:	1d1d      	adds	r5, r3, #4
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6015      	str	r5, [r2, #0]
 8005dce:	060a      	lsls	r2, r1, #24
 8005dd0:	d50b      	bpl.n	8005dea <_printf_i+0x162>
 8005dd2:	07ca      	lsls	r2, r1, #31
 8005dd4:	bf44      	itt	mi
 8005dd6:	f041 0120 	orrmi.w	r1, r1, #32
 8005dda:	6021      	strmi	r1, [r4, #0]
 8005ddc:	b91b      	cbnz	r3, 8005de6 <_printf_i+0x15e>
 8005dde:	6822      	ldr	r2, [r4, #0]
 8005de0:	f022 0220 	bic.w	r2, r2, #32
 8005de4:	6022      	str	r2, [r4, #0]
 8005de6:	2210      	movs	r2, #16
 8005de8:	e7b7      	b.n	8005d5a <_printf_i+0xd2>
 8005dea:	064d      	lsls	r5, r1, #25
 8005dec:	bf48      	it	mi
 8005dee:	b29b      	uxthmi	r3, r3
 8005df0:	e7ef      	b.n	8005dd2 <_printf_i+0x14a>
 8005df2:	4665      	mov	r5, ip
 8005df4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005df8:	fb02 3311 	mls	r3, r2, r1, r3
 8005dfc:	5cc3      	ldrb	r3, [r0, r3]
 8005dfe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e02:	460b      	mov	r3, r1
 8005e04:	2900      	cmp	r1, #0
 8005e06:	d1f5      	bne.n	8005df4 <_printf_i+0x16c>
 8005e08:	e7b9      	b.n	8005d7e <_printf_i+0xf6>
 8005e0a:	6813      	ldr	r3, [r2, #0]
 8005e0c:	6825      	ldr	r5, [r4, #0]
 8005e0e:	6961      	ldr	r1, [r4, #20]
 8005e10:	1d18      	adds	r0, r3, #4
 8005e12:	6010      	str	r0, [r2, #0]
 8005e14:	0628      	lsls	r0, r5, #24
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	d501      	bpl.n	8005e1e <_printf_i+0x196>
 8005e1a:	6019      	str	r1, [r3, #0]
 8005e1c:	e002      	b.n	8005e24 <_printf_i+0x19c>
 8005e1e:	066a      	lsls	r2, r5, #25
 8005e20:	d5fb      	bpl.n	8005e1a <_printf_i+0x192>
 8005e22:	8019      	strh	r1, [r3, #0]
 8005e24:	2300      	movs	r3, #0
 8005e26:	6123      	str	r3, [r4, #16]
 8005e28:	4665      	mov	r5, ip
 8005e2a:	e7b9      	b.n	8005da0 <_printf_i+0x118>
 8005e2c:	6813      	ldr	r3, [r2, #0]
 8005e2e:	1d19      	adds	r1, r3, #4
 8005e30:	6011      	str	r1, [r2, #0]
 8005e32:	681d      	ldr	r5, [r3, #0]
 8005e34:	6862      	ldr	r2, [r4, #4]
 8005e36:	2100      	movs	r1, #0
 8005e38:	4628      	mov	r0, r5
 8005e3a:	f7fa f9d1 	bl	80001e0 <memchr>
 8005e3e:	b108      	cbz	r0, 8005e44 <_printf_i+0x1bc>
 8005e40:	1b40      	subs	r0, r0, r5
 8005e42:	6060      	str	r0, [r4, #4]
 8005e44:	6863      	ldr	r3, [r4, #4]
 8005e46:	6123      	str	r3, [r4, #16]
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e4e:	e7a7      	b.n	8005da0 <_printf_i+0x118>
 8005e50:	6923      	ldr	r3, [r4, #16]
 8005e52:	462a      	mov	r2, r5
 8005e54:	4639      	mov	r1, r7
 8005e56:	4630      	mov	r0, r6
 8005e58:	47c0      	blx	r8
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	d0aa      	beq.n	8005db4 <_printf_i+0x12c>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	079b      	lsls	r3, r3, #30
 8005e62:	d413      	bmi.n	8005e8c <_printf_i+0x204>
 8005e64:	68e0      	ldr	r0, [r4, #12]
 8005e66:	9b03      	ldr	r3, [sp, #12]
 8005e68:	4298      	cmp	r0, r3
 8005e6a:	bfb8      	it	lt
 8005e6c:	4618      	movlt	r0, r3
 8005e6e:	e7a3      	b.n	8005db8 <_printf_i+0x130>
 8005e70:	2301      	movs	r3, #1
 8005e72:	464a      	mov	r2, r9
 8005e74:	4639      	mov	r1, r7
 8005e76:	4630      	mov	r0, r6
 8005e78:	47c0      	blx	r8
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	d09a      	beq.n	8005db4 <_printf_i+0x12c>
 8005e7e:	3501      	adds	r5, #1
 8005e80:	68e3      	ldr	r3, [r4, #12]
 8005e82:	9a03      	ldr	r2, [sp, #12]
 8005e84:	1a9b      	subs	r3, r3, r2
 8005e86:	42ab      	cmp	r3, r5
 8005e88:	dcf2      	bgt.n	8005e70 <_printf_i+0x1e8>
 8005e8a:	e7eb      	b.n	8005e64 <_printf_i+0x1dc>
 8005e8c:	2500      	movs	r5, #0
 8005e8e:	f104 0919 	add.w	r9, r4, #25
 8005e92:	e7f5      	b.n	8005e80 <_printf_i+0x1f8>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1ac      	bne.n	8005df2 <_printf_i+0x16a>
 8005e98:	7803      	ldrb	r3, [r0, #0]
 8005e9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ea2:	e76c      	b.n	8005d7e <_printf_i+0xf6>
 8005ea4:	08006181 	.word	0x08006181
 8005ea8:	08006192 	.word	0x08006192

08005eac <memcpy>:
 8005eac:	b510      	push	{r4, lr}
 8005eae:	1e43      	subs	r3, r0, #1
 8005eb0:	440a      	add	r2, r1
 8005eb2:	4291      	cmp	r1, r2
 8005eb4:	d100      	bne.n	8005eb8 <memcpy+0xc>
 8005eb6:	bd10      	pop	{r4, pc}
 8005eb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ebc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ec0:	e7f7      	b.n	8005eb2 <memcpy+0x6>

08005ec2 <memmove>:
 8005ec2:	4288      	cmp	r0, r1
 8005ec4:	b510      	push	{r4, lr}
 8005ec6:	eb01 0302 	add.w	r3, r1, r2
 8005eca:	d807      	bhi.n	8005edc <memmove+0x1a>
 8005ecc:	1e42      	subs	r2, r0, #1
 8005ece:	4299      	cmp	r1, r3
 8005ed0:	d00a      	beq.n	8005ee8 <memmove+0x26>
 8005ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ed6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005eda:	e7f8      	b.n	8005ece <memmove+0xc>
 8005edc:	4283      	cmp	r3, r0
 8005ede:	d9f5      	bls.n	8005ecc <memmove+0xa>
 8005ee0:	1881      	adds	r1, r0, r2
 8005ee2:	1ad2      	subs	r2, r2, r3
 8005ee4:	42d3      	cmn	r3, r2
 8005ee6:	d100      	bne.n	8005eea <memmove+0x28>
 8005ee8:	bd10      	pop	{r4, pc}
 8005eea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005eee:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005ef2:	e7f7      	b.n	8005ee4 <memmove+0x22>

08005ef4 <_free_r>:
 8005ef4:	b538      	push	{r3, r4, r5, lr}
 8005ef6:	4605      	mov	r5, r0
 8005ef8:	2900      	cmp	r1, #0
 8005efa:	d045      	beq.n	8005f88 <_free_r+0x94>
 8005efc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f00:	1f0c      	subs	r4, r1, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	bfb8      	it	lt
 8005f06:	18e4      	addlt	r4, r4, r3
 8005f08:	f000 f8d2 	bl	80060b0 <__malloc_lock>
 8005f0c:	4a1f      	ldr	r2, [pc, #124]	; (8005f8c <_free_r+0x98>)
 8005f0e:	6813      	ldr	r3, [r2, #0]
 8005f10:	4610      	mov	r0, r2
 8005f12:	b933      	cbnz	r3, 8005f22 <_free_r+0x2e>
 8005f14:	6063      	str	r3, [r4, #4]
 8005f16:	6014      	str	r4, [r2, #0]
 8005f18:	4628      	mov	r0, r5
 8005f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f1e:	f000 b8c8 	b.w	80060b2 <__malloc_unlock>
 8005f22:	42a3      	cmp	r3, r4
 8005f24:	d90c      	bls.n	8005f40 <_free_r+0x4c>
 8005f26:	6821      	ldr	r1, [r4, #0]
 8005f28:	1862      	adds	r2, r4, r1
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	bf04      	itt	eq
 8005f2e:	681a      	ldreq	r2, [r3, #0]
 8005f30:	685b      	ldreq	r3, [r3, #4]
 8005f32:	6063      	str	r3, [r4, #4]
 8005f34:	bf04      	itt	eq
 8005f36:	1852      	addeq	r2, r2, r1
 8005f38:	6022      	streq	r2, [r4, #0]
 8005f3a:	6004      	str	r4, [r0, #0]
 8005f3c:	e7ec      	b.n	8005f18 <_free_r+0x24>
 8005f3e:	4613      	mov	r3, r2
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	b10a      	cbz	r2, 8005f48 <_free_r+0x54>
 8005f44:	42a2      	cmp	r2, r4
 8005f46:	d9fa      	bls.n	8005f3e <_free_r+0x4a>
 8005f48:	6819      	ldr	r1, [r3, #0]
 8005f4a:	1858      	adds	r0, r3, r1
 8005f4c:	42a0      	cmp	r0, r4
 8005f4e:	d10b      	bne.n	8005f68 <_free_r+0x74>
 8005f50:	6820      	ldr	r0, [r4, #0]
 8005f52:	4401      	add	r1, r0
 8005f54:	1858      	adds	r0, r3, r1
 8005f56:	4282      	cmp	r2, r0
 8005f58:	6019      	str	r1, [r3, #0]
 8005f5a:	d1dd      	bne.n	8005f18 <_free_r+0x24>
 8005f5c:	6810      	ldr	r0, [r2, #0]
 8005f5e:	6852      	ldr	r2, [r2, #4]
 8005f60:	605a      	str	r2, [r3, #4]
 8005f62:	4401      	add	r1, r0
 8005f64:	6019      	str	r1, [r3, #0]
 8005f66:	e7d7      	b.n	8005f18 <_free_r+0x24>
 8005f68:	d902      	bls.n	8005f70 <_free_r+0x7c>
 8005f6a:	230c      	movs	r3, #12
 8005f6c:	602b      	str	r3, [r5, #0]
 8005f6e:	e7d3      	b.n	8005f18 <_free_r+0x24>
 8005f70:	6820      	ldr	r0, [r4, #0]
 8005f72:	1821      	adds	r1, r4, r0
 8005f74:	428a      	cmp	r2, r1
 8005f76:	bf04      	itt	eq
 8005f78:	6811      	ldreq	r1, [r2, #0]
 8005f7a:	6852      	ldreq	r2, [r2, #4]
 8005f7c:	6062      	str	r2, [r4, #4]
 8005f7e:	bf04      	itt	eq
 8005f80:	1809      	addeq	r1, r1, r0
 8005f82:	6021      	streq	r1, [r4, #0]
 8005f84:	605c      	str	r4, [r3, #4]
 8005f86:	e7c7      	b.n	8005f18 <_free_r+0x24>
 8005f88:	bd38      	pop	{r3, r4, r5, pc}
 8005f8a:	bf00      	nop
 8005f8c:	200000a0 	.word	0x200000a0

08005f90 <_malloc_r>:
 8005f90:	b570      	push	{r4, r5, r6, lr}
 8005f92:	1ccd      	adds	r5, r1, #3
 8005f94:	f025 0503 	bic.w	r5, r5, #3
 8005f98:	3508      	adds	r5, #8
 8005f9a:	2d0c      	cmp	r5, #12
 8005f9c:	bf38      	it	cc
 8005f9e:	250c      	movcc	r5, #12
 8005fa0:	2d00      	cmp	r5, #0
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	db01      	blt.n	8005faa <_malloc_r+0x1a>
 8005fa6:	42a9      	cmp	r1, r5
 8005fa8:	d903      	bls.n	8005fb2 <_malloc_r+0x22>
 8005faa:	230c      	movs	r3, #12
 8005fac:	6033      	str	r3, [r6, #0]
 8005fae:	2000      	movs	r0, #0
 8005fb0:	bd70      	pop	{r4, r5, r6, pc}
 8005fb2:	f000 f87d 	bl	80060b0 <__malloc_lock>
 8005fb6:	4a21      	ldr	r2, [pc, #132]	; (800603c <_malloc_r+0xac>)
 8005fb8:	6814      	ldr	r4, [r2, #0]
 8005fba:	4621      	mov	r1, r4
 8005fbc:	b991      	cbnz	r1, 8005fe4 <_malloc_r+0x54>
 8005fbe:	4c20      	ldr	r4, [pc, #128]	; (8006040 <_malloc_r+0xb0>)
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	b91b      	cbnz	r3, 8005fcc <_malloc_r+0x3c>
 8005fc4:	4630      	mov	r0, r6
 8005fc6:	f000 f863 	bl	8006090 <_sbrk_r>
 8005fca:	6020      	str	r0, [r4, #0]
 8005fcc:	4629      	mov	r1, r5
 8005fce:	4630      	mov	r0, r6
 8005fd0:	f000 f85e 	bl	8006090 <_sbrk_r>
 8005fd4:	1c43      	adds	r3, r0, #1
 8005fd6:	d124      	bne.n	8006022 <_malloc_r+0x92>
 8005fd8:	230c      	movs	r3, #12
 8005fda:	6033      	str	r3, [r6, #0]
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f000 f868 	bl	80060b2 <__malloc_unlock>
 8005fe2:	e7e4      	b.n	8005fae <_malloc_r+0x1e>
 8005fe4:	680b      	ldr	r3, [r1, #0]
 8005fe6:	1b5b      	subs	r3, r3, r5
 8005fe8:	d418      	bmi.n	800601c <_malloc_r+0x8c>
 8005fea:	2b0b      	cmp	r3, #11
 8005fec:	d90f      	bls.n	800600e <_malloc_r+0x7e>
 8005fee:	600b      	str	r3, [r1, #0]
 8005ff0:	50cd      	str	r5, [r1, r3]
 8005ff2:	18cc      	adds	r4, r1, r3
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	f000 f85c 	bl	80060b2 <__malloc_unlock>
 8005ffa:	f104 000b 	add.w	r0, r4, #11
 8005ffe:	1d23      	adds	r3, r4, #4
 8006000:	f020 0007 	bic.w	r0, r0, #7
 8006004:	1ac3      	subs	r3, r0, r3
 8006006:	d0d3      	beq.n	8005fb0 <_malloc_r+0x20>
 8006008:	425a      	negs	r2, r3
 800600a:	50e2      	str	r2, [r4, r3]
 800600c:	e7d0      	b.n	8005fb0 <_malloc_r+0x20>
 800600e:	428c      	cmp	r4, r1
 8006010:	684b      	ldr	r3, [r1, #4]
 8006012:	bf16      	itet	ne
 8006014:	6063      	strne	r3, [r4, #4]
 8006016:	6013      	streq	r3, [r2, #0]
 8006018:	460c      	movne	r4, r1
 800601a:	e7eb      	b.n	8005ff4 <_malloc_r+0x64>
 800601c:	460c      	mov	r4, r1
 800601e:	6849      	ldr	r1, [r1, #4]
 8006020:	e7cc      	b.n	8005fbc <_malloc_r+0x2c>
 8006022:	1cc4      	adds	r4, r0, #3
 8006024:	f024 0403 	bic.w	r4, r4, #3
 8006028:	42a0      	cmp	r0, r4
 800602a:	d005      	beq.n	8006038 <_malloc_r+0xa8>
 800602c:	1a21      	subs	r1, r4, r0
 800602e:	4630      	mov	r0, r6
 8006030:	f000 f82e 	bl	8006090 <_sbrk_r>
 8006034:	3001      	adds	r0, #1
 8006036:	d0cf      	beq.n	8005fd8 <_malloc_r+0x48>
 8006038:	6025      	str	r5, [r4, #0]
 800603a:	e7db      	b.n	8005ff4 <_malloc_r+0x64>
 800603c:	200000a0 	.word	0x200000a0
 8006040:	200000a4 	.word	0x200000a4

08006044 <_realloc_r>:
 8006044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006046:	4607      	mov	r7, r0
 8006048:	4614      	mov	r4, r2
 800604a:	460e      	mov	r6, r1
 800604c:	b921      	cbnz	r1, 8006058 <_realloc_r+0x14>
 800604e:	4611      	mov	r1, r2
 8006050:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006054:	f7ff bf9c 	b.w	8005f90 <_malloc_r>
 8006058:	b922      	cbnz	r2, 8006064 <_realloc_r+0x20>
 800605a:	f7ff ff4b 	bl	8005ef4 <_free_r>
 800605e:	4625      	mov	r5, r4
 8006060:	4628      	mov	r0, r5
 8006062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006064:	f000 f826 	bl	80060b4 <_malloc_usable_size_r>
 8006068:	42a0      	cmp	r0, r4
 800606a:	d20f      	bcs.n	800608c <_realloc_r+0x48>
 800606c:	4621      	mov	r1, r4
 800606e:	4638      	mov	r0, r7
 8006070:	f7ff ff8e 	bl	8005f90 <_malloc_r>
 8006074:	4605      	mov	r5, r0
 8006076:	2800      	cmp	r0, #0
 8006078:	d0f2      	beq.n	8006060 <_realloc_r+0x1c>
 800607a:	4631      	mov	r1, r6
 800607c:	4622      	mov	r2, r4
 800607e:	f7ff ff15 	bl	8005eac <memcpy>
 8006082:	4631      	mov	r1, r6
 8006084:	4638      	mov	r0, r7
 8006086:	f7ff ff35 	bl	8005ef4 <_free_r>
 800608a:	e7e9      	b.n	8006060 <_realloc_r+0x1c>
 800608c:	4635      	mov	r5, r6
 800608e:	e7e7      	b.n	8006060 <_realloc_r+0x1c>

08006090 <_sbrk_r>:
 8006090:	b538      	push	{r3, r4, r5, lr}
 8006092:	4c06      	ldr	r4, [pc, #24]	; (80060ac <_sbrk_r+0x1c>)
 8006094:	2300      	movs	r3, #0
 8006096:	4605      	mov	r5, r0
 8006098:	4608      	mov	r0, r1
 800609a:	6023      	str	r3, [r4, #0]
 800609c:	f7fc faf8 	bl	8002690 <_sbrk>
 80060a0:	1c43      	adds	r3, r0, #1
 80060a2:	d102      	bne.n	80060aa <_sbrk_r+0x1a>
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	b103      	cbz	r3, 80060aa <_sbrk_r+0x1a>
 80060a8:	602b      	str	r3, [r5, #0]
 80060aa:	bd38      	pop	{r3, r4, r5, pc}
 80060ac:	200003ec 	.word	0x200003ec

080060b0 <__malloc_lock>:
 80060b0:	4770      	bx	lr

080060b2 <__malloc_unlock>:
 80060b2:	4770      	bx	lr

080060b4 <_malloc_usable_size_r>:
 80060b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060b8:	1f18      	subs	r0, r3, #4
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	bfbc      	itt	lt
 80060be:	580b      	ldrlt	r3, [r1, r0]
 80060c0:	18c0      	addlt	r0, r0, r3
 80060c2:	4770      	bx	lr

080060c4 <_init>:
 80060c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c6:	bf00      	nop
 80060c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ca:	bc08      	pop	{r3}
 80060cc:	469e      	mov	lr, r3
 80060ce:	4770      	bx	lr

080060d0 <_fini>:
 80060d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d2:	bf00      	nop
 80060d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060d6:	bc08      	pop	{r3}
 80060d8:	469e      	mov	lr, r3
 80060da:	4770      	bx	lr
